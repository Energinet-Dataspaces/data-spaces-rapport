/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/centrale-aktorer-og-teknologiske-komponenter"],{

/***/ "./node_modules/@markdoc/next.js/src/runtime.js":
/*!******************************************************!*\
  !*** ./node_modules/@markdoc/next.js/src/runtime.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("// IDEA: explore better displayName functions\nfunction displayName(name) {\n  // Pascal case\n  return name\n    .match(/[a-z]+/gi)\n    .map((word) => word.charAt(0).toUpperCase() + word.substr(1).toLowerCase())\n    .join('');\n}\n\nfunction transformRecord(config) {\n  const output = {};\n  const components = {};\n\n  if (config) {\n    Object.entries(config).forEach(([name, registration]) => {\n      if (output[name]) {\n        throw new Error(`\"${name}\" has already been declared`);\n      }\n\n      const componentName = registration.render ? displayName(name) : undefined;\n\n      output[name] = {\n        ...registration,\n        render: componentName,\n      };\n\n      if (componentName) {\n        components[componentName] = registration.render;\n      }\n    });\n  }\n\n  return {output, components};\n}\n\nexports.getSchema = function getSchema(schema) {\n  const {output: tags, components: tagComponents} = transformRecord(\n    schema.tags\n  );\n\n  const {output: nodes, components: nodeComponents} = transformRecord(\n    schema.nodes\n  );\n\n  return {\n    ...schema,\n    tags,\n    nodes,\n    components: {\n      ...tagComponents,\n      ...nodeComponents,\n    },\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hcmtkb2MvbmV4dC5qcy9zcmMvcnVudGltZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsS0FBSztBQUNqQzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsVUFBVTtBQUNWOztBQUVBLGlCQUFpQjtBQUNqQixTQUFTLHlDQUF5QztBQUNsRDtBQUNBOztBQUVBLFNBQVMsMkNBQTJDO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1hcmtkb2MvbmV4dC5qcy9zcmMvcnVudGltZS5qcz8yZDU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIElERUE6IGV4cGxvcmUgYmV0dGVyIGRpc3BsYXlOYW1lIGZ1bmN0aW9uc1xuZnVuY3Rpb24gZGlzcGxheU5hbWUobmFtZSkge1xuICAvLyBQYXNjYWwgY2FzZVxuICByZXR1cm4gbmFtZVxuICAgIC5tYXRjaCgvW2Etel0rL2dpKVxuICAgIC5tYXAoKHdvcmQpID0+IHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpKVxuICAgIC5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtUmVjb3JkKGNvbmZpZykge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgY29uc3QgY29tcG9uZW50cyA9IHt9O1xuXG4gIGlmIChjb25maWcpIHtcbiAgICBPYmplY3QuZW50cmllcyhjb25maWcpLmZvckVhY2goKFtuYW1lLCByZWdpc3RyYXRpb25dKSA9PiB7XG4gICAgICBpZiAob3V0cHV0W25hbWVdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiBkZWNsYXJlZGApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb21wb25lbnROYW1lID0gcmVnaXN0cmF0aW9uLnJlbmRlciA/IGRpc3BsYXlOYW1lKG5hbWUpIDogdW5kZWZpbmVkO1xuXG4gICAgICBvdXRwdXRbbmFtZV0gPSB7XG4gICAgICAgIC4uLnJlZ2lzdHJhdGlvbixcbiAgICAgICAgcmVuZGVyOiBjb21wb25lbnROYW1lLFxuICAgICAgfTtcblxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgY29tcG9uZW50c1tjb21wb25lbnROYW1lXSA9IHJlZ2lzdHJhdGlvbi5yZW5kZXI7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge291dHB1dCwgY29tcG9uZW50c307XG59XG5cbmV4cG9ydHMuZ2V0U2NoZW1hID0gZnVuY3Rpb24gZ2V0U2NoZW1hKHNjaGVtYSkge1xuICBjb25zdCB7b3V0cHV0OiB0YWdzLCBjb21wb25lbnRzOiB0YWdDb21wb25lbnRzfSA9IHRyYW5zZm9ybVJlY29yZChcbiAgICBzY2hlbWEudGFnc1xuICApO1xuXG4gIGNvbnN0IHtvdXRwdXQ6IG5vZGVzLCBjb21wb25lbnRzOiBub2RlQ29tcG9uZW50c30gPSB0cmFuc2Zvcm1SZWNvcmQoXG4gICAgc2NoZW1hLm5vZGVzXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5zY2hlbWEsXG4gICAgdGFncyxcbiAgICBub2RlcyxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAuLi50YWdDb21wb25lbnRzLFxuICAgICAgLi4ubm9kZUNvbXBvbmVudHMsXG4gICAgfSxcbiAgfTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@markdoc/next.js/src/runtime.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Fboetter%2FDocuments%2FGitHub%2Fdata-spaces-rapport%2Fsrc%2Fpages%2Fcentrale-aktorer-og-teknologiske-komponenter%2Findex.md&page=%2Fcentrale-aktorer-og-teknologiske-komponenter!":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Fboetter%2FDocuments%2FGitHub%2Fdata-spaces-rapport%2Fsrc%2Fpages%2Fcentrale-aktorer-og-teknologiske-komponenter%2Findex.md&page=%2Fcentrale-aktorer-og-teknologiske-komponenter! ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/centrale-aktorer-og-teknologiske-komponenter\",\n      function () {\n        return __webpack_require__(/*! ./src/pages/centrale-aktorer-og-teknologiske-komponenter/index.md */ \"./src/pages/centrale-aktorer-og-teknologiske-komponenter/index.md\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/centrale-aktorer-og-teknologiske-komponenter\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD0lMkZVc2VycyUyRmJvZXR0ZXIlMkZEb2N1bWVudHMlMkZHaXRIdWIlMkZkYXRhLXNwYWNlcy1yYXBwb3J0JTJGc3JjJTJGcGFnZXMlMkZjZW50cmFsZS1ha3RvcmVyLW9nLXRla25vbG9naXNrZS1rb21wb25lbnRlciUyRmluZGV4Lm1kJnBhZ2U9JTJGY2VudHJhbGUtYWt0b3Jlci1vZy10ZWtub2xvZ2lza2Uta29tcG9uZW50ZXIhLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsNElBQW1FO0FBQzFGO0FBQ0E7QUFDQSxPQUFPLElBQVU7QUFDakIsTUFBTSxVQUFVO0FBQ2hCO0FBQ0EsT0FBTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz85ZjZmIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICh3aW5kb3cuX19ORVhUX1AgPSB3aW5kb3cuX19ORVhUX1AgfHwgW10pLnB1c2goW1xuICAgICAgXCIvY2VudHJhbGUtYWt0b3Jlci1vZy10ZWtub2xvZ2lza2Uta29tcG9uZW50ZXJcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3NyYy9wYWdlcy9jZW50cmFsZS1ha3RvcmVyLW9nLXRla25vbG9naXNrZS1rb21wb25lbnRlci9pbmRleC5tZFwiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuX19ORVhUX1AucHVzaChbXCIvY2VudHJhbGUtYWt0b3Jlci1vZy10ZWtub2xvZ2lza2Uta29tcG9uZW50ZXJcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Fboetter%2FDocuments%2FGitHub%2Fdata-spaces-rapport%2Fsrc%2Fpages%2Fcentrale-aktorer-og-teknologiske-komponenter%2Findex.md&page=%2Fcentrale-aktorer-og-teknologiske-komponenter!\n"));

/***/ }),

/***/ "./markdoc/nodes.js":
/*!**************************!*\
  !*** ./markdoc/nodes.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var _components_Fence__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/components/Fence */ \"./src/components/Fence.jsx\");\n/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @markdoc/markdoc */ \"./node_modules/@markdoc/markdoc/dist/index.mjs\");\n\n\n\n\nvar nodes = {\n    document: {\n        render: undefined\n    },\n    th: (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_3__.nodes.th), {\n        attributes: (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_3__.nodes.th.attributes), {\n            scope: {\n                type: String,\n                default: \"col\"\n            }\n        })\n    }),\n    fence: {\n        render: _components_Fence__WEBPACK_IMPORTED_MODULE_0__.Fence,\n        attributes: {\n            language: {\n                type: String\n            }\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (nodes);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL25vZGVzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0FBQTBDO0FBQ2M7QUFFeEQsSUFBTUMsS0FBSyxHQUFHO0lBQ1pFLFFBQVEsRUFBRTtRQUNSQyxNQUFNLEVBQUVDLFNBQVM7S0FDbEI7SUFDREMsRUFBRSxFQUFFLHdLQUNDSixzREFBZTtRQUNsQkssVUFBVSxFQUFFLHdLQUNQTCxpRUFBMEI7WUFDN0JNLEtBQUssRUFBRTtnQkFDTEMsSUFBSSxFQUFFQyxNQUFNO2dCQUNaQyxPQUFPLEVBQUUsS0FBSzthQUNmO1VBQ0Y7TUFDRjtJQUNEQyxLQUFLLEVBQUU7UUFDTFIsTUFBTSxFQUFFSixvREFBSztRQUNiTyxVQUFVLEVBQUU7WUFDVk0sUUFBUSxFQUFFO2dCQUNSSixJQUFJLEVBQUVDLE1BQU07YUFDYjtTQUNGO0tBQ0Y7Q0FDRjtBQUVELCtEQUFlVCxLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL21hcmtkb2Mvbm9kZXMuanM/NWMzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGZW5jZSB9IGZyb20gJ0AvY29tcG9uZW50cy9GZW5jZSdcbmltcG9ydCB7IG5vZGVzIGFzIGRlZmF1bHROb2RlcyB9IGZyb20gJ0BtYXJrZG9jL21hcmtkb2MnXG5cbmNvbnN0IG5vZGVzID0ge1xuICBkb2N1bWVudDoge1xuICAgIHJlbmRlcjogdW5kZWZpbmVkLFxuICB9LFxuICB0aDoge1xuICAgIC4uLmRlZmF1bHROb2Rlcy50aCxcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAuLi5kZWZhdWx0Tm9kZXMudGguYXR0cmlidXRlcyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ2NvbCcsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIGZlbmNlOiB7XG4gICAgcmVuZGVyOiBGZW5jZSxcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBsYW5ndWFnZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IG5vZGVzXG4iXSwibmFtZXMiOlsiRmVuY2UiLCJub2RlcyIsImRlZmF1bHROb2RlcyIsImRvY3VtZW50IiwicmVuZGVyIiwidW5kZWZpbmVkIiwidGgiLCJhdHRyaWJ1dGVzIiwic2NvcGUiLCJ0eXBlIiwiU3RyaW5nIiwiZGVmYXVsdCIsImZlbmNlIiwibGFuZ3VhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./markdoc/nodes.js\n"));

/***/ }),

/***/ "./markdoc/tags.js":
/*!*************************!*\
  !*** ./markdoc/tags.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Callout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/Callout */ \"./src/components/Callout.jsx\");\n/* harmony import */ var _components_QuickLinks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/QuickLinks */ \"./src/components/QuickLinks.jsx\");\nvar _this = undefined;\n\n\n\nvar tags = {\n    callout: {\n        attributes: {\n            title: {\n                type: String\n            },\n            type: {\n                type: String,\n                default: \"note\",\n                matches: [\n                    \"note\",\n                    \"warning\"\n                ],\n                errorLevel: \"critical\"\n            }\n        },\n        render: _components_Callout__WEBPACK_IMPORTED_MODULE_1__.Callout\n    },\n    figure: {\n        selfClosing: true,\n        attributes: {\n            src: {\n                type: String\n            },\n            alt: {\n                type: String\n            },\n            caption: {\n                type: String\n            }\n        },\n        render: function(param) {\n            var src = param.src, _alt = param.alt, alt = _alt === void 0 ? \"\" : _alt, caption = param.caption;\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"figure\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                        src: src,\n                        alt: alt\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/markdoc/tags.js\",\n                        lineNumber: 27,\n                        columnNumber: 9\n                    }, _this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"figcaption\", {\n                        children: caption\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/markdoc/tags.js\",\n                        lineNumber: 28,\n                        columnNumber: 9\n                    }, _this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/markdoc/tags.js\",\n                lineNumber: 25,\n                columnNumber: 7\n            }, _this);\n        }\n    },\n    \"quick-links\": {\n        render: _components_QuickLinks__WEBPACK_IMPORTED_MODULE_2__.QuickLinks\n    },\n    \"quick-link\": {\n        selfClosing: true,\n        render: _components_QuickLinks__WEBPACK_IMPORTED_MODULE_2__.QuickLink,\n        attributes: {\n            title: {\n                type: String\n            },\n            description: {\n                type: String\n            },\n            icon: {\n                type: String\n            },\n            href: {\n                type: String\n            }\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (tags);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tYXJrZG9jL3RhZ3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFBOEM7QUFDaUI7QUFFL0QsSUFBTUcsSUFBSSxHQUFHO0lBQ1hDLE9BQU8sRUFBRTtRQUNQQyxVQUFVLEVBQUU7WUFDVkMsS0FBSyxFQUFFO2dCQUFFQyxJQUFJLEVBQUVDLE1BQU07YUFBRTtZQUN2QkQsSUFBSSxFQUFFO2dCQUNKQSxJQUFJLEVBQUVDLE1BQU07Z0JBQ1pDLE9BQU8sRUFBRSxNQUFNO2dCQUNmQyxPQUFPLEVBQUU7b0JBQUMsTUFBTTtvQkFBRSxTQUFTO2lCQUFDO2dCQUM1QkMsVUFBVSxFQUFFLFVBQVU7YUFDdkI7U0FDRjtRQUNEQyxNQUFNLEVBQUVaLHdEQUFPO0tBQ2hCO0lBQ0RhLE1BQU0sRUFBRTtRQUNOQyxXQUFXLEVBQUUsSUFBSTtRQUNqQlQsVUFBVSxFQUFFO1lBQ1ZVLEdBQUcsRUFBRTtnQkFBRVIsSUFBSSxFQUFFQyxNQUFNO2FBQUU7WUFDckJRLEdBQUcsRUFBRTtnQkFBRVQsSUFBSSxFQUFFQyxNQUFNO2FBQUU7WUFDckJTLE9BQU8sRUFBRTtnQkFBRVYsSUFBSSxFQUFFQyxNQUFNO2FBQUU7U0FDMUI7UUFDREksTUFBTSxFQUFFO2dCQUFHRyxHQUFHLFNBQUhBLEdBQUcsZUFBRUMsR0FBRyxFQUFIQSxHQUFHLHFCQUFHLEVBQUUsU0FBRUMsT0FBTyxTQUFQQSxPQUFPO2lDQUMvQiw4REFBQ0osUUFBTTs7a0NBRUwsOERBQUNLLEtBQUc7d0JBQUNILEdBQUcsRUFBRUEsR0FBRzt3QkFBRUMsR0FBRyxFQUFFQSxHQUFHOzs7Ozs2QkFBSTtrQ0FDM0IsOERBQUNHLFlBQVU7a0NBQUVGLE9BQU87Ozs7OzZCQUFjOzs7Ozs7cUJBQzNCO1NBQ1Y7S0FDRjtJQUNELGFBQWEsRUFBRTtRQUNiTCxNQUFNLEVBQUVWLDhEQUFVO0tBQ25CO0lBQ0QsWUFBWSxFQUFFO1FBQ1pZLFdBQVcsRUFBRSxJQUFJO1FBQ2pCRixNQUFNLEVBQUVYLDZEQUFTO1FBQ2pCSSxVQUFVLEVBQUU7WUFDVkMsS0FBSyxFQUFFO2dCQUFFQyxJQUFJLEVBQUVDLE1BQU07YUFBRTtZQUN2QlksV0FBVyxFQUFFO2dCQUFFYixJQUFJLEVBQUVDLE1BQU07YUFBRTtZQUM3QmEsSUFBSSxFQUFFO2dCQUFFZCxJQUFJLEVBQUVDLE1BQU07YUFBRTtZQUN0QmMsSUFBSSxFQUFFO2dCQUFFZixJQUFJLEVBQUVDLE1BQU07YUFBRTtTQUN2QjtLQUNGO0NBQ0Y7QUFFRCwrREFBZUwsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9tYXJrZG9jL3RhZ3MuanM/NzI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWxsb3V0IH0gZnJvbSAnQC9jb21wb25lbnRzL0NhbGxvdXQnXG5pbXBvcnQgeyBRdWlja0xpbmssIFF1aWNrTGlua3MgfSBmcm9tICdAL2NvbXBvbmVudHMvUXVpY2tMaW5rcydcblxuY29uc3QgdGFncyA9IHtcbiAgY2FsbG91dDoge1xuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIHRpdGxlOiB7IHR5cGU6IFN0cmluZyB9LFxuICAgICAgdHlwZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6ICdub3RlJyxcbiAgICAgICAgbWF0Y2hlczogWydub3RlJywgJ3dhcm5pbmcnXSxcbiAgICAgICAgZXJyb3JMZXZlbDogJ2NyaXRpY2FsJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICByZW5kZXI6IENhbGxvdXQsXG4gIH0sXG4gIGZpZ3VyZToge1xuICAgIHNlbGZDbG9zaW5nOiB0cnVlLFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIHNyYzogeyB0eXBlOiBTdHJpbmcgfSxcbiAgICAgIGFsdDogeyB0eXBlOiBTdHJpbmcgfSxcbiAgICAgIGNhcHRpb246IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgfSxcbiAgICByZW5kZXI6ICh7IHNyYywgYWx0ID0gJycsIGNhcHRpb24gfSkgPT4gKFxuICAgICAgPGZpZ3VyZT5cbiAgICAgICAgey8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAbmV4dC9uZXh0L25vLWltZy1lbGVtZW50ICovfVxuICAgICAgICA8aW1nIHNyYz17c3JjfSBhbHQ9e2FsdH0gLz5cbiAgICAgICAgPGZpZ2NhcHRpb24+e2NhcHRpb259PC9maWdjYXB0aW9uPlxuICAgICAgPC9maWd1cmU+XG4gICAgKSxcbiAgfSxcbiAgJ3F1aWNrLWxpbmtzJzoge1xuICAgIHJlbmRlcjogUXVpY2tMaW5rcyxcbiAgfSxcbiAgJ3F1aWNrLWxpbmsnOiB7XG4gICAgc2VsZkNsb3Npbmc6IHRydWUsXG4gICAgcmVuZGVyOiBRdWlja0xpbmssXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgdGl0bGU6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICBkZXNjcmlwdGlvbjogeyB0eXBlOiBTdHJpbmcgfSxcbiAgICAgIGljb246IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICBocmVmOiB7IHR5cGU6IFN0cmluZyB9LFxuICAgIH0sXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IHRhZ3NcbiJdLCJuYW1lcyI6WyJDYWxsb3V0IiwiUXVpY2tMaW5rIiwiUXVpY2tMaW5rcyIsInRhZ3MiLCJjYWxsb3V0IiwiYXR0cmlidXRlcyIsInRpdGxlIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJtYXRjaGVzIiwiZXJyb3JMZXZlbCIsInJlbmRlciIsImZpZ3VyZSIsInNlbGZDbG9zaW5nIiwic3JjIiwiYWx0IiwiY2FwdGlvbiIsImltZyIsImZpZ2NhcHRpb24iLCJkZXNjcmlwdGlvbiIsImljb24iLCJocmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./markdoc/tags.js\n"));

/***/ }),

/***/ "./src/components/Callout.jsx":
/*!************************************!*\
  !*** ./src/components/Callout.jsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Callout\": function() { return /* binding */ Callout; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"./node_modules/clsx/dist/clsx.m.js\");\n/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/Icon */ \"./src/components/Icon.jsx\");\n\nvar _this = undefined;\n\n\n\nvar styles = {\n    note: {\n        container: \"bg-sky-50 dark:bg-slate-800/60 dark:ring-1 dark:ring-slate-300/10\",\n        title: \"text-sky-900 dark:text-sky-400\",\n        body: \"text-sky-800 [--tw-prose-background:theme(colors.sky.50)] prose-a:text-sky-900 prose-code:text-sky-900 dark:text-slate-300 dark:prose-code:text-slate-300\"\n    },\n    warning: {\n        container: \"bg-amber-50 dark:bg-slate-800/60 dark:ring-1 dark:ring-slate-300/10\",\n        title: \"text-amber-900 dark:text-amber-500\",\n        body: \"text-amber-800 [--tw-prose-underline:theme(colors.amber.400)] [--tw-prose-background:theme(colors.amber.50)] prose-a:text-amber-900 prose-code:text-amber-900 dark:text-slate-300 dark:[--tw-prose-underline:theme(colors.sky.700)] dark:prose-code:text-slate-300\"\n    }\n};\nvar icons = {\n    note: function(props) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_2__.Icon, (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            icon: \"lightbulb\"\n        }, props), void 0, false, {\n            fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Callout.jsx\",\n            lineNumber: 21,\n            columnNumber: 20\n        }, _this);\n    },\n    warning: function(props) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_2__.Icon, (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            icon: \"warning\",\n            color: \"amber\"\n        }, props), void 0, false, {\n            fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Callout.jsx\",\n            lineNumber: 22,\n            columnNumber: 23\n        }, _this);\n    }\n};\nfunction Callout(param) {\n    var _type = param.type, type = _type === void 0 ? \"note\" : _type, title = param.title, children = param.children;\n    var IconComponent = icons[type];\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"my-8 flex rounded-3xl p-6\", styles[type].container),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(IconComponent, {\n                className: \"h-8 w-8 flex-none\"\n            }, void 0, false, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Callout.jsx\",\n                lineNumber: 30,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"ml-4 flex-auto\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"m-0 font-display text-xl\", styles[type].title),\n                        children: title\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Callout.jsx\",\n                        lineNumber: 32,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (0,clsx__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"prose mt-2.5\", styles[type].body),\n                        children: children\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Callout.jsx\",\n                        lineNumber: 35,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Callout.jsx\",\n                lineNumber: 31,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Callout.jsx\",\n        lineNumber: 29,\n        columnNumber: 5\n    }, this);\n}\n_c = Callout;\nvar _c;\n$RefreshReg$(_c, \"Callout\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9DYWxsb3V0LmpzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7O0FBQXVCO0FBRWlCO0FBRXhDLElBQU1FLE1BQU0sR0FBRztJQUNiQyxJQUFJLEVBQUU7UUFDSkMsU0FBUyxFQUNQLG1FQUFtRTtRQUNyRUMsS0FBSyxFQUFFLGdDQUFnQztRQUN2Q0MsSUFBSSxFQUFFLDJKQUEySjtLQUNsSztJQUNEQyxPQUFPLEVBQUU7UUFDUEgsU0FBUyxFQUNQLHFFQUFxRTtRQUN2RUMsS0FBSyxFQUFFLG9DQUFvQztRQUMzQ0MsSUFBSSxFQUFFLG9RQUFvUTtLQUMzUTtDQUNGO0FBRUQsSUFBTUUsS0FBSyxHQUFHO0lBQ1pMLElBQUksRUFBRSxTQUFDTSxLQUFLOzZCQUFLLDhEQUFDUixrREFBSTtZQUFDUyxJQUFJLEVBQUMsV0FBVztXQUFLRCxLQUFLOzs7O2lCQUFJO0tBQUE7SUFDckRGLE9BQU8sRUFBRSxTQUFDRSxLQUFLOzZCQUFLLDhEQUFDUixrREFBSTtZQUFDUyxJQUFJLEVBQUMsU0FBUztZQUFDQyxLQUFLLEVBQUMsT0FBTztXQUFLRixLQUFLOzs7O2lCQUFJO0tBQUE7Q0FDckU7QUFFTSxTQUFTRyxPQUFPLENBQUMsS0FBa0MsRUFBRTtnQkFBcEMsS0FBa0MsQ0FBaENDLElBQUksRUFBSkEsSUFBSSxzQkFBRyxNQUFNLFVBQUVSLEtBQUssR0FBdEIsS0FBa0MsQ0FBakJBLEtBQUssRUFBRVMsUUFBUSxHQUFoQyxLQUFrQyxDQUFWQSxRQUFRO0lBQ3RELElBQUlDLGFBQWEsR0FBR1AsS0FBSyxDQUFDSyxJQUFJLENBQUM7SUFFL0IscUJBQ0UsOERBQUNHLEtBQUc7UUFBQ0MsU0FBUyxFQUFFakIsZ0RBQUksQ0FBQywyQkFBMkIsRUFBRUUsTUFBTSxDQUFDVyxJQUFJLENBQUMsQ0FBQ1QsU0FBUyxDQUFDOzswQkFDdkUsOERBQUNXLGFBQWE7Z0JBQUNFLFNBQVMsRUFBQyxtQkFBbUI7Ozs7O29CQUFHOzBCQUMvQyw4REFBQ0QsS0FBRztnQkFBQ0MsU0FBUyxFQUFDLGdCQUFnQjs7a0NBQzdCLDhEQUFDQyxHQUFDO3dCQUFDRCxTQUFTLEVBQUVqQixnREFBSSxDQUFDLDBCQUEwQixFQUFFRSxNQUFNLENBQUNXLElBQUksQ0FBQyxDQUFDUixLQUFLLENBQUM7a0NBQy9EQSxLQUFLOzs7Ozs0QkFDSjtrQ0FDSiw4REFBQ1csS0FBRzt3QkFBQ0MsU0FBUyxFQUFFakIsZ0RBQUksQ0FBQyxjQUFjLEVBQUVFLE1BQU0sQ0FBQ1csSUFBSSxDQUFDLENBQUNQLElBQUksQ0FBQztrQ0FDcERRLFFBQVE7Ozs7OzRCQUNMOzs7Ozs7b0JBQ0Y7Ozs7OztZQUNGLENBQ1A7QUFDSCxDQUFDO0FBaEJlRixLQUFBQSxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL0NhbGxvdXQuanN4PzZiMzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCdcblxuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0AvY29tcG9uZW50cy9JY29uJ1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIG5vdGU6IHtcbiAgICBjb250YWluZXI6XG4gICAgICAnYmctc2t5LTUwIGRhcms6Ymctc2xhdGUtODAwLzYwIGRhcms6cmluZy0xIGRhcms6cmluZy1zbGF0ZS0zMDAvMTAnLFxuICAgIHRpdGxlOiAndGV4dC1za3ktOTAwIGRhcms6dGV4dC1za3ktNDAwJyxcbiAgICBib2R5OiAndGV4dC1za3ktODAwIFstLXR3LXByb3NlLWJhY2tncm91bmQ6dGhlbWUoY29sb3JzLnNreS41MCldIHByb3NlLWE6dGV4dC1za3ktOTAwIHByb3NlLWNvZGU6dGV4dC1za3ktOTAwIGRhcms6dGV4dC1zbGF0ZS0zMDAgZGFyazpwcm9zZS1jb2RlOnRleHQtc2xhdGUtMzAwJyxcbiAgfSxcbiAgd2FybmluZzoge1xuICAgIGNvbnRhaW5lcjpcbiAgICAgICdiZy1hbWJlci01MCBkYXJrOmJnLXNsYXRlLTgwMC82MCBkYXJrOnJpbmctMSBkYXJrOnJpbmctc2xhdGUtMzAwLzEwJyxcbiAgICB0aXRsZTogJ3RleHQtYW1iZXItOTAwIGRhcms6dGV4dC1hbWJlci01MDAnLFxuICAgIGJvZHk6ICd0ZXh0LWFtYmVyLTgwMCBbLS10dy1wcm9zZS11bmRlcmxpbmU6dGhlbWUoY29sb3JzLmFtYmVyLjQwMCldIFstLXR3LXByb3NlLWJhY2tncm91bmQ6dGhlbWUoY29sb3JzLmFtYmVyLjUwKV0gcHJvc2UtYTp0ZXh0LWFtYmVyLTkwMCBwcm9zZS1jb2RlOnRleHQtYW1iZXItOTAwIGRhcms6dGV4dC1zbGF0ZS0zMDAgZGFyazpbLS10dy1wcm9zZS11bmRlcmxpbmU6dGhlbWUoY29sb3JzLnNreS43MDApXSBkYXJrOnByb3NlLWNvZGU6dGV4dC1zbGF0ZS0zMDAnLFxuICB9LFxufVxuXG5jb25zdCBpY29ucyA9IHtcbiAgbm90ZTogKHByb3BzKSA9PiA8SWNvbiBpY29uPVwibGlnaHRidWxiXCIgey4uLnByb3BzfSAvPixcbiAgd2FybmluZzogKHByb3BzKSA9PiA8SWNvbiBpY29uPVwid2FybmluZ1wiIGNvbG9yPVwiYW1iZXJcIiB7Li4ucHJvcHN9IC8+LFxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FsbG91dCh7IHR5cGUgPSAnbm90ZScsIHRpdGxlLCBjaGlsZHJlbiB9KSB7XG4gIGxldCBJY29uQ29tcG9uZW50ID0gaWNvbnNbdHlwZV1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbHN4KCdteS04IGZsZXggcm91bmRlZC0zeGwgcC02Jywgc3R5bGVzW3R5cGVdLmNvbnRhaW5lcil9PlxuICAgICAgPEljb25Db21wb25lbnQgY2xhc3NOYW1lPVwiaC04IHctOCBmbGV4LW5vbmVcIiAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtbC00IGZsZXgtYXV0b1wiPlxuICAgICAgICA8cCBjbGFzc05hbWU9e2Nsc3goJ20tMCBmb250LWRpc3BsYXkgdGV4dC14bCcsIHN0eWxlc1t0eXBlXS50aXRsZSl9PlxuICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgPC9wPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzeCgncHJvc2UgbXQtMi41Jywgc3R5bGVzW3R5cGVdLmJvZHkpfT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJjbHN4IiwiSWNvbiIsInN0eWxlcyIsIm5vdGUiLCJjb250YWluZXIiLCJ0aXRsZSIsImJvZHkiLCJ3YXJuaW5nIiwiaWNvbnMiLCJwcm9wcyIsImljb24iLCJjb2xvciIsIkNhbGxvdXQiLCJ0eXBlIiwiY2hpbGRyZW4iLCJJY29uQ29tcG9uZW50IiwiZGl2IiwiY2xhc3NOYW1lIiwicCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/Callout.jsx\n"));

/***/ }),

/***/ "./src/components/Fence.jsx":
/*!**********************************!*\
  !*** ./src/components/Fence.jsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Fence\": function() { return /* binding */ Fence; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prism_react_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prism-react-renderer */ \"./node_modules/prism-react-renderer/dist/index.js\");\n\n\n\n\n\nfunction Fence(param) {\n    var children = param.children, language = param.language;\n    var _this = this;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(prism_react_renderer__WEBPACK_IMPORTED_MODULE_2__[\"default\"], (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({}, prism_react_renderer__WEBPACK_IMPORTED_MODULE_2__.defaultProps), {\n        code: children.trimEnd(),\n        language: language,\n        theme: undefined,\n        children: function(param) {\n            var className = param.className, style = param.style, tokens = param.tokens, getTokenProps = param.getTokenProps;\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pre\", {\n                className: className,\n                style: style,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"code\", {\n                    children: tokens.map(function(line, lineIndex) {\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                            children: [\n                                line.filter(function(token) {\n                                    return !token.empty;\n                                }).map(function(token, tokenIndex) {\n                                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({}, getTokenProps({\n                                        token: token\n                                    })), tokenIndex, false, {\n                                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Fence.jsx\",\n                                        lineNumber: 20,\n                                        columnNumber: 21\n                                    }, _this);\n                                }),\n                                \"\\n\"\n                            ]\n                        }, lineIndex, true, {\n                            fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Fence.jsx\",\n                            lineNumber: 16,\n                            columnNumber: 15\n                        }, _this);\n                    })\n                }, void 0, false, {\n                    fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Fence.jsx\",\n                    lineNumber: 14,\n                    columnNumber: 11\n                }, _this)\n            }, void 0, false, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Fence.jsx\",\n                lineNumber: 13,\n                columnNumber: 9\n            }, _this);\n        }\n    }), void 0, false, {\n        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Fence.jsx\",\n        lineNumber: 6,\n        columnNumber: 5\n    }, this);\n}\n_c = Fence;\nvar _c;\n$RefreshReg$(_c, \"Fence\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9GZW5jZS5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7O0FBQWdDO0FBQzhCO0FBRXZELFNBQVNHLEtBQUssQ0FBQyxLQUFzQixFQUFFO1FBQXRCQyxRQUFRLEdBQVYsS0FBc0IsQ0FBcEJBLFFBQVEsRUFBRUMsUUFBUSxHQUFwQixLQUFzQixDQUFWQSxRQUFROztJQUN4QyxxQkFDRSw4REFBQ0osNERBQVMsMEtBQ0pDLDhEQUFZO1FBQ2hCSSxJQUFJLEVBQUVGLFFBQVEsQ0FBQ0csT0FBTyxFQUFFO1FBQ3hCRixRQUFRLEVBQUVBLFFBQVE7UUFDbEJHLEtBQUssRUFBRUMsU0FBUztrQkFFZjtnQkFBR0MsU0FBUyxTQUFUQSxTQUFTLEVBQUVDLEtBQUssU0FBTEEsS0FBSyxFQUFFQyxNQUFNLFNBQU5BLE1BQU0sRUFBRUMsYUFBYSxTQUFiQSxhQUFhO2lDQUN6Qyw4REFBQ0MsS0FBRztnQkFBQ0osU0FBUyxFQUFFQSxTQUFTO2dCQUFFQyxLQUFLLEVBQUVBLEtBQUs7MEJBQ3JDLDRFQUFDTCxNQUFJOzhCQUNGTSxNQUFNLENBQUNHLEdBQUcsQ0FBQyxTQUFDQyxJQUFJLEVBQUVDLFNBQVM7NkNBQzFCLDhEQUFDakIsMkNBQVE7O2dDQUNOZ0IsSUFBSSxDQUNGRSxNQUFNLENBQUMsU0FBQ0MsS0FBSzsyQ0FBSyxDQUFDQSxLQUFLLENBQUNDLEtBQUs7aUNBQUEsQ0FBQyxDQUMvQkwsR0FBRyxDQUFDLFNBQUNJLEtBQUssRUFBRUUsVUFBVTt5REFDckIsOERBQUNDLE1BQUkscUZBQXNCVCxhQUFhLENBQUM7d0NBQUVNLEtBQUssRUFBTEEsS0FBSztxQ0FBRSxDQUFDLEdBQXhDRSxVQUFVOzs7OzZDQUFrQztpQ0FDeEQsQ0FBQztnQ0FDSCxJQUFJOzsyQkFOUUosU0FBUzs7OztpQ0FPYjtxQkFDWixDQUFDOzs7Ozt5QkFDRzs7Ozs7cUJBQ0g7U0FDUDs7Ozs7WUFDUyxDQUNiO0FBQ0gsQ0FBQztBQTFCZWQsS0FBQUEsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9GZW5jZS5qc3g/ODQ4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEhpZ2hsaWdodCwgeyBkZWZhdWx0UHJvcHMgfSBmcm9tICdwcmlzbS1yZWFjdC1yZW5kZXJlcidcblxuZXhwb3J0IGZ1bmN0aW9uIEZlbmNlKHsgY2hpbGRyZW4sIGxhbmd1YWdlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8SGlnaGxpZ2h0XG4gICAgICB7Li4uZGVmYXVsdFByb3BzfVxuICAgICAgY29kZT17Y2hpbGRyZW4udHJpbUVuZCgpfVxuICAgICAgbGFuZ3VhZ2U9e2xhbmd1YWdlfVxuICAgICAgdGhlbWU9e3VuZGVmaW5lZH1cbiAgICA+XG4gICAgICB7KHsgY2xhc3NOYW1lLCBzdHlsZSwgdG9rZW5zLCBnZXRUb2tlblByb3BzIH0pID0+IChcbiAgICAgICAgPHByZSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gc3R5bGU9e3N0eWxlfT5cbiAgICAgICAgICA8Y29kZT5cbiAgICAgICAgICAgIHt0b2tlbnMubWFwKChsaW5lLCBsaW5lSW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPEZyYWdtZW50IGtleT17bGluZUluZGV4fT5cbiAgICAgICAgICAgICAgICB7bGluZVxuICAgICAgICAgICAgICAgICAgLmZpbHRlcigodG9rZW4pID0+ICF0b2tlbi5lbXB0eSlcbiAgICAgICAgICAgICAgICAgIC5tYXAoKHRva2VuLCB0b2tlbkluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGtleT17dG9rZW5JbmRleH0gey4uLmdldFRva2VuUHJvcHMoeyB0b2tlbiB9KX0gLz5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIHsnXFxuJ31cbiAgICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvY29kZT5cbiAgICAgICAgPC9wcmU+XG4gICAgICApfVxuICAgIDwvSGlnaGxpZ2h0PlxuICApXG59XG4iXSwibmFtZXMiOlsiRnJhZ21lbnQiLCJIaWdobGlnaHQiLCJkZWZhdWx0UHJvcHMiLCJGZW5jZSIsImNoaWxkcmVuIiwibGFuZ3VhZ2UiLCJjb2RlIiwidHJpbUVuZCIsInRoZW1lIiwidW5kZWZpbmVkIiwiY2xhc3NOYW1lIiwic3R5bGUiLCJ0b2tlbnMiLCJnZXRUb2tlblByb3BzIiwicHJlIiwibWFwIiwibGluZSIsImxpbmVJbmRleCIsImZpbHRlciIsInRva2VuIiwiZW1wdHkiLCJ0b2tlbkluZGV4Iiwic3BhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/Fence.jsx\n"));

/***/ }),

/***/ "./src/components/Icon.jsx":
/*!*********************************!*\
  !*** ./src/components/Icon.jsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DarkMode\": function() { return /* binding */ DarkMode; },\n/* harmony export */   \"Gradient\": function() { return /* binding */ Gradient; },\n/* harmony export */   \"Icon\": function() { return /* binding */ Icon; },\n/* harmony export */   \"LightMode\": function() { return /* binding */ LightMode; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var _swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @swc/helpers/src/_object_without_properties.mjs */ \"./node_modules/@swc/helpers/src/_object_without_properties.mjs\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ \"./node_modules/clsx/dist/clsx.m.js\");\n/* harmony import */ var _components_icons_InstallationIcon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/icons/InstallationIcon */ \"./src/components/icons/InstallationIcon.jsx\");\n/* harmony import */ var _components_icons_LightbulbIcon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/icons/LightbulbIcon */ \"./src/components/icons/LightbulbIcon.jsx\");\n/* harmony import */ var _components_icons_PluginsIcon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/icons/PluginsIcon */ \"./src/components/icons/PluginsIcon.jsx\");\n/* harmony import */ var _components_icons_PresetsIcon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/icons/PresetsIcon */ \"./src/components/icons/PresetsIcon.jsx\");\n/* harmony import */ var _components_icons_ThemingIcon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/icons/ThemingIcon */ \"./src/components/icons/ThemingIcon.jsx\");\n/* harmony import */ var _components_icons_WarningIcon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/icons/WarningIcon */ \"./src/components/icons/WarningIcon.jsx\");\n\n\n\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nvar icons = {\n    installation: _components_icons_InstallationIcon__WEBPACK_IMPORTED_MODULE_3__.InstallationIcon,\n    presets: _components_icons_PresetsIcon__WEBPACK_IMPORTED_MODULE_6__.PresetsIcon,\n    plugins: _components_icons_PluginsIcon__WEBPACK_IMPORTED_MODULE_5__.PluginsIcon,\n    theming: _components_icons_ThemingIcon__WEBPACK_IMPORTED_MODULE_7__.ThemingIcon,\n    lightbulb: _components_icons_LightbulbIcon__WEBPACK_IMPORTED_MODULE_4__.LightbulbIcon,\n    warning: _components_icons_WarningIcon__WEBPACK_IMPORTED_MODULE_8__.WarningIcon\n};\nvar iconStyles = {\n    blue: \"[--icon-foreground:theme(colors.slate.900)] [--icon-background:theme(colors.white)]\",\n    amber: \"[--icon-foreground:theme(colors.amber.900)] [--icon-background:theme(colors.amber.100)]\"\n};\nfunction Icon(_param) {\n    var _color = _param.color, color = _color === void 0 ? \"blue\" : _color, icon = _param.icon, className = _param.className, props = (0,_swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(_param, [\n        \"color\",\n        \"icon\",\n        \"className\"\n    ]);\n    _s();\n    var id = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)();\n    var IconComponent = icons[icon];\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_10__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"])({\n        \"aria-hidden\": \"true\",\n        viewBox: \"0 0 32 32\",\n        fill: \"none\",\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(className, iconStyles[color])\n    }, props), {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(IconComponent, {\n            id: id,\n            color: color\n        }, void 0, false, {\n            fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Icon.jsx\",\n            lineNumber: 38,\n            columnNumber: 7\n        }, this)\n    }), void 0, false, {\n        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Icon.jsx\",\n        lineNumber: 31,\n        columnNumber: 5\n    }, this);\n}\n_s(Icon, \"WhsuKpSQZEWeFcB7gWlfDRQktoQ=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useId\n    ];\n});\n_c = Icon;\nvar gradients = {\n    blue: [\n        {\n            stopColor: \"#0EA5E9\"\n        },\n        {\n            stopColor: \"#22D3EE\",\n            offset: \".527\"\n        },\n        {\n            stopColor: \"#818CF8\",\n            offset: 1\n        }, \n    ],\n    amber: [\n        {\n            stopColor: \"#FDE68A\",\n            offset: \".08\"\n        },\n        {\n            stopColor: \"#F59E0B\",\n            offset: \".837\"\n        }, \n    ]\n};\nfunction Gradient(_param) {\n    var _this = this;\n    var _color = _param.color, color = _color === void 0 ? \"blue\" : _color, props = (0,_swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(_param, [\n        \"color\"\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"radialGradient\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_10__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"])({\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientUnits: \"userSpaceOnUse\"\n    }, props), {\n        children: gradients[color].map(function(stop, stopIndex) {\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"stop\", (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"])({}, stop), stopIndex, false, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Icon.jsx\",\n                lineNumber: 65,\n                columnNumber: 9\n            }, _this);\n        })\n    }), void 0, false, {\n        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Icon.jsx\",\n        lineNumber: 57,\n        columnNumber: 5\n    }, this);\n}\n_c1 = Gradient;\nfunction LightMode(_param) {\n    var className = _param.className, props = (0,_swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(_param, [\n        \"className\"\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"])({\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"dark:hidden\", className)\n    }, props), void 0, false, {\n        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Icon.jsx\",\n        lineNumber: 72,\n        columnNumber: 10\n    }, this);\n}\n_c2 = LightMode;\nfunction DarkMode(_param) {\n    var className = _param.className, props = (0,_swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(_param, [\n        \"className\"\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"])({\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"hidden dark:inline\", className)\n    }, props), void 0, false, {\n        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/Icon.jsx\",\n        lineNumber: 76,\n        columnNumber: 10\n    }, this);\n}\n_c3 = DarkMode;\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Icon\");\n$RefreshReg$(_c1, \"Gradient\");\n$RefreshReg$(_c2, \"LightMode\");\n$RefreshReg$(_c3, \"DarkMode\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9JY29uLmpzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7QUFBNkI7QUFDTjtBQUUrQztBQUNOO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFFNUQsSUFBTVEsS0FBSyxHQUFHO0lBQ1pDLFlBQVksRUFBRVAsZ0ZBQWdCO0lBQzlCUSxPQUFPLEVBQUVMLHNFQUFXO0lBQ3BCTSxPQUFPLEVBQUVQLHNFQUFXO0lBQ3BCUSxPQUFPLEVBQUVOLHNFQUFXO0lBQ3BCTyxTQUFTLEVBQUVWLDBFQUFhO0lBQ3hCVyxPQUFPLEVBQUVQLHNFQUFXO0NBQ3JCO0FBRUQsSUFBTVEsVUFBVSxHQUFHO0lBQ2pCQyxJQUFJLEVBQUUscUZBQXFGO0lBQzNGQyxLQUFLLEVBQ0gseUZBQXlGO0NBQzVGO0FBRU0sU0FBU0MsSUFBSSxDQUFDLE1BQTZDLEVBQUU7aUJBQS9DLE1BQTZDLENBQTNDQyxLQUFLLEVBQUxBLEtBQUssdUJBQUcsTUFBTSxXQUFFQyxJQUFJLEdBQXRCLE1BQTZDLENBQTNCQSxJQUFJLEVBQUVDLFNBQVMsR0FBakMsTUFBNkMsQ0FBckJBLFNBQVMsRUFBS0MsS0FBSyw4RkFBM0MsTUFBNkM7UUFBM0NILE9BQUs7UUFBV0MsTUFBSTtRQUFFQyxXQUFTOzs7SUFDcEQsSUFBSUUsRUFBRSxHQUFHdkIsNENBQUssRUFBRTtJQUNoQixJQUFJd0IsYUFBYSxHQUFHaEIsS0FBSyxDQUFDWSxJQUFJLENBQUM7SUFFL0IscUJBQ0UsOERBQUNLLEtBQUc7UUFDRkMsYUFBVyxFQUFDLE1BQU07UUFDbEJDLE9BQU8sRUFBQyxXQUFXO1FBQ25CQyxJQUFJLEVBQUMsTUFBTTtRQUNYUCxTQUFTLEVBQUVwQixnREFBSSxDQUFDb0IsU0FBUyxFQUFFTixVQUFVLENBQUNJLEtBQUssQ0FBQyxDQUFDO09BQ3pDRyxLQUFLO2tCQUVULDRFQUFDRSxhQUFhO1lBQUNELEVBQUUsRUFBRUEsRUFBRTtZQUFFSixLQUFLLEVBQUVBLEtBQUs7Ozs7O2dCQUFJOzs7OztZQUNuQyxDQUNQO0FBQ0gsQ0FBQztHQWZlRCxJQUFJOztRQUNUbEIsd0NBQUs7OztBQURBa0IsS0FBQUEsSUFBSTtBQWlCcEIsSUFBTVcsU0FBUyxHQUFHO0lBQ2hCYixJQUFJLEVBQUU7UUFDSjtZQUFFYyxTQUFTLEVBQUUsU0FBUztTQUFFO1FBQ3hCO1lBQUVBLFNBQVMsRUFBRSxTQUFTO1lBQUVDLE1BQU0sRUFBRSxNQUFNO1NBQUU7UUFDeEM7WUFBRUQsU0FBUyxFQUFFLFNBQVM7WUFBRUMsTUFBTSxFQUFFLENBQUM7U0FBRTtLQUNwQztJQUNEZCxLQUFLLEVBQUU7UUFDTDtZQUFFYSxTQUFTLEVBQUUsU0FBUztZQUFFQyxNQUFNLEVBQUUsS0FBSztTQUFFO1FBQ3ZDO1lBQUVELFNBQVMsRUFBRSxTQUFTO1lBQUVDLE1BQU0sRUFBRSxNQUFNO1NBQUU7S0FDekM7Q0FDRjtBQUVNLFNBQVNDLFFBQVEsQ0FBQyxNQUE0QixFQUFFOztpQkFBOUIsTUFBNEIsQ0FBMUJiLEtBQUssRUFBTEEsS0FBSyx1QkFBRyxNQUFNLFdBQUtHLEtBQUssOEZBQTFCLE1BQTRCO1FBQTFCSCxPQUFLOztJQUM5QixxQkFDRSw4REFBQ2MsZ0JBQWM7UUFDYkMsRUFBRSxFQUFFLENBQUM7UUFDTEMsRUFBRSxFQUFFLENBQUM7UUFDTEMsQ0FBQyxFQUFFLENBQUM7UUFDSkMsYUFBYSxFQUFDLGdCQUFnQjtPQUMxQmYsS0FBSztrQkFFUk8sU0FBUyxDQUFDVixLQUFLLENBQUMsQ0FBQ21CLEdBQUcsQ0FBQyxTQUFDQyxJQUFJLEVBQUVDLFNBQVM7aUNBQ3BDLDhEQUFDRCxNQUFJLHNGQUFxQkEsSUFBSSxHQUFuQkMsU0FBUzs7OztxQkFBYztTQUNuQyxDQUFDOzs7OztZQUNhLENBQ2xCO0FBQ0gsQ0FBQztBQWRlUixNQUFBQSxRQUFRO0FBZ0JqQixTQUFTUyxTQUFTLENBQUMsTUFBdUIsRUFBRTtRQUF2QnBCLFNBQVMsR0FBWCxNQUF1QixDQUFyQkEsU0FBUyxFQUFLQyxLQUFLLDhGQUFyQixNQUF1QjtRQUFyQkQsV0FBUzs7SUFDbkMscUJBQU8sOERBQUNxQixHQUFDO1FBQUNyQixTQUFTLEVBQUVwQixnREFBSSxDQUFDLGFBQWEsRUFBRW9CLFNBQVMsQ0FBQztPQUFNQyxLQUFLOzs7O1lBQUk7QUFDcEUsQ0FBQztBQUZlbUIsTUFBQUEsU0FBUztBQUlsQixTQUFTRSxRQUFRLENBQUMsTUFBdUIsRUFBRTtRQUF2QnRCLFNBQVMsR0FBWCxNQUF1QixDQUFyQkEsU0FBUyxFQUFLQyxLQUFLLDhGQUFyQixNQUF1QjtRQUFyQkQsV0FBUzs7SUFDbEMscUJBQU8sOERBQUNxQixHQUFDO1FBQUNyQixTQUFTLEVBQUVwQixnREFBSSxDQUFDLG9CQUFvQixFQUFFb0IsU0FBUyxDQUFDO09BQU1DLEtBQUs7Ozs7WUFBSTtBQUMzRSxDQUFDO0FBRmVxQixNQUFBQSxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL0ljb24uanN4PzRkMmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlSWQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnXG5cbmltcG9ydCB7IEluc3RhbGxhdGlvbkljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvaWNvbnMvSW5zdGFsbGF0aW9uSWNvbidcbmltcG9ydCB7IExpZ2h0YnVsYkljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvaWNvbnMvTGlnaHRidWxiSWNvbidcbmltcG9ydCB7IFBsdWdpbnNJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL2ljb25zL1BsdWdpbnNJY29uJ1xuaW1wb3J0IHsgUHJlc2V0c0ljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvaWNvbnMvUHJlc2V0c0ljb24nXG5pbXBvcnQgeyBUaGVtaW5nSWNvbiB9IGZyb20gJ0AvY29tcG9uZW50cy9pY29ucy9UaGVtaW5nSWNvbidcbmltcG9ydCB7IFdhcm5pbmdJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL2ljb25zL1dhcm5pbmdJY29uJ1xuXG5jb25zdCBpY29ucyA9IHtcbiAgaW5zdGFsbGF0aW9uOiBJbnN0YWxsYXRpb25JY29uLFxuICBwcmVzZXRzOiBQcmVzZXRzSWNvbixcbiAgcGx1Z2luczogUGx1Z2luc0ljb24sXG4gIHRoZW1pbmc6IFRoZW1pbmdJY29uLFxuICBsaWdodGJ1bGI6IExpZ2h0YnVsYkljb24sXG4gIHdhcm5pbmc6IFdhcm5pbmdJY29uLFxufVxuXG5jb25zdCBpY29uU3R5bGVzID0ge1xuICBibHVlOiAnWy0taWNvbi1mb3JlZ3JvdW5kOnRoZW1lKGNvbG9ycy5zbGF0ZS45MDApXSBbLS1pY29uLWJhY2tncm91bmQ6dGhlbWUoY29sb3JzLndoaXRlKV0nLFxuICBhbWJlcjpcbiAgICAnWy0taWNvbi1mb3JlZ3JvdW5kOnRoZW1lKGNvbG9ycy5hbWJlci45MDApXSBbLS1pY29uLWJhY2tncm91bmQ6dGhlbWUoY29sb3JzLmFtYmVyLjEwMCldJyxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEljb24oeyBjb2xvciA9ICdibHVlJywgaWNvbiwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9KSB7XG4gIGxldCBpZCA9IHVzZUlkKClcbiAgbGV0IEljb25Db21wb25lbnQgPSBpY29uc1tpY29uXVxuXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMzIgMzJcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzTmFtZSwgaWNvblN0eWxlc1tjb2xvcl0pfVxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIDxJY29uQ29tcG9uZW50IGlkPXtpZH0gY29sb3I9e2NvbG9yfSAvPlxuICAgIDwvc3ZnPlxuICApXG59XG5cbmNvbnN0IGdyYWRpZW50cyA9IHtcbiAgYmx1ZTogW1xuICAgIHsgc3RvcENvbG9yOiAnIzBFQTVFOScgfSxcbiAgICB7IHN0b3BDb2xvcjogJyMyMkQzRUUnLCBvZmZzZXQ6ICcuNTI3JyB9LFxuICAgIHsgc3RvcENvbG9yOiAnIzgxOENGOCcsIG9mZnNldDogMSB9LFxuICBdLFxuICBhbWJlcjogW1xuICAgIHsgc3RvcENvbG9yOiAnI0ZERTY4QScsIG9mZnNldDogJy4wOCcgfSxcbiAgICB7IHN0b3BDb2xvcjogJyNGNTlFMEInLCBvZmZzZXQ6ICcuODM3JyB9LFxuICBdLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gR3JhZGllbnQoeyBjb2xvciA9ICdibHVlJywgLi4ucHJvcHMgfSkge1xuICByZXR1cm4gKFxuICAgIDxyYWRpYWxHcmFkaWVudFxuICAgICAgY3g9ezB9XG4gICAgICBjeT17MH1cbiAgICAgIHI9ezF9XG4gICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIHtncmFkaWVudHNbY29sb3JdLm1hcCgoc3RvcCwgc3RvcEluZGV4KSA9PiAoXG4gICAgICAgIDxzdG9wIGtleT17c3RvcEluZGV4fSB7Li4uc3RvcH0gLz5cbiAgICAgICkpfVxuICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExpZ2h0TW9kZSh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSkge1xuICByZXR1cm4gPGcgY2xhc3NOYW1lPXtjbHN4KCdkYXJrOmhpZGRlbicsIGNsYXNzTmFtZSl9IHsuLi5wcm9wc30gLz5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERhcmtNb2RlKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9KSB7XG4gIHJldHVybiA8ZyBjbGFzc05hbWU9e2Nsc3goJ2hpZGRlbiBkYXJrOmlubGluZScsIGNsYXNzTmFtZSl9IHsuLi5wcm9wc30gLz5cbn1cbiJdLCJuYW1lcyI6WyJ1c2VJZCIsImNsc3giLCJJbnN0YWxsYXRpb25JY29uIiwiTGlnaHRidWxiSWNvbiIsIlBsdWdpbnNJY29uIiwiUHJlc2V0c0ljb24iLCJUaGVtaW5nSWNvbiIsIldhcm5pbmdJY29uIiwiaWNvbnMiLCJpbnN0YWxsYXRpb24iLCJwcmVzZXRzIiwicGx1Z2lucyIsInRoZW1pbmciLCJsaWdodGJ1bGIiLCJ3YXJuaW5nIiwiaWNvblN0eWxlcyIsImJsdWUiLCJhbWJlciIsIkljb24iLCJjb2xvciIsImljb24iLCJjbGFzc05hbWUiLCJwcm9wcyIsImlkIiwiSWNvbkNvbXBvbmVudCIsInN2ZyIsImFyaWEtaGlkZGVuIiwidmlld0JveCIsImZpbGwiLCJncmFkaWVudHMiLCJzdG9wQ29sb3IiLCJvZmZzZXQiLCJHcmFkaWVudCIsInJhZGlhbEdyYWRpZW50IiwiY3giLCJjeSIsInIiLCJncmFkaWVudFVuaXRzIiwibWFwIiwic3RvcCIsInN0b3BJbmRleCIsIkxpZ2h0TW9kZSIsImciLCJEYXJrTW9kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/Icon.jsx\n"));

/***/ }),

/***/ "./src/components/QuickLinks.jsx":
/*!***************************************!*\
  !*** ./src/components/QuickLinks.jsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"QuickLink\": function() { return /* binding */ QuickLink; },\n/* harmony export */   \"QuickLinks\": function() { return /* binding */ QuickLinks; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/Icon */ \"./src/components/Icon.jsx\");\n\n\n\nfunction QuickLinks(param) {\n    var children = param.children;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"not-prose my-12 grid grid-cols-1 gap-6 sm:grid-cols-2\",\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n        lineNumber: 7,\n        columnNumber: 5\n    }, this);\n}\n_c = QuickLinks;\nfunction QuickLink(param) {\n    var title = param.title, description = param.description, href = param.href, icon = param.icon;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"group relative rounded-xl border border-slate-200 dark:border-slate-800\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute -inset-px rounded-xl border-2 border-transparent opacity-0 [background:linear-gradient(var(--quick-links-hover-bg,theme(colors.sky.50)),var(--quick-links-hover-bg,theme(colors.sky.50)))_padding-box,linear-gradient(to_top,theme(colors.indigo.400),theme(colors.cyan.400),theme(colors.sky.500))_border-box] group-hover:opacity-100 dark:[--quick-links-hover-bg:theme(colors.slate.800)]\"\n            }, void 0, false, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n                lineNumber: 16,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative overflow-hidden rounded-xl p-6\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_2__.Icon, {\n                        icon: icon,\n                        className: \"h-8 w-8\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n                        lineNumber: 18,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"mt-4 font-display text-base text-slate-900 dark:text-white\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                            href: href,\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"absolute -inset-px rounded-xl\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n                                    lineNumber: 21,\n                                    columnNumber: 13\n                                }, this),\n                                title\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n                            lineNumber: 20,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n                        lineNumber: 19,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"mt-1 text-sm text-slate-700 dark:text-slate-400\",\n                        children: description\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n                        lineNumber: 25,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n                lineNumber: 17,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/QuickLinks.jsx\",\n        lineNumber: 15,\n        columnNumber: 5\n    }, this);\n}\n_c1 = QuickLink;\nvar _c, _c1;\n$RefreshReg$(_c, \"QuickLinks\");\n$RefreshReg$(_c1, \"QuickLink\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9RdWlja0xpbmtzLmpzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBNEI7QUFFWTtBQUVqQyxTQUFTRSxVQUFVLENBQUMsS0FBWSxFQUFFO1FBQWQsUUFBVSxHQUFWLEtBQVksQ0FBVkMsUUFBUTtJQUNuQyxxQkFDRSw4REFBQ0MsS0FBRztRQUFDQyxTQUFTLEVBQUMsdURBQXVEO2tCQUNuRUYsUUFBUTs7Ozs7WUFDTCxDQUNQO0FBQ0gsQ0FBQztBQU5lRCxLQUFBQSxVQUFVO0FBUW5CLFNBQVNJLFNBQVMsQ0FBQyxLQUFrQyxFQUFFO1FBQWxDQyxLQUFLLEdBQVAsS0FBa0MsQ0FBaENBLEtBQUssRUFBRUMsV0FBVyxHQUFwQixLQUFrQyxDQUF6QkEsV0FBVyxFQUFFQyxJQUFJLEdBQTFCLEtBQWtDLENBQVpBLElBQUksRUFBRUMsSUFBSSxHQUFoQyxLQUFrQyxDQUFOQSxJQUFJO0lBQ3hELHFCQUNFLDhEQUFDTixLQUFHO1FBQUNDLFNBQVMsRUFBQyx5RUFBeUU7OzBCQUN0Riw4REFBQ0QsS0FBRztnQkFBQ0MsU0FBUyxFQUFDLHdZQUF3WTs7Ozs7b0JBQUc7MEJBQzFaLDhEQUFDRCxLQUFHO2dCQUFDQyxTQUFTLEVBQUMseUNBQXlDOztrQ0FDdEQsOERBQUNKLGtEQUFJO3dCQUFDUyxJQUFJLEVBQUVBLElBQUk7d0JBQUVMLFNBQVMsRUFBQyxTQUFTOzs7Ozs0QkFBRztrQ0FDeEMsOERBQUNNLElBQUU7d0JBQUNOLFNBQVMsRUFBQyw0REFBNEQ7a0NBQ3hFLDRFQUFDTCxrREFBSTs0QkFBQ1MsSUFBSSxFQUFFQSxJQUFJOzs4Q0FDZCw4REFBQ0csTUFBSTtvQ0FBQ1AsU0FBUyxFQUFDLCtCQUErQjs7Ozs7d0NBQUc7Z0NBQ2pERSxLQUFLOzs7Ozs7Z0NBQ0Q7Ozs7OzRCQUNKO2tDQUNMLDhEQUFDTSxHQUFDO3dCQUFDUixTQUFTLEVBQUMsaURBQWlEO2tDQUMzREcsV0FBVzs7Ozs7NEJBQ1Y7Ozs7OztvQkFDQTs7Ozs7O1lBQ0YsQ0FDUDtBQUNILENBQUM7QUFsQmVGLE1BQUFBLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvUXVpY2tMaW5rcy5qc3g/MWRkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXG5cbmltcG9ydCB7IEljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvSWNvbidcblxuZXhwb3J0IGZ1bmN0aW9uIFF1aWNrTGlua3MoeyBjaGlsZHJlbiB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJub3QtcHJvc2UgbXktMTIgZ3JpZCBncmlkLWNvbHMtMSBnYXAtNiBzbTpncmlkLWNvbHMtMlwiPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBRdWlja0xpbmsoeyB0aXRsZSwgZGVzY3JpcHRpb24sIGhyZWYsIGljb24gfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAgcmVsYXRpdmUgcm91bmRlZC14bCBib3JkZXIgYm9yZGVyLXNsYXRlLTIwMCBkYXJrOmJvcmRlci1zbGF0ZS04MDBcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgLWluc2V0LXB4IHJvdW5kZWQteGwgYm9yZGVyLTIgYm9yZGVyLXRyYW5zcGFyZW50IG9wYWNpdHktMCBbYmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQodmFyKC0tcXVpY2stbGlua3MtaG92ZXItYmcsdGhlbWUoY29sb3JzLnNreS41MCkpLHZhcigtLXF1aWNrLWxpbmtzLWhvdmVyLWJnLHRoZW1lKGNvbG9ycy5za3kuNTApKSlfcGFkZGluZy1ib3gsbGluZWFyLWdyYWRpZW50KHRvX3RvcCx0aGVtZShjb2xvcnMuaW5kaWdvLjQwMCksdGhlbWUoY29sb3JzLmN5YW4uNDAwKSx0aGVtZShjb2xvcnMuc2t5LjUwMCkpX2JvcmRlci1ib3hdIGdyb3VwLWhvdmVyOm9wYWNpdHktMTAwIGRhcms6Wy0tcXVpY2stbGlua3MtaG92ZXItYmc6dGhlbWUoY29sb3JzLnNsYXRlLjgwMCldXCIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQteGwgcC02XCI+XG4gICAgICAgIDxJY29uIGljb249e2ljb259IGNsYXNzTmFtZT1cImgtOCB3LThcIiAvPlxuICAgICAgICA8aDIgY2xhc3NOYW1lPVwibXQtNCBmb250LWRpc3BsYXkgdGV4dC1iYXNlIHRleHQtc2xhdGUtOTAwIGRhcms6dGV4dC13aGl0ZVwiPlxuICAgICAgICAgIDxMaW5rIGhyZWY9e2hyZWZ9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYWJzb2x1dGUgLWluc2V0LXB4IHJvdW5kZWQteGxcIiAvPlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgPC9oMj5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwibXQtMSB0ZXh0LXNtIHRleHQtc2xhdGUtNzAwIGRhcms6dGV4dC1zbGF0ZS00MDBcIj5cbiAgICAgICAgICB7ZGVzY3JpcHRpb259XG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iXSwibmFtZXMiOlsiTGluayIsIkljb24iLCJRdWlja0xpbmtzIiwiY2hpbGRyZW4iLCJkaXYiLCJjbGFzc05hbWUiLCJRdWlja0xpbmsiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiaHJlZiIsImljb24iLCJoMiIsInNwYW4iLCJwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/QuickLinks.jsx\n"));

/***/ }),

/***/ "./src/components/icons/InstallationIcon.jsx":
/*!***************************************************!*\
  !*** ./src/components/icons/InstallationIcon.jsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InstallationIcon\": function() { return /* binding */ InstallationIcon; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/Icon */ \"./src/components/Icon.jsx\");\n\n\nfunction InstallationIcon(param) {\n    var id = param.id, color = param.color;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"defs\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 21 -21 0 12 3)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/InstallationIcon.jsx\",\n                        lineNumber: 7,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient-dark\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 21 -21 0 16 7)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/InstallationIcon.jsx\",\n                        lineNumber: 12,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/InstallationIcon.jsx\",\n                lineNumber: 6,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.LightMode, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                        cx: 12,\n                        cy: 12,\n                        r: 12,\n                        fill: \"url(#\".concat(id, \"-gradient)\")\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/InstallationIcon.jsx\",\n                        lineNumber: 19,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"m8 8 9 21 2-10 10-2L8 8Z\",\n                        fillOpacity: 0.5,\n                        className: \"fill-[var(--icon-background)] stroke-[color:var(--icon-foreground)]\",\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/InstallationIcon.jsx\",\n                        lineNumber: 20,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/InstallationIcon.jsx\",\n                lineNumber: 18,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.DarkMode, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                    d: \"m4 4 10.286 24 2.285-11.429L28 14.286 4 4Z\",\n                    fill: \"url(#\".concat(id, \"-gradient-dark)\"),\n                    stroke: \"url(#\".concat(id, \"-gradient-dark)\"),\n                    strokeWidth: 2,\n                    strokeLinecap: \"round\",\n                    strokeLinejoin: \"round\"\n                }, void 0, false, {\n                    fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/InstallationIcon.jsx\",\n                    lineNumber: 30,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/InstallationIcon.jsx\",\n                lineNumber: 29,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_c = InstallationIcon;\nvar _c;\n$RefreshReg$(_c, \"InstallationIcon\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pY29ucy9JbnN0YWxsYXRpb25JY29uLmpzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFBaUU7QUFFMUQsU0FBU0csZ0JBQWdCLENBQUMsS0FBYSxFQUFFO1FBQWJDLEVBQUUsR0FBSixLQUFhLENBQVhBLEVBQUUsRUFBRUMsS0FBSyxHQUFYLEtBQWEsQ0FBUEEsS0FBSztJQUMxQyxxQkFDRTs7MEJBQ0UsOERBQUNDLE1BQUk7O2tDQUNILDhEQUFDTCxzREFBUTt3QkFDUEcsRUFBRSxFQUFFLEVBQUMsQ0FBSyxNQUFTLENBQVpBLEVBQUUsRUFBQyxXQUFTLENBQUM7d0JBQ3BCQyxLQUFLLEVBQUVBLEtBQUs7d0JBQ1pFLGlCQUFpQixFQUFDLHlCQUF5Qjs7Ozs7NEJBQzNDO2tDQUNGLDhEQUFDTixzREFBUTt3QkFDUEcsRUFBRSxFQUFFLEVBQUMsQ0FBSyxNQUFjLENBQWpCQSxFQUFFLEVBQUMsZ0JBQWMsQ0FBQzt3QkFDekJDLEtBQUssRUFBRUEsS0FBSzt3QkFDWkUsaUJBQWlCLEVBQUMseUJBQXlCOzs7Ozs0QkFDM0M7Ozs7OztvQkFDRzswQkFDUCw4REFBQ0wsdURBQVM7O2tDQUNSLDhEQUFDTSxRQUFNO3dCQUFDQyxFQUFFLEVBQUUsRUFBRTt3QkFBRUMsRUFBRSxFQUFFLEVBQUU7d0JBQUVDLENBQUMsRUFBRSxFQUFFO3dCQUFFQyxJQUFJLEVBQUUsT0FBTSxDQUFLLE1BQVUsQ0FBYlIsRUFBRSxFQUFDLFlBQVUsQ0FBQzs7Ozs7NEJBQUk7a0NBQy9ELDhEQUFDUyxNQUFJO3dCQUNIQyxDQUFDLEVBQUMsMEJBQTBCO3dCQUM1QkMsV0FBVyxFQUFFLEdBQUc7d0JBQ2hCQyxTQUFTLEVBQUMscUVBQXFFO3dCQUMvRUMsV0FBVyxFQUFFLENBQUM7d0JBQ2RDLGFBQWEsRUFBQyxPQUFPO3dCQUNyQkMsY0FBYyxFQUFDLE9BQU87Ozs7OzRCQUN0Qjs7Ozs7O29CQUNROzBCQUNaLDhEQUFDbkIsc0RBQVE7MEJBQ1AsNEVBQUNhLE1BQUk7b0JBQ0hDLENBQUMsRUFBQyw0Q0FBNEM7b0JBQzlDRixJQUFJLEVBQUUsT0FBTSxDQUFLLE1BQWUsQ0FBbEJSLEVBQUUsRUFBQyxpQkFBZSxDQUFDO29CQUNqQ2dCLE1BQU0sRUFBRSxPQUFNLENBQUssTUFBZSxDQUFsQmhCLEVBQUUsRUFBQyxpQkFBZSxDQUFDO29CQUNuQ2EsV0FBVyxFQUFFLENBQUM7b0JBQ2RDLGFBQWEsRUFBQyxPQUFPO29CQUNyQkMsY0FBYyxFQUFDLE9BQU87Ozs7O3dCQUN0Qjs7Ozs7b0JBQ087O29CQUNWLENBQ0o7QUFDSCxDQUFDO0FBdENlaEIsS0FBQUEsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL2ljb25zL0luc3RhbGxhdGlvbkljb24uanN4PzFjOTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGFya01vZGUsIEdyYWRpZW50LCBMaWdodE1vZGUgfSBmcm9tICdAL2NvbXBvbmVudHMvSWNvbidcblxuZXhwb3J0IGZ1bmN0aW9uIEluc3RhbGxhdGlvbkljb24oeyBpZCwgY29sb3IgfSkge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGVmcz5cbiAgICAgICAgPEdyYWRpZW50XG4gICAgICAgICAgaWQ9e2Ake2lkfS1ncmFkaWVudGB9XG4gICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KDAgMjEgLTIxIDAgMTIgMylcIlxuICAgICAgICAvPlxuICAgICAgICA8R3JhZGllbnRcbiAgICAgICAgICBpZD17YCR7aWR9LWdyYWRpZW50LWRhcmtgfVxuICAgICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgwIDIxIC0yMSAwIDE2IDcpXCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGVmcz5cbiAgICAgIDxMaWdodE1vZGU+XG4gICAgICAgIDxjaXJjbGUgY3g9ezEyfSBjeT17MTJ9IHI9ezEyfSBmaWxsPXtgdXJsKCMke2lkfS1ncmFkaWVudClgfSAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJtOCA4IDkgMjEgMi0xMCAxMC0yTDggOFpcIlxuICAgICAgICAgIGZpbGxPcGFjaXR5PXswLjV9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiZmlsbC1bdmFyKC0taWNvbi1iYWNrZ3JvdW5kKV0gc3Ryb2tlLVtjb2xvcjp2YXIoLS1pY29uLWZvcmVncm91bmQpXVwiXG4gICAgICAgICAgc3Ryb2tlV2lkdGg9ezJ9XG4gICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgLz5cbiAgICAgIDwvTGlnaHRNb2RlPlxuICAgICAgPERhcmtNb2RlPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJtNCA0IDEwLjI4NiAyNCAyLjI4NS0xMS40MjlMMjggMTQuMjg2IDQgNFpcIlxuICAgICAgICAgIGZpbGw9e2B1cmwoIyR7aWR9LWdyYWRpZW50LWRhcmspYH1cbiAgICAgICAgICBzdHJva2U9e2B1cmwoIyR7aWR9LWdyYWRpZW50LWRhcmspYH1cbiAgICAgICAgICBzdHJva2VXaWR0aD17Mn1cbiAgICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICAvPlxuICAgICAgPC9EYXJrTW9kZT5cbiAgICA8Lz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkRhcmtNb2RlIiwiR3JhZGllbnQiLCJMaWdodE1vZGUiLCJJbnN0YWxsYXRpb25JY29uIiwiaWQiLCJjb2xvciIsImRlZnMiLCJncmFkaWVudFRyYW5zZm9ybSIsImNpcmNsZSIsImN4IiwiY3kiLCJyIiwiZmlsbCIsInBhdGgiLCJkIiwiZmlsbE9wYWNpdHkiLCJjbGFzc05hbWUiLCJzdHJva2VXaWR0aCIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VMaW5lam9pbiIsInN0cm9rZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/icons/InstallationIcon.jsx\n"));

/***/ }),

/***/ "./src/components/icons/LightbulbIcon.jsx":
/*!************************************************!*\
  !*** ./src/components/icons/LightbulbIcon.jsx ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LightbulbIcon\": function() { return /* binding */ LightbulbIcon; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/Icon */ \"./src/components/Icon.jsx\");\n\n\nfunction LightbulbIcon(param) {\n    var id = param.id, color = param.color;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"defs\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 21 -21 0 20 11)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                        lineNumber: 7,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient-dark\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 24.5001 -19.2498 0 16 5.5)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                        lineNumber: 12,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                lineNumber: 6,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.LightMode, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                        cx: 20,\n                        cy: 20,\n                        r: 12,\n                        fill: \"url(#\".concat(id, \"-gradient)\")\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                        lineNumber: 19,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        fillRule: \"evenodd\",\n                        clipRule: \"evenodd\",\n                        d: \"M20 24.995c0-1.855 1.094-3.501 2.427-4.792C24.61 18.087 26 15.07 26 12.231 26 7.133 21.523 3 16 3S6 7.133 6 12.23c0 2.84 1.389 5.857 3.573 7.973C10.906 21.494 12 23.14 12 24.995V27a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-2.005Z\",\n                        className: \"fill-[var(--icon-background)]\",\n                        fillOpacity: 0.5\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                        lineNumber: 20,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M25 12.23c0 2.536-1.254 5.303-3.269 7.255l1.391 1.436c2.354-2.28 3.878-5.547 3.878-8.69h-2ZM16 4c5.047 0 9 3.759 9 8.23h2C27 6.508 21.998 2 16 2v2Zm-9 8.23C7 7.76 10.953 4 16 4V2C10.002 2 5 6.507 5 12.23h2Zm3.269 7.255C8.254 17.533 7 14.766 7 12.23H5c0 3.143 1.523 6.41 3.877 8.69l1.392-1.436ZM13 27v-2.005h-2V27h2Zm1 1a1 1 0 0 1-1-1h-2a3 3 0 0 0 3 3v-2Zm4 0h-4v2h4v-2Zm1-1a1 1 0 0 1-1 1v2a3 3 0 0 0 3-3h-2Zm0-2.005V27h2v-2.005h-2ZM8.877 20.921C10.132 22.136 11 23.538 11 24.995h2c0-2.253-1.32-4.143-2.731-5.51L8.877 20.92Zm12.854-1.436C20.32 20.852 19 22.742 19 24.995h2c0-1.457.869-2.859 2.122-4.074l-1.391-1.436Z\",\n                        className: \"fill-[var(--icon-foreground)]\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                        lineNumber: 27,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M20 26a1 1 0 1 0 0-2v2Zm-8-2a1 1 0 1 0 0 2v-2Zm2 0h-2v2h2v-2Zm1 1V13.5h-2V25h2Zm-5-11.5v1h2v-1h-2Zm3.5 4.5h5v-2h-5v2Zm8.5-3.5v-1h-2v1h2ZM20 24h-2v2h2v-2Zm-2 0h-4v2h4v-2Zm-1-10.5V25h2V13.5h-2Zm2.5-2.5a2.5 2.5 0 0 0-2.5 2.5h2a.5.5 0 0 1 .5-.5v-2Zm2.5 2.5a2.5 2.5 0 0 0-2.5-2.5v2a.5.5 0 0 1 .5.5h2ZM18.5 18a3.5 3.5 0 0 0 3.5-3.5h-2a1.5 1.5 0 0 1-1.5 1.5v2ZM10 14.5a3.5 3.5 0 0 0 3.5 3.5v-2a1.5 1.5 0 0 1-1.5-1.5h-2Zm2.5-3.5a2.5 2.5 0 0 0-2.5 2.5h2a.5.5 0 0 1 .5-.5v-2Zm2.5 2.5a2.5 2.5 0 0 0-2.5-2.5v2a.5.5 0 0 1 .5.5h2Z\",\n                        className: \"fill-[var(--icon-foreground)]\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                        lineNumber: 31,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                lineNumber: 18,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.DarkMode, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                    fillRule: \"evenodd\",\n                    clipRule: \"evenodd\",\n                    d: \"M16 2C10.002 2 5 6.507 5 12.23c0 3.144 1.523 6.411 3.877 8.691.75.727 1.363 1.52 1.734 2.353.185.415.574.726 1.028.726H12a1 1 0 0 0 1-1v-4.5a.5.5 0 0 0-.5-.5A3.5 3.5 0 0 1 9 14.5V14a3 3 0 1 1 6 0v9a1 1 0 1 0 2 0v-9a3 3 0 1 1 6 0v.5a3.5 3.5 0 0 1-3.5 3.5.5.5 0 0 0-.5.5V23a1 1 0 0 0 1 1h.36c.455 0 .844-.311 1.03-.726.37-.833.982-1.626 1.732-2.353 2.354-2.28 3.878-5.547 3.878-8.69C27 6.507 21.998 2 16 2Zm5 25a1 1 0 0 0-1-1h-8a1 1 0 0 0-1 1 3 3 0 0 0 3 3h4a3 3 0 0 0 3-3Zm-8-13v1.5a.5.5 0 0 1-.5.5 1.5 1.5 0 0 1-1.5-1.5V14a1 1 0 1 1 2 0Zm6.5 2a.5.5 0 0 1-.5-.5V14a1 1 0 1 1 2 0v.5a1.5 1.5 0 0 1-1.5 1.5Z\",\n                    fill: \"url(#\".concat(id, \"-gradient-dark)\")\n                }, void 0, false, {\n                    fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                    lineNumber: 37,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/LightbulbIcon.jsx\",\n                lineNumber: 36,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_c = LightbulbIcon;\nvar _c;\n$RefreshReg$(_c, \"LightbulbIcon\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pY29ucy9MaWdodGJ1bGJJY29uLmpzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFBaUU7QUFFMUQsU0FBU0csYUFBYSxDQUFDLEtBQWEsRUFBRTtRQUFiQyxFQUFFLEdBQUosS0FBYSxDQUFYQSxFQUFFLEVBQUVDLEtBQUssR0FBWCxLQUFhLENBQVBBLEtBQUs7SUFDdkMscUJBQ0U7OzBCQUNFLDhEQUFDQyxNQUFJOztrQ0FDSCw4REFBQ0wsc0RBQVE7d0JBQ1BHLEVBQUUsRUFBRSxFQUFDLENBQUssTUFBUyxDQUFaQSxFQUFFLEVBQUMsV0FBUyxDQUFDO3dCQUNwQkMsS0FBSyxFQUFFQSxLQUFLO3dCQUNaRSxpQkFBaUIsRUFBQywwQkFBMEI7Ozs7OzRCQUM1QztrQ0FDRiw4REFBQ04sc0RBQVE7d0JBQ1BHLEVBQUUsRUFBRSxFQUFDLENBQUssTUFBYyxDQUFqQkEsRUFBRSxFQUFDLGdCQUFjLENBQUM7d0JBQ3pCQyxLQUFLLEVBQUVBLEtBQUs7d0JBQ1pFLGlCQUFpQixFQUFDLHFDQUFxQzs7Ozs7NEJBQ3ZEOzs7Ozs7b0JBQ0c7MEJBQ1AsOERBQUNMLHVEQUFTOztrQ0FDUiw4REFBQ00sUUFBTTt3QkFBQ0MsRUFBRSxFQUFFLEVBQUU7d0JBQUVDLEVBQUUsRUFBRSxFQUFFO3dCQUFFQyxDQUFDLEVBQUUsRUFBRTt3QkFBRUMsSUFBSSxFQUFFLE9BQU0sQ0FBSyxNQUFVLENBQWJSLEVBQUUsRUFBQyxZQUFVLENBQUM7Ozs7OzRCQUFJO2tDQUMvRCw4REFBQ1MsTUFBSTt3QkFDSEMsUUFBUSxFQUFDLFNBQVM7d0JBQ2xCQyxRQUFRLEVBQUMsU0FBUzt3QkFDbEJDLENBQUMsRUFBQyw0TkFBNE47d0JBQzlOQyxTQUFTLEVBQUMsK0JBQStCO3dCQUN6Q0MsV0FBVyxFQUFFLEdBQUc7Ozs7OzRCQUNoQjtrQ0FDRiw4REFBQ0wsTUFBSTt3QkFDSEcsQ0FBQyxFQUFDLHltQkFBeW1CO3dCQUMzbUJDLFNBQVMsRUFBQywrQkFBK0I7Ozs7OzRCQUN6QztrQ0FDRiw4REFBQ0osTUFBSTt3QkFDSEcsQ0FBQyxFQUFDLHNnQkFBc2dCO3dCQUN4Z0JDLFNBQVMsRUFBQywrQkFBK0I7Ozs7OzRCQUN6Qzs7Ozs7O29CQUNROzBCQUNaLDhEQUFDakIsc0RBQVE7MEJBQ1AsNEVBQUNhLE1BQUk7b0JBQ0hDLFFBQVEsRUFBQyxTQUFTO29CQUNsQkMsUUFBUSxFQUFDLFNBQVM7b0JBQ2xCQyxDQUFDLEVBQUMsNmxCQUE2bEI7b0JBQy9sQkosSUFBSSxFQUFFLE9BQU0sQ0FBSyxNQUFlLENBQWxCUixFQUFFLEVBQUMsaUJBQWUsQ0FBQzs7Ozs7d0JBQ2pDOzs7OztvQkFDTzs7b0JBQ1YsQ0FDSjtBQUNILENBQUM7QUEzQ2VELEtBQUFBLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvTGlnaHRidWxiSWNvbi5qc3g/MGNiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXJrTW9kZSwgR3JhZGllbnQsIExpZ2h0TW9kZSB9IGZyb20gJ0AvY29tcG9uZW50cy9JY29uJ1xuXG5leHBvcnQgZnVuY3Rpb24gTGlnaHRidWxiSWNvbih7IGlkLCBjb2xvciB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkZWZzPlxuICAgICAgICA8R3JhZGllbnRcbiAgICAgICAgICBpZD17YCR7aWR9LWdyYWRpZW50YH1cbiAgICAgICAgICBjb2xvcj17Y29sb3J9XG4gICAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09XCJtYXRyaXgoMCAyMSAtMjEgMCAyMCAxMSlcIlxuICAgICAgICAvPlxuICAgICAgICA8R3JhZGllbnRcbiAgICAgICAgICBpZD17YCR7aWR9LWdyYWRpZW50LWRhcmtgfVxuICAgICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgwIDI0LjUwMDEgLTE5LjI0OTggMCAxNiA1LjUpXCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGVmcz5cbiAgICAgIDxMaWdodE1vZGU+XG4gICAgICAgIDxjaXJjbGUgY3g9ezIwfSBjeT17MjB9IHI9ezEyfSBmaWxsPXtgdXJsKCMke2lkfS1ncmFkaWVudClgfSAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICBkPVwiTTIwIDI0Ljk5NWMwLTEuODU1IDEuMDk0LTMuNTAxIDIuNDI3LTQuNzkyQzI0LjYxIDE4LjA4NyAyNiAxNS4wNyAyNiAxMi4yMzEgMjYgNy4xMzMgMjEuNTIzIDMgMTYgM1M2IDcuMTMzIDYgMTIuMjNjMCAyLjg0IDEuMzg5IDUuODU3IDMuNTczIDcuOTczQzEwLjkwNiAyMS40OTQgMTIgMjMuMTQgMTIgMjQuOTk1VjI3YTIgMiAwIDAgMCAyIDJoNGEyIDIgMCAwIDAgMi0ydi0yLjAwNVpcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImZpbGwtW3ZhcigtLWljb24tYmFja2dyb3VuZCldXCJcbiAgICAgICAgICBmaWxsT3BhY2l0eT17MC41fVxuICAgICAgICAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMjUgMTIuMjNjMCAyLjUzNi0xLjI1NCA1LjMwMy0zLjI2OSA3LjI1NWwxLjM5MSAxLjQzNmMyLjM1NC0yLjI4IDMuODc4LTUuNTQ3IDMuODc4LTguNjloLTJaTTE2IDRjNS4wNDcgMCA5IDMuNzU5IDkgOC4yM2gyQzI3IDYuNTA4IDIxLjk5OCAyIDE2IDJ2MlptLTkgOC4yM0M3IDcuNzYgMTAuOTUzIDQgMTYgNFYyQzEwLjAwMiAyIDUgNi41MDcgNSAxMi4yM2gyWm0zLjI2OSA3LjI1NUM4LjI1NCAxNy41MzMgNyAxNC43NjYgNyAxMi4yM0g1YzAgMy4xNDMgMS41MjMgNi40MSAzLjg3NyA4LjY5bDEuMzkyLTEuNDM2Wk0xMyAyN3YtMi4wMDVoLTJWMjdoMlptMSAxYTEgMSAwIDAgMS0xLTFoLTJhMyAzIDAgMCAwIDMgM3YtMlptNCAwaC00djJoNHYtMlptMS0xYTEgMSAwIDAgMS0xIDF2MmEzIDMgMCAwIDAgMy0zaC0yWm0wLTIuMDA1VjI3aDJ2LTIuMDA1aC0yWk04Ljg3NyAyMC45MjFDMTAuMTMyIDIyLjEzNiAxMSAyMy41MzggMTEgMjQuOTk1aDJjMC0yLjI1My0xLjMyLTQuMTQzLTIuNzMxLTUuNTFMOC44NzcgMjAuOTJabTEyLjg1NC0xLjQzNkMyMC4zMiAyMC44NTIgMTkgMjIuNzQyIDE5IDI0Ljk5NWgyYzAtMS40NTcuODY5LTIuODU5IDIuMTIyLTQuMDc0bC0xLjM5MS0xLjQzNlpcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImZpbGwtW3ZhcigtLWljb24tZm9yZWdyb3VuZCldXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTIwIDI2YTEgMSAwIDEgMCAwLTJ2MlptLTgtMmExIDEgMCAxIDAgMCAydi0yWm0yIDBoLTJ2Mmgydi0yWm0xIDFWMTMuNWgtMlYyNWgyWm0tNS0xMS41djFoMnYtMWgtMlptMy41IDQuNWg1di0yaC01djJabTguNS0zLjV2LTFoLTJ2MWgyWk0yMCAyNGgtMnYyaDJ2LTJabS0yIDBoLTR2Mmg0di0yWm0tMS0xMC41VjI1aDJWMTMuNWgtMlptMi41LTIuNWEyLjUgMi41IDAgMCAwLTIuNSAyLjVoMmEuNS41IDAgMCAxIC41LS41di0yWm0yLjUgMi41YTIuNSAyLjUgMCAwIDAtMi41LTIuNXYyYS41LjUgMCAwIDEgLjUuNWgyWk0xOC41IDE4YTMuNSAzLjUgMCAwIDAgMy41LTMuNWgtMmExLjUgMS41IDAgMCAxLTEuNSAxLjV2MlpNMTAgMTQuNWEzLjUgMy41IDAgMCAwIDMuNSAzLjV2LTJhMS41IDEuNSAwIDAgMS0xLjUtMS41aC0yWm0yLjUtMy41YTIuNSAyLjUgMCAwIDAtMi41IDIuNWgyYS41LjUgMCAwIDEgLjUtLjV2LTJabTIuNSAyLjVhMi41IDIuNSAwIDAgMC0yLjUtMi41djJhLjUuNSAwIDAgMSAuNS41aDJaXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJmaWxsLVt2YXIoLS1pY29uLWZvcmVncm91bmQpXVwiXG4gICAgICAgIC8+XG4gICAgICA8L0xpZ2h0TW9kZT5cbiAgICAgIDxEYXJrTW9kZT5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgIGNsaXBSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgZD1cIk0xNiAyQzEwLjAwMiAyIDUgNi41MDcgNSAxMi4yM2MwIDMuMTQ0IDEuNTIzIDYuNDExIDMuODc3IDguNjkxLjc1LjcyNyAxLjM2MyAxLjUyIDEuNzM0IDIuMzUzLjE4NS40MTUuNTc0LjcyNiAxLjAyOC43MjZIMTJhMSAxIDAgMCAwIDEtMXYtNC41YS41LjUgMCAwIDAtLjUtLjVBMy41IDMuNSAwIDAgMSA5IDE0LjVWMTRhMyAzIDAgMSAxIDYgMHY5YTEgMSAwIDEgMCAyIDB2LTlhMyAzIDAgMSAxIDYgMHYuNWEzLjUgMy41IDAgMCAxLTMuNSAzLjUuNS41IDAgMCAwLS41LjVWMjNhMSAxIDAgMCAwIDEgMWguMzZjLjQ1NSAwIC44NDQtLjMxMSAxLjAzLS43MjYuMzctLjgzMy45ODItMS42MjYgMS43MzItMi4zNTMgMi4zNTQtMi4yOCAzLjg3OC01LjU0NyAzLjg3OC04LjY5QzI3IDYuNTA3IDIxLjk5OCAyIDE2IDJabTUgMjVhMSAxIDAgMCAwLTEtMWgtOGExIDEgMCAwIDAtMSAxIDMgMyAwIDAgMCAzIDNoNGEzIDMgMCAwIDAgMy0zWm0tOC0xM3YxLjVhLjUuNSAwIDAgMS0uNS41IDEuNSAxLjUgMCAwIDEtMS41LTEuNVYxNGExIDEgMCAxIDEgMiAwWm02LjUgMmEuNS41IDAgMCAxLS41LS41VjE0YTEgMSAwIDEgMSAyIDB2LjVhMS41IDEuNSAwIDAgMS0xLjUgMS41WlwiXG4gICAgICAgICAgZmlsbD17YHVybCgjJHtpZH0tZ3JhZGllbnQtZGFyaylgfVxuICAgICAgICAvPlxuICAgICAgPC9EYXJrTW9kZT5cbiAgICA8Lz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkRhcmtNb2RlIiwiR3JhZGllbnQiLCJMaWdodE1vZGUiLCJMaWdodGJ1bGJJY29uIiwiaWQiLCJjb2xvciIsImRlZnMiLCJncmFkaWVudFRyYW5zZm9ybSIsImNpcmNsZSIsImN4IiwiY3kiLCJyIiwiZmlsbCIsInBhdGgiLCJmaWxsUnVsZSIsImNsaXBSdWxlIiwiZCIsImNsYXNzTmFtZSIsImZpbGxPcGFjaXR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/icons/LightbulbIcon.jsx\n"));

/***/ }),

/***/ "./src/components/icons/PluginsIcon.jsx":
/*!**********************************************!*\
  !*** ./src/components/icons/PluginsIcon.jsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PluginsIcon\": function() { return /* binding */ PluginsIcon; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/Icon */ \"./src/components/Icon.jsx\");\n\n\nfunction PluginsIcon(param) {\n    var id = param.id, color = param.color;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"defs\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 21 -21 0 20 11)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 7,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient-dark-1\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 22.75 -22.75 0 16 6.25)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 12,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient-dark-2\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 14 -14 0 16 10)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 17,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                lineNumber: 6,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.LightMode, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                        cx: 20,\n                        cy: 20,\n                        r: 12,\n                        fill: \"url(#\".concat(id, \"-gradient)\")\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 24,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                        fillOpacity: 0.5,\n                        className: \"fill-[var(--icon-background)] stroke-[color:var(--icon-foreground)]\",\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M3 9v14l12 6V15L3 9Z\"\n                            }, void 0, false, {\n                                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                                lineNumber: 32,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M27 9v14l-12 6V15l12-6Z\"\n                            }, void 0, false, {\n                                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                                lineNumber: 33,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 25,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M11 4h8v2l6 3-10 6L5 9l6-3V4Z\",\n                        fillOpacity: 0.5,\n                        className: \"fill-[var(--icon-background)]\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 35,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                        className: \"stroke-[color:var(--icon-foreground)]\",\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M20 5.5 27 9l-12 6L3 9l7-3.5\"\n                            }, void 0, false, {\n                                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                                lineNumber: 46,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M20 5c0 1.105-2.239 2-5 2s-5-.895-5-2m10 0c0-1.105-2.239-2-5-2s-5 .895-5 2m10 0v3c0 1.105-2.239 2-5 2s-5-.895-5-2V5\"\n                            }, void 0, false, {\n                                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                                lineNumber: 47,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 40,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                lineNumber: 23,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.DarkMode, {\n                strokeWidth: 2,\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M17.676 3.38a3.887 3.887 0 0 0-3.352 0l-9 4.288C3.907 8.342 3 9.806 3 11.416v9.168c0 1.61.907 3.073 2.324 3.748l9 4.288a3.887 3.887 0 0 0 3.352 0l9-4.288C28.093 23.657 29 22.194 29 20.584v-9.168c0-1.61-.907-3.074-2.324-3.748l-9-4.288Z\",\n                        stroke: \"url(#\".concat(id, \"-gradient-dark-1)\")\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 51,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M16.406 8.087a.989.989 0 0 0-.812 0l-7 3.598A1.012 1.012 0 0 0 8 12.61v6.78c0 .4.233.762.594.925l7 3.598a.989.989 0 0 0 .812 0l7-3.598c.361-.163.594-.525.594-.925v-6.78c0-.4-.233-.762-.594-.925l-7-3.598Z\",\n                        fill: \"url(#\".concat(id, \"-gradient-dark-2)\"),\n                        stroke: \"url(#\".concat(id, \"-gradient-dark-2)\")\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                        lineNumber: 55,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PluginsIcon.jsx\",\n                lineNumber: 50,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_c = PluginsIcon;\nvar _c;\n$RefreshReg$(_c, \"PluginsIcon\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pY29ucy9QbHVnaW5zSWNvbi5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQWlFO0FBRTFELFNBQVNHLFdBQVcsQ0FBQyxLQUFhLEVBQUU7UUFBYkMsRUFBRSxHQUFKLEtBQWEsQ0FBWEEsRUFBRSxFQUFFQyxLQUFLLEdBQVgsS0FBYSxDQUFQQSxLQUFLO0lBQ3JDLHFCQUNFOzswQkFDRSw4REFBQ0MsTUFBSTs7a0NBQ0gsOERBQUNMLHNEQUFRO3dCQUNQRyxFQUFFLEVBQUUsRUFBQyxDQUFLLE1BQVMsQ0FBWkEsRUFBRSxFQUFDLFdBQVMsQ0FBQzt3QkFDcEJDLEtBQUssRUFBRUEsS0FBSzt3QkFDWkUsaUJBQWlCLEVBQUMsMEJBQTBCOzs7Ozs0QkFDNUM7a0NBQ0YsOERBQUNOLHNEQUFRO3dCQUNQRyxFQUFFLEVBQUUsRUFBQyxDQUFLLE1BQWdCLENBQW5CQSxFQUFFLEVBQUMsa0JBQWdCLENBQUM7d0JBQzNCQyxLQUFLLEVBQUVBLEtBQUs7d0JBQ1pFLGlCQUFpQixFQUFDLGtDQUFrQzs7Ozs7NEJBQ3BEO2tDQUNGLDhEQUFDTixzREFBUTt3QkFDUEcsRUFBRSxFQUFFLEVBQUMsQ0FBSyxNQUFnQixDQUFuQkEsRUFBRSxFQUFDLGtCQUFnQixDQUFDO3dCQUMzQkMsS0FBSyxFQUFFQSxLQUFLO3dCQUNaRSxpQkFBaUIsRUFBQywwQkFBMEI7Ozs7OzRCQUM1Qzs7Ozs7O29CQUNHOzBCQUNQLDhEQUFDTCx1REFBUzs7a0NBQ1IsOERBQUNNLFFBQU07d0JBQUNDLEVBQUUsRUFBRSxFQUFFO3dCQUFFQyxFQUFFLEVBQUUsRUFBRTt3QkFBRUMsQ0FBQyxFQUFFLEVBQUU7d0JBQUVDLElBQUksRUFBRSxPQUFNLENBQUssTUFBVSxDQUFiUixFQUFFLEVBQUMsWUFBVSxDQUFDOzs7Ozs0QkFBSTtrQ0FDL0QsOERBQUNTLEdBQUM7d0JBQ0FDLFdBQVcsRUFBRSxHQUFHO3dCQUNoQkMsU0FBUyxFQUFDLHFFQUFxRTt3QkFDL0VDLFdBQVcsRUFBRSxDQUFDO3dCQUNkQyxhQUFhLEVBQUMsT0FBTzt3QkFDckJDLGNBQWMsRUFBQyxPQUFPOzswQ0FFdEIsOERBQUNDLE1BQUk7Z0NBQUNDLENBQUMsRUFBQyxzQkFBc0I7Ozs7O29DQUFHOzBDQUNqQyw4REFBQ0QsTUFBSTtnQ0FBQ0MsQ0FBQyxFQUFDLHlCQUF5Qjs7Ozs7b0NBQUc7Ozs7Ozs0QkFDbEM7a0NBQ0osOERBQUNELE1BQUk7d0JBQ0hDLENBQUMsRUFBQywrQkFBK0I7d0JBQ2pDTixXQUFXLEVBQUUsR0FBRzt3QkFDaEJDLFNBQVMsRUFBQywrQkFBK0I7Ozs7OzRCQUN6QztrQ0FDRiw4REFBQ0YsR0FBQzt3QkFDQUUsU0FBUyxFQUFDLHVDQUF1Qzt3QkFDakRDLFdBQVcsRUFBRSxDQUFDO3dCQUNkQyxhQUFhLEVBQUMsT0FBTzt3QkFDckJDLGNBQWMsRUFBQyxPQUFPOzswQ0FFdEIsOERBQUNDLE1BQUk7Z0NBQUNDLENBQUMsRUFBQyw4QkFBOEI7Ozs7O29DQUFHOzBDQUN6Qyw4REFBQ0QsTUFBSTtnQ0FBQ0MsQ0FBQyxFQUFDLHFIQUFxSDs7Ozs7b0NBQUc7Ozs7Ozs0QkFDOUg7Ozs7OztvQkFDTTswQkFDWiw4REFBQ3BCLHNEQUFRO2dCQUFDZ0IsV0FBVyxFQUFFLENBQUM7Z0JBQUVDLGFBQWEsRUFBQyxPQUFPO2dCQUFDQyxjQUFjLEVBQUMsT0FBTzs7a0NBQ3BFLDhEQUFDQyxNQUFJO3dCQUNIQyxDQUFDLEVBQUMsNE9BQTRPO3dCQUM5T0MsTUFBTSxFQUFFLE9BQU0sQ0FBSyxNQUFpQixDQUFwQmpCLEVBQUUsRUFBQyxtQkFBaUIsQ0FBQzs7Ozs7NEJBQ3JDO2tDQUNGLDhEQUFDZSxNQUFJO3dCQUNIQyxDQUFDLEVBQUMsNk1BQTZNO3dCQUMvTVIsSUFBSSxFQUFFLE9BQU0sQ0FBSyxNQUFpQixDQUFwQlIsRUFBRSxFQUFDLG1CQUFpQixDQUFDO3dCQUNuQ2lCLE1BQU0sRUFBRSxPQUFNLENBQUssTUFBaUIsQ0FBcEJqQixFQUFFLEVBQUMsbUJBQWlCLENBQUM7Ozs7OzRCQUNyQzs7Ozs7O29CQUNPOztvQkFDVixDQUNKO0FBQ0gsQ0FBQztBQTVEZUQsS0FBQUEsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9pY29ucy9QbHVnaW5zSWNvbi5qc3g/YTVmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXJrTW9kZSwgR3JhZGllbnQsIExpZ2h0TW9kZSB9IGZyb20gJ0AvY29tcG9uZW50cy9JY29uJ1xuXG5leHBvcnQgZnVuY3Rpb24gUGx1Z2luc0ljb24oeyBpZCwgY29sb3IgfSkge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGVmcz5cbiAgICAgICAgPEdyYWRpZW50XG4gICAgICAgICAgaWQ9e2Ake2lkfS1ncmFkaWVudGB9XG4gICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KDAgMjEgLTIxIDAgMjAgMTEpXCJcbiAgICAgICAgLz5cbiAgICAgICAgPEdyYWRpZW50XG4gICAgICAgICAgaWQ9e2Ake2lkfS1ncmFkaWVudC1kYXJrLTFgfVxuICAgICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgwIDIyLjc1IC0yMi43NSAwIDE2IDYuMjUpXCJcbiAgICAgICAgLz5cbiAgICAgICAgPEdyYWRpZW50XG4gICAgICAgICAgaWQ9e2Ake2lkfS1ncmFkaWVudC1kYXJrLTJgfVxuICAgICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgwIDE0IC0xNCAwIDE2IDEwKVwiXG4gICAgICAgIC8+XG4gICAgICA8L2RlZnM+XG4gICAgICA8TGlnaHRNb2RlPlxuICAgICAgICA8Y2lyY2xlIGN4PXsyMH0gY3k9ezIwfSByPXsxMn0gZmlsbD17YHVybCgjJHtpZH0tZ3JhZGllbnQpYH0gLz5cbiAgICAgICAgPGdcbiAgICAgICAgICBmaWxsT3BhY2l0eT17MC41fVxuICAgICAgICAgIGNsYXNzTmFtZT1cImZpbGwtW3ZhcigtLWljb24tYmFja2dyb3VuZCldIHN0cm9rZS1bY29sb3I6dmFyKC0taWNvbi1mb3JlZ3JvdW5kKV1cIlxuICAgICAgICAgIHN0cm9rZVdpZHRoPXsyfVxuICAgICAgICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgID5cbiAgICAgICAgICA8cGF0aCBkPVwiTTMgOXYxNGwxMiA2VjE1TDMgOVpcIiAvPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMjcgOXYxNGwtMTIgNlYxNWwxMi02WlwiIC8+XG4gICAgICAgIDwvZz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTExIDRoOHYybDYgMy0xMCA2TDUgOWw2LTNWNFpcIlxuICAgICAgICAgIGZpbGxPcGFjaXR5PXswLjV9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiZmlsbC1bdmFyKC0taWNvbi1iYWNrZ3JvdW5kKV1cIlxuICAgICAgICAvPlxuICAgICAgICA8Z1xuICAgICAgICAgIGNsYXNzTmFtZT1cInN0cm9rZS1bY29sb3I6dmFyKC0taWNvbi1mb3JlZ3JvdW5kKV1cIlxuICAgICAgICAgIHN0cm9rZVdpZHRoPXsyfVxuICAgICAgICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgID5cbiAgICAgICAgICA8cGF0aCBkPVwiTTIwIDUuNSAyNyA5bC0xMiA2TDMgOWw3LTMuNVwiIC8+XG4gICAgICAgICAgPHBhdGggZD1cIk0yMCA1YzAgMS4xMDUtMi4yMzkgMi01IDJzLTUtLjg5NS01LTJtMTAgMGMwLTEuMTA1LTIuMjM5LTItNS0ycy01IC44OTUtNSAybTEwIDB2M2MwIDEuMTA1LTIuMjM5IDItNSAycy01LS44OTUtNS0yVjVcIiAvPlxuICAgICAgICA8L2c+XG4gICAgICA8L0xpZ2h0TW9kZT5cbiAgICAgIDxEYXJrTW9kZSBzdHJva2VXaWR0aD17Mn0gc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMTcuNjc2IDMuMzhhMy44ODcgMy44ODcgMCAwIDAtMy4zNTIgMGwtOSA0LjI4OEMzLjkwNyA4LjM0MiAzIDkuODA2IDMgMTEuNDE2djkuMTY4YzAgMS42MS45MDcgMy4wNzMgMi4zMjQgMy43NDhsOSA0LjI4OGEzLjg4NyAzLjg4NyAwIDAgMCAzLjM1MiAwbDktNC4yODhDMjguMDkzIDIzLjY1NyAyOSAyMi4xOTQgMjkgMjAuNTg0di05LjE2OGMwLTEuNjEtLjkwNy0zLjA3NC0yLjMyNC0zLjc0OGwtOS00LjI4OFpcIlxuICAgICAgICAgIHN0cm9rZT17YHVybCgjJHtpZH0tZ3JhZGllbnQtZGFyay0xKWB9XG4gICAgICAgIC8+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgZD1cIk0xNi40MDYgOC4wODdhLjk4OS45ODkgMCAwIDAtLjgxMiAwbC03IDMuNTk4QTEuMDEyIDEuMDEyIDAgMCAwIDggMTIuNjF2Ni43OGMwIC40LjIzMy43NjIuNTk0LjkyNWw3IDMuNTk4YS45ODkuOTg5IDAgMCAwIC44MTIgMGw3LTMuNTk4Yy4zNjEtLjE2My41OTQtLjUyNS41OTQtLjkyNXYtNi43OGMwLS40LS4yMzMtLjc2Mi0uNTk0LS45MjVsLTctMy41OThaXCJcbiAgICAgICAgICBmaWxsPXtgdXJsKCMke2lkfS1ncmFkaWVudC1kYXJrLTIpYH1cbiAgICAgICAgICBzdHJva2U9e2B1cmwoIyR7aWR9LWdyYWRpZW50LWRhcmstMilgfVxuICAgICAgICAvPlxuICAgICAgPC9EYXJrTW9kZT5cbiAgICA8Lz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkRhcmtNb2RlIiwiR3JhZGllbnQiLCJMaWdodE1vZGUiLCJQbHVnaW5zSWNvbiIsImlkIiwiY29sb3IiLCJkZWZzIiwiZ3JhZGllbnRUcmFuc2Zvcm0iLCJjaXJjbGUiLCJjeCIsImN5IiwiciIsImZpbGwiLCJnIiwiZmlsbE9wYWNpdHkiLCJjbGFzc05hbWUiLCJzdHJva2VXaWR0aCIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VMaW5lam9pbiIsInBhdGgiLCJkIiwic3Ryb2tlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/icons/PluginsIcon.jsx\n"));

/***/ }),

/***/ "./src/components/icons/PresetsIcon.jsx":
/*!**********************************************!*\
  !*** ./src/components/icons/PresetsIcon.jsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PresetsIcon\": function() { return /* binding */ PresetsIcon; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/Icon */ \"./src/components/Icon.jsx\");\n\n\nfunction PresetsIcon(param) {\n    var id = param.id, color = param.color;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"defs\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 21 -21 0 20 3)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                        lineNumber: 7,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient-dark\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 22.75 -22.75 0 16 6.25)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                        lineNumber: 12,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                lineNumber: 6,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.LightMode, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                        cx: 20,\n                        cy: 12,\n                        r: 12,\n                        fill: \"url(#\".concat(id, \"-gradient)\")\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                        lineNumber: 19,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                        className: \"fill-[var(--icon-background)] stroke-[color:var(--icon-foreground)]\",\n                        fillOpacity: 0.5,\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M3 5v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2Z\"\n                            }, void 0, false, {\n                                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                                lineNumber: 27,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M18 17v10a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V17a2 2 0 0 0-2-2h-7a2 2 0 0 0-2 2Z\"\n                            }, void 0, false, {\n                                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                                lineNumber: 28,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M18 5v4a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-7a2 2 0 0 0-2 2Z\"\n                            }, void 0, false, {\n                                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                                lineNumber: 29,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M3 25v2a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2Z\"\n                            }, void 0, false, {\n                                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                                lineNumber: 30,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                        lineNumber: 20,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                lineNumber: 18,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.DarkMode, {\n                fill: \"url(#\".concat(id, \"-gradient-dark)\"),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        fillRule: \"evenodd\",\n                        clipRule: \"evenodd\",\n                        d: \"M3 17V4a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Zm16 10v-9a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2Zm0-23v5a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-8a1 1 0 0 0-1 1ZM3 28v-3a1 1 0 0 1 1-1h9a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1Z\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                        lineNumber: 34,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M2 4v13h2V4H2Zm2-2a2 2 0 0 0-2 2h2V2Zm8 0H4v2h8V2Zm2 2a2 2 0 0 0-2-2v2h2Zm0 13V4h-2v13h2Zm-2 2a2 2 0 0 0 2-2h-2v2Zm-8 0h8v-2H4v2Zm-2-2a2 2 0 0 0 2 2v-2H2Zm16 1v9h2v-9h-2Zm3-3a3 3 0 0 0-3 3h2a1 1 0 0 1 1-1v-2Zm6 0h-6v2h6v-2Zm3 3a3 3 0 0 0-3-3v2a1 1 0 0 1 1 1h2Zm0 9v-9h-2v9h2Zm-3 3a3 3 0 0 0 3-3h-2a1 1 0 0 1-1 1v2Zm-6 0h6v-2h-6v2Zm-3-3a3 3 0 0 0 3 3v-2a1 1 0 0 1-1-1h-2Zm2-18V4h-2v5h2Zm0 0h-2a2 2 0 0 0 2 2V9Zm8 0h-8v2h8V9Zm0 0v2a2 2 0 0 0 2-2h-2Zm0-5v5h2V4h-2Zm0 0h2a2 2 0 0 0-2-2v2Zm-8 0h8V2h-8v2Zm0 0V2a2 2 0 0 0-2 2h2ZM2 25v3h2v-3H2Zm2-2a2 2 0 0 0-2 2h2v-2Zm9 0H4v2h9v-2Zm2 2a2 2 0 0 0-2-2v2h2Zm0 3v-3h-2v3h2Zm-2 2a2 2 0 0 0 2-2h-2v2Zm-9 0h9v-2H4v2Zm-2-2a2 2 0 0 0 2 2v-2H2Z\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                        lineNumber: 39,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/PresetsIcon.jsx\",\n                lineNumber: 33,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_c = PresetsIcon;\nvar _c;\n$RefreshReg$(_c, \"PresetsIcon\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pY29ucy9QcmVzZXRzSWNvbi5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQWlFO0FBRTFELFNBQVNHLFdBQVcsQ0FBQyxLQUFhLEVBQUU7UUFBYkMsRUFBRSxHQUFKLEtBQWEsQ0FBWEEsRUFBRSxFQUFFQyxLQUFLLEdBQVgsS0FBYSxDQUFQQSxLQUFLO0lBQ3JDLHFCQUNFOzswQkFDRSw4REFBQ0MsTUFBSTs7a0NBQ0gsOERBQUNMLHNEQUFRO3dCQUNQRyxFQUFFLEVBQUUsRUFBQyxDQUFLLE1BQVMsQ0FBWkEsRUFBRSxFQUFDLFdBQVMsQ0FBQzt3QkFDcEJDLEtBQUssRUFBRUEsS0FBSzt3QkFDWkUsaUJBQWlCLEVBQUMseUJBQXlCOzs7Ozs0QkFDM0M7a0NBQ0YsOERBQUNOLHNEQUFRO3dCQUNQRyxFQUFFLEVBQUUsRUFBQyxDQUFLLE1BQWMsQ0FBakJBLEVBQUUsRUFBQyxnQkFBYyxDQUFDO3dCQUN6QkMsS0FBSyxFQUFFQSxLQUFLO3dCQUNaRSxpQkFBaUIsRUFBQyxrQ0FBa0M7Ozs7OzRCQUNwRDs7Ozs7O29CQUNHOzBCQUNQLDhEQUFDTCx1REFBUzs7a0NBQ1IsOERBQUNNLFFBQU07d0JBQUNDLEVBQUUsRUFBRSxFQUFFO3dCQUFFQyxFQUFFLEVBQUUsRUFBRTt3QkFBRUMsQ0FBQyxFQUFFLEVBQUU7d0JBQUVDLElBQUksRUFBRSxPQUFNLENBQUssTUFBVSxDQUFiUixFQUFFLEVBQUMsWUFBVSxDQUFDOzs7Ozs0QkFBSTtrQ0FDL0QsOERBQUNTLEdBQUM7d0JBQ0FDLFNBQVMsRUFBQyxxRUFBcUU7d0JBQy9FQyxXQUFXLEVBQUUsR0FBRzt3QkFDaEJDLFdBQVcsRUFBRSxDQUFDO3dCQUNkQyxhQUFhLEVBQUMsT0FBTzt3QkFDckJDLGNBQWMsRUFBQyxPQUFPOzswQ0FFdEIsOERBQUNDLE1BQUk7Z0NBQUNDLENBQUMsRUFBQyx3RUFBd0U7Ozs7O29DQUFHOzBDQUNuRiw4REFBQ0QsTUFBSTtnQ0FBQ0MsQ0FBQyxFQUFDLDRFQUE0RTs7Ozs7b0NBQUc7MENBQ3ZGLDhEQUFDRCxNQUFJO2dDQUFDQyxDQUFDLEVBQUMseUVBQXlFOzs7OztvQ0FBRzswQ0FDcEYsOERBQUNELE1BQUk7Z0NBQUNDLENBQUMsRUFBQyx5RUFBeUU7Ozs7O29DQUFHOzs7Ozs7NEJBQ2xGOzs7Ozs7b0JBQ007MEJBQ1osOERBQUNwQixzREFBUTtnQkFBQ1ksSUFBSSxFQUFFLE9BQU0sQ0FBSyxNQUFlLENBQWxCUixFQUFFLEVBQUMsaUJBQWUsQ0FBQzs7a0NBQ3pDLDhEQUFDZSxNQUFJO3dCQUNIRSxRQUFRLEVBQUMsU0FBUzt3QkFDbEJDLFFBQVEsRUFBQyxTQUFTO3dCQUNsQkYsQ0FBQyxFQUFDLGdTQUFnUzs7Ozs7NEJBQ2xTO2tDQUNGLDhEQUFDRCxNQUFJO3dCQUFDQyxDQUFDLEVBQUMsd3FCQUF3cUI7Ozs7OzRCQUFHOzs7Ozs7b0JBQzFxQjs7b0JBQ1YsQ0FDSjtBQUNILENBQUM7QUF4Q2VqQixLQUFBQSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL2ljb25zL1ByZXNldHNJY29uLmpzeD9mZTA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhcmtNb2RlLCBHcmFkaWVudCwgTGlnaHRNb2RlIH0gZnJvbSAnQC9jb21wb25lbnRzL0ljb24nXG5cbmV4cG9ydCBmdW5jdGlvbiBQcmVzZXRzSWNvbih7IGlkLCBjb2xvciB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkZWZzPlxuICAgICAgICA8R3JhZGllbnRcbiAgICAgICAgICBpZD17YCR7aWR9LWdyYWRpZW50YH1cbiAgICAgICAgICBjb2xvcj17Y29sb3J9XG4gICAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09XCJtYXRyaXgoMCAyMSAtMjEgMCAyMCAzKVwiXG4gICAgICAgIC8+XG4gICAgICAgIDxHcmFkaWVudFxuICAgICAgICAgIGlkPXtgJHtpZH0tZ3JhZGllbnQtZGFya2B9XG4gICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KDAgMjIuNzUgLTIyLjc1IDAgMTYgNi4yNSlcIlxuICAgICAgICAvPlxuICAgICAgPC9kZWZzPlxuICAgICAgPExpZ2h0TW9kZT5cbiAgICAgICAgPGNpcmNsZSBjeD17MjB9IGN5PXsxMn0gcj17MTJ9IGZpbGw9e2B1cmwoIyR7aWR9LWdyYWRpZW50KWB9IC8+XG4gICAgICAgIDxnXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZmlsbC1bdmFyKC0taWNvbi1iYWNrZ3JvdW5kKV0gc3Ryb2tlLVtjb2xvcjp2YXIoLS1pY29uLWZvcmVncm91bmQpXVwiXG4gICAgICAgICAgZmlsbE9wYWNpdHk9ezAuNX1cbiAgICAgICAgICBzdHJva2VXaWR0aD17Mn1cbiAgICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICA+XG4gICAgICAgICAgPHBhdGggZD1cIk0zIDV2MTJhMiAyIDAgMCAwIDIgMmg3YTIgMiAwIDAgMCAyLTJWNWEyIDIgMCAwIDAtMi0ySDVhMiAyIDAgMCAwLTIgMlpcIiAvPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMTggMTd2MTBhMiAyIDAgMCAwIDIgMmg3YTIgMiAwIDAgMCAyLTJWMTdhMiAyIDAgMCAwLTItMmgtN2EyIDIgMCAwIDAtMiAyWlwiIC8+XG4gICAgICAgICAgPHBhdGggZD1cIk0xOCA1djRhMiAyIDAgMCAwIDIgMmg3YTIgMiAwIDAgMCAyLTJWNWEyIDIgMCAwIDAtMi0yaC03YTIgMiAwIDAgMC0yIDJaXCIgLz5cbiAgICAgICAgICA8cGF0aCBkPVwiTTMgMjV2MmEyIDIgMCAwIDAgMiAyaDdhMiAyIDAgMCAwIDItMnYtMmEyIDIgMCAwIDAtMi0ySDVhMiAyIDAgMCAwLTIgMlpcIiAvPlxuICAgICAgICA8L2c+XG4gICAgICA8L0xpZ2h0TW9kZT5cbiAgICAgIDxEYXJrTW9kZSBmaWxsPXtgdXJsKCMke2lkfS1ncmFkaWVudC1kYXJrKWB9PlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICBkPVwiTTMgMTdWNGExIDEgMCAwIDEgMS0xaDhhMSAxIDAgMCAxIDEgMXYxM2ExIDEgMCAwIDEtMSAxSDRhMSAxIDAgMCAxLTEtMVptMTYgMTB2LTlhMiAyIDAgMCAxIDItMmg2YTIgMiAwIDAgMSAyIDJ2OWEyIDIgMCAwIDEtMiAyaC02YTIgMiAwIDAgMS0yLTJabTAtMjN2NWExIDEgMCAwIDAgMSAxaDhhMSAxIDAgMCAwIDEtMVY0YTEgMSAwIDAgMC0xLTFoLThhMSAxIDAgMCAwLTEgMVpNMyAyOHYtM2ExIDEgMCAwIDEgMS0xaDlhMSAxIDAgMCAxIDEgMXYzYTEgMSAwIDAgMS0xIDFINGExIDEgMCAwIDEtMS0xWlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMiA0djEzaDJWNEgyWm0yLTJhMiAyIDAgMCAwLTIgMmgyVjJabTggMEg0djJoOFYyWm0yIDJhMiAyIDAgMCAwLTItMnYyaDJabTAgMTNWNGgtMnYxM2gyWm0tMiAyYTIgMiAwIDAgMCAyLTJoLTJ2MlptLTggMGg4di0ySDR2MlptLTItMmEyIDIgMCAwIDAgMiAydi0ySDJabTE2IDF2OWgydi05aC0yWm0zLTNhMyAzIDAgMCAwLTMgM2gyYTEgMSAwIDAgMSAxLTF2LTJabTYgMGgtNnYyaDZ2LTJabTMgM2EzIDMgMCAwIDAtMy0zdjJhMSAxIDAgMCAxIDEgMWgyWm0wIDl2LTloLTJ2OWgyWm0tMyAzYTMgMyAwIDAgMCAzLTNoLTJhMSAxIDAgMCAxLTEgMXYyWm0tNiAwaDZ2LTJoLTZ2MlptLTMtM2EzIDMgMCAwIDAgMyAzdi0yYTEgMSAwIDAgMS0xLTFoLTJabTItMThWNGgtMnY1aDJabTAgMGgtMmEyIDIgMCAwIDAgMiAyVjlabTggMGgtOHYyaDhWOVptMCAwdjJhMiAyIDAgMCAwIDItMmgtMlptMC01djVoMlY0aC0yWm0wIDBoMmEyIDIgMCAwIDAtMi0ydjJabS04IDBoOFYyaC04djJabTAgMFYyYTIgMiAwIDAgMC0yIDJoMlpNMiAyNXYzaDJ2LTNIMlptMi0yYTIgMiAwIDAgMC0yIDJoMnYtMlptOSAwSDR2Mmg5di0yWm0yIDJhMiAyIDAgMCAwLTItMnYyaDJabTAgM3YtM2gtMnYzaDJabS0yIDJhMiAyIDAgMCAwIDItMmgtMnYyWm0tOSAwaDl2LTJINHYyWm0tMi0yYTIgMiAwIDAgMCAyIDJ2LTJIMlpcIiAvPlxuICAgICAgPC9EYXJrTW9kZT5cbiAgICA8Lz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkRhcmtNb2RlIiwiR3JhZGllbnQiLCJMaWdodE1vZGUiLCJQcmVzZXRzSWNvbiIsImlkIiwiY29sb3IiLCJkZWZzIiwiZ3JhZGllbnRUcmFuc2Zvcm0iLCJjaXJjbGUiLCJjeCIsImN5IiwiciIsImZpbGwiLCJnIiwiY2xhc3NOYW1lIiwiZmlsbE9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VMaW5lam9pbiIsInBhdGgiLCJkIiwiZmlsbFJ1bGUiLCJjbGlwUnVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/icons/PresetsIcon.jsx\n"));

/***/ }),

/***/ "./src/components/icons/ThemingIcon.jsx":
/*!**********************************************!*\
  !*** ./src/components/icons/ThemingIcon.jsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ThemingIcon\": function() { return /* binding */ ThemingIcon; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/Icon */ \"./src/components/Icon.jsx\");\n\n\nfunction ThemingIcon(param) {\n    var id = param.id, color = param.color;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"defs\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 21 -21 0 12 11)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                        lineNumber: 7,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient-dark\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 24.5 -24.5 0 16 5.5)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                        lineNumber: 12,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                lineNumber: 6,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.LightMode, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                        cx: 12,\n                        cy: 20,\n                        r: 12,\n                        fill: \"url(#\".concat(id, \"-gradient)\")\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                        lineNumber: 19,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M27 12.13 19.87 5 13 11.87v14.26l14-14Z\",\n                        className: \"fill-[var(--icon-background)] stroke-[color:var(--icon-foreground)]\",\n                        fillOpacity: 0.5,\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                        lineNumber: 20,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M3 3h10v22a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V3Z\",\n                        className: \"fill-[var(--icon-background)]\",\n                        fillOpacity: 0.5\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                        lineNumber: 28,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M3 9v16a4 4 0 0 0 4 4h2a4 4 0 0 0 4-4V9M3 9V3h10v6M3 9h10M3 15h10M3 21h10\",\n                        className: \"stroke-[color:var(--icon-foreground)]\",\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                        lineNumber: 33,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M29 29V19h-8.5L13 26c0 1.5-2.5 3-5 3h21Z\",\n                        fillOpacity: 0.5,\n                        className: \"fill-[var(--icon-background)] stroke-[color:var(--icon-foreground)]\",\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                        lineNumber: 40,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                lineNumber: 18,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.DarkMode, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                    fillRule: \"evenodd\",\n                    clipRule: \"evenodd\",\n                    d: \"M3 2a1 1 0 0 0-1 1v21a6 6 0 0 0 12 0V3a1 1 0 0 0-1-1H3Zm16.752 3.293a1 1 0 0 0-1.593.244l-1.045 2A1 1 0 0 0 17 8v13a1 1 0 0 0 1.71.705l7.999-8.045a1 1 0 0 0-.002-1.412l-6.955-6.955ZM26 18a1 1 0 0 0-.707.293l-10 10A1 1 0 0 0 16 30h13a1 1 0 0 0 1-1V19a1 1 0 0 0-1-1h-3ZM5 18a1 1 0 1 0 0 2h6a1 1 0 1 0 0-2H5Zm-1-5a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1Zm1-7a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2H5Z\",\n                    fill: \"url(#\".concat(id, \"-gradient-dark)\")\n                }, void 0, false, {\n                    fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                    lineNumber: 50,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/ThemingIcon.jsx\",\n                lineNumber: 49,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_c = ThemingIcon;\nvar _c;\n$RefreshReg$(_c, \"ThemingIcon\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pY29ucy9UaGVtaW5nSWNvbi5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQWlFO0FBRTFELFNBQVNHLFdBQVcsQ0FBQyxLQUFhLEVBQUU7UUFBYkMsRUFBRSxHQUFKLEtBQWEsQ0FBWEEsRUFBRSxFQUFFQyxLQUFLLEdBQVgsS0FBYSxDQUFQQSxLQUFLO0lBQ3JDLHFCQUNFOzswQkFDRSw4REFBQ0MsTUFBSTs7a0NBQ0gsOERBQUNMLHNEQUFRO3dCQUNQRyxFQUFFLEVBQUUsRUFBQyxDQUFLLE1BQVMsQ0FBWkEsRUFBRSxFQUFDLFdBQVMsQ0FBQzt3QkFDcEJDLEtBQUssRUFBRUEsS0FBSzt3QkFDWkUsaUJBQWlCLEVBQUMsMEJBQTBCOzs7Ozs0QkFDNUM7a0NBQ0YsOERBQUNOLHNEQUFRO3dCQUNQRyxFQUFFLEVBQUUsRUFBQyxDQUFLLE1BQWMsQ0FBakJBLEVBQUUsRUFBQyxnQkFBYyxDQUFDO3dCQUN6QkMsS0FBSyxFQUFFQSxLQUFLO3dCQUNaRSxpQkFBaUIsRUFBQywrQkFBK0I7Ozs7OzRCQUNqRDs7Ozs7O29CQUNHOzBCQUNQLDhEQUFDTCx1REFBUzs7a0NBQ1IsOERBQUNNLFFBQU07d0JBQUNDLEVBQUUsRUFBRSxFQUFFO3dCQUFFQyxFQUFFLEVBQUUsRUFBRTt3QkFBRUMsQ0FBQyxFQUFFLEVBQUU7d0JBQUVDLElBQUksRUFBRSxPQUFNLENBQUssTUFBVSxDQUFiUixFQUFFLEVBQUMsWUFBVSxDQUFDOzs7Ozs0QkFBSTtrQ0FDL0QsOERBQUNTLE1BQUk7d0JBQ0hDLENBQUMsRUFBQyx5Q0FBeUM7d0JBQzNDQyxTQUFTLEVBQUMscUVBQXFFO3dCQUMvRUMsV0FBVyxFQUFFLEdBQUc7d0JBQ2hCQyxXQUFXLEVBQUUsQ0FBQzt3QkFDZEMsYUFBYSxFQUFDLE9BQU87d0JBQ3JCQyxjQUFjLEVBQUMsT0FBTzs7Ozs7NEJBQ3RCO2tDQUNGLDhEQUFDTixNQUFJO3dCQUNIQyxDQUFDLEVBQUMsNkNBQTZDO3dCQUMvQ0MsU0FBUyxFQUFDLCtCQUErQjt3QkFDekNDLFdBQVcsRUFBRSxHQUFHOzs7Ozs0QkFDaEI7a0NBQ0YsOERBQUNILE1BQUk7d0JBQ0hDLENBQUMsRUFBQywyRUFBMkU7d0JBQzdFQyxTQUFTLEVBQUMsdUNBQXVDO3dCQUNqREUsV0FBVyxFQUFFLENBQUM7d0JBQ2RDLGFBQWEsRUFBQyxPQUFPO3dCQUNyQkMsY0FBYyxFQUFDLE9BQU87Ozs7OzRCQUN0QjtrQ0FDRiw4REFBQ04sTUFBSTt3QkFDSEMsQ0FBQyxFQUFDLDBDQUEwQzt3QkFDNUNFLFdBQVcsRUFBRSxHQUFHO3dCQUNoQkQsU0FBUyxFQUFDLHFFQUFxRTt3QkFDL0VFLFdBQVcsRUFBRSxDQUFDO3dCQUNkQyxhQUFhLEVBQUMsT0FBTzt3QkFDckJDLGNBQWMsRUFBQyxPQUFPOzs7Ozs0QkFDdEI7Ozs7OztvQkFDUTswQkFDWiw4REFBQ25CLHNEQUFROzBCQUNQLDRFQUFDYSxNQUFJO29CQUNITyxRQUFRLEVBQUMsU0FBUztvQkFDbEJDLFFBQVEsRUFBQyxTQUFTO29CQUNsQlAsQ0FBQyxFQUFDLDRZQUE0WTtvQkFDOVlGLElBQUksRUFBRSxPQUFNLENBQUssTUFBZSxDQUFsQlIsRUFBRSxFQUFDLGlCQUFlLENBQUM7Ozs7O3dCQUNqQzs7Ozs7b0JBQ087O29CQUNWLENBQ0o7QUFDSCxDQUFDO0FBeERlRCxLQUFBQSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL2ljb25zL1RoZW1pbmdJY29uLmpzeD81NDc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhcmtNb2RlLCBHcmFkaWVudCwgTGlnaHRNb2RlIH0gZnJvbSAnQC9jb21wb25lbnRzL0ljb24nXG5cbmV4cG9ydCBmdW5jdGlvbiBUaGVtaW5nSWNvbih7IGlkLCBjb2xvciB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkZWZzPlxuICAgICAgICA8R3JhZGllbnRcbiAgICAgICAgICBpZD17YCR7aWR9LWdyYWRpZW50YH1cbiAgICAgICAgICBjb2xvcj17Y29sb3J9XG4gICAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09XCJtYXRyaXgoMCAyMSAtMjEgMCAxMiAxMSlcIlxuICAgICAgICAvPlxuICAgICAgICA8R3JhZGllbnRcbiAgICAgICAgICBpZD17YCR7aWR9LWdyYWRpZW50LWRhcmtgfVxuICAgICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgwIDI0LjUgLTI0LjUgMCAxNiA1LjUpXCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGVmcz5cbiAgICAgIDxMaWdodE1vZGU+XG4gICAgICAgIDxjaXJjbGUgY3g9ezEyfSBjeT17MjB9IHI9ezEyfSBmaWxsPXtgdXJsKCMke2lkfS1ncmFkaWVudClgfSAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMjcgMTIuMTMgMTkuODcgNSAxMyAxMS44N3YxNC4yNmwxNC0xNFpcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImZpbGwtW3ZhcigtLWljb24tYmFja2dyb3VuZCldIHN0cm9rZS1bY29sb3I6dmFyKC0taWNvbi1mb3JlZ3JvdW5kKV1cIlxuICAgICAgICAgIGZpbGxPcGFjaXR5PXswLjV9XG4gICAgICAgICAgc3Ryb2tlV2lkdGg9ezJ9XG4gICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTMgM2gxMHYyMmE0IDQgMCAwIDEtNCA0SDdhNCA0IDAgMCAxLTQtNFYzWlwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZmlsbC1bdmFyKC0taWNvbi1iYWNrZ3JvdW5kKV1cIlxuICAgICAgICAgIGZpbGxPcGFjaXR5PXswLjV9XG4gICAgICAgIC8+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgZD1cIk0zIDl2MTZhNCA0IDAgMCAwIDQgNGgyYTQgNCAwIDAgMCA0LTRWOU0zIDlWM2gxMHY2TTMgOWgxME0zIDE1aDEwTTMgMjFoMTBcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cInN0cm9rZS1bY29sb3I6dmFyKC0taWNvbi1mb3JlZ3JvdW5kKV1cIlxuICAgICAgICAgIHN0cm9rZVdpZHRoPXsyfVxuICAgICAgICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIC8+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgZD1cIk0yOSAyOVYxOWgtOC41TDEzIDI2YzAgMS41LTIuNSAzLTUgM2gyMVpcIlxuICAgICAgICAgIGZpbGxPcGFjaXR5PXswLjV9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiZmlsbC1bdmFyKC0taWNvbi1iYWNrZ3JvdW5kKV0gc3Ryb2tlLVtjb2xvcjp2YXIoLS1pY29uLWZvcmVncm91bmQpXVwiXG4gICAgICAgICAgc3Ryb2tlV2lkdGg9ezJ9XG4gICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgLz5cbiAgICAgIDwvTGlnaHRNb2RlPlxuICAgICAgPERhcmtNb2RlPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICBkPVwiTTMgMmExIDEgMCAwIDAtMSAxdjIxYTYgNiAwIDAgMCAxMiAwVjNhMSAxIDAgMCAwLTEtMUgzWm0xNi43NTIgMy4yOTNhMSAxIDAgMCAwLTEuNTkzLjI0NGwtMS4wNDUgMkExIDEgMCAwIDAgMTcgOHYxM2ExIDEgMCAwIDAgMS43MS43MDVsNy45OTktOC4wNDVhMSAxIDAgMCAwLS4wMDItMS40MTJsLTYuOTU1LTYuOTU1Wk0yNiAxOGExIDEgMCAwIDAtLjcwNy4yOTNsLTEwIDEwQTEgMSAwIDAgMCAxNiAzMGgxM2ExIDEgMCAwIDAgMS0xVjE5YTEgMSAwIDAgMC0xLTFoLTNaTTUgMThhMSAxIDAgMSAwIDAgMmg2YTEgMSAwIDEgMCAwLTJINVptLTEtNWExIDEgMCAwIDEgMS0xaDZhMSAxIDAgMSAxIDAgMkg1YTEgMSAwIDAgMS0xLTFabTEtN2ExIDEgMCAwIDAgMCAyaDZhMSAxIDAgMSAwIDAtMkg1WlwiXG4gICAgICAgICAgZmlsbD17YHVybCgjJHtpZH0tZ3JhZGllbnQtZGFyaylgfVxuICAgICAgICAvPlxuICAgICAgPC9EYXJrTW9kZT5cbiAgICA8Lz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkRhcmtNb2RlIiwiR3JhZGllbnQiLCJMaWdodE1vZGUiLCJUaGVtaW5nSWNvbiIsImlkIiwiY29sb3IiLCJkZWZzIiwiZ3JhZGllbnRUcmFuc2Zvcm0iLCJjaXJjbGUiLCJjeCIsImN5IiwiciIsImZpbGwiLCJwYXRoIiwiZCIsImNsYXNzTmFtZSIsImZpbGxPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iLCJmaWxsUnVsZSIsImNsaXBSdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/icons/ThemingIcon.jsx\n"));

/***/ }),

/***/ "./src/components/icons/WarningIcon.jsx":
/*!**********************************************!*\
  !*** ./src/components/icons/WarningIcon.jsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WarningIcon\": function() { return /* binding */ WarningIcon; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/Icon */ \"./src/components/Icon.jsx\");\n\n\nfunction WarningIcon(param) {\n    var id = param.id, color = param.color;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"defs\", {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient\"),\n                        color: color,\n                        gradientTransform: \"rotate(65.924 1.519 20.92) scale(25.7391)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                        lineNumber: 7,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.Gradient, {\n                        id: \"\".concat(id, \"-gradient-dark\"),\n                        color: color,\n                        gradientTransform: \"matrix(0 24.5 -24.5 0 16 5.5)\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                        lineNumber: 12,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                lineNumber: 6,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.LightMode, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                        cx: 20,\n                        cy: 20,\n                        r: 12,\n                        fill: \"url(#\".concat(id, \"-gradient)\")\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                        lineNumber: 19,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M3 16c0 7.18 5.82 13 13 13s13-5.82 13-13S23.18 3 16 3 3 8.82 3 16Z\",\n                        fillOpacity: 0.5,\n                        className: \"fill-[var(--icon-background)] stroke-[color:var(--icon-foreground)]\",\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                        lineNumber: 20,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"m15.408 16.509-1.04-5.543a1.66 1.66 0 1 1 3.263 0l-1.039 5.543a.602.602 0 0 1-1.184 0Z\",\n                        className: \"fill-[var(--icon-foreground)] stroke-[color:var(--icon-foreground)]\",\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                        lineNumber: 28,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                        d: \"M16 23a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\",\n                        fillOpacity: 0.5,\n                        stroke: \"currentColor\",\n                        className: \"fill-[var(--icon-background)] stroke-[color:var(--icon-foreground)]\",\n                        strokeWidth: 2,\n                        strokeLinecap: \"round\",\n                        strokeLinejoin: \"round\"\n                    }, void 0, false, {\n                        fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                        lineNumber: 35,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                lineNumber: 18,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Icon__WEBPACK_IMPORTED_MODULE_1__.DarkMode, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                    fillRule: \"evenodd\",\n                    clipRule: \"evenodd\",\n                    d: \"M2 16C2 8.268 8.268 2 16 2s14 6.268 14 14-6.268 14-14 14S2 23.732 2 16Zm11.386-4.85a2.66 2.66 0 1 1 5.228 0l-1.039 5.543a1.602 1.602 0 0 1-3.15 0l-1.04-5.543ZM16 20a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z\",\n                    fill: \"url(#\".concat(id, \"-gradient-dark)\")\n                }, void 0, false, {\n                    fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                    lineNumber: 46,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/boetter/Documents/GitHub/data-spaces-rapport/src/components/icons/WarningIcon.jsx\",\n                lineNumber: 45,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_c = WarningIcon;\nvar _c;\n$RefreshReg$(_c, \"WarningIcon\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9pY29ucy9XYXJuaW5nSWNvbi5qc3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQWlFO0FBRTFELFNBQVNHLFdBQVcsQ0FBQyxLQUFhLEVBQUU7UUFBYkMsRUFBRSxHQUFKLEtBQWEsQ0FBWEEsRUFBRSxFQUFFQyxLQUFLLEdBQVgsS0FBYSxDQUFQQSxLQUFLO0lBQ3JDLHFCQUNFOzswQkFDRSw4REFBQ0MsTUFBSTs7a0NBQ0gsOERBQUNMLHNEQUFRO3dCQUNQRyxFQUFFLEVBQUUsRUFBQyxDQUFLLE1BQVMsQ0FBWkEsRUFBRSxFQUFDLFdBQVMsQ0FBQzt3QkFDcEJDLEtBQUssRUFBRUEsS0FBSzt3QkFDWkUsaUJBQWlCLEVBQUMsMkNBQTJDOzs7Ozs0QkFDN0Q7a0NBQ0YsOERBQUNOLHNEQUFRO3dCQUNQRyxFQUFFLEVBQUUsRUFBQyxDQUFLLE1BQWMsQ0FBakJBLEVBQUUsRUFBQyxnQkFBYyxDQUFDO3dCQUN6QkMsS0FBSyxFQUFFQSxLQUFLO3dCQUNaRSxpQkFBaUIsRUFBQywrQkFBK0I7Ozs7OzRCQUNqRDs7Ozs7O29CQUNHOzBCQUNQLDhEQUFDTCx1REFBUzs7a0NBQ1IsOERBQUNNLFFBQU07d0JBQUNDLEVBQUUsRUFBRSxFQUFFO3dCQUFFQyxFQUFFLEVBQUUsRUFBRTt3QkFBRUMsQ0FBQyxFQUFFLEVBQUU7d0JBQUVDLElBQUksRUFBRSxPQUFNLENBQUssTUFBVSxDQUFiUixFQUFFLEVBQUMsWUFBVSxDQUFDOzs7Ozs0QkFBSTtrQ0FDL0QsOERBQUNTLE1BQUk7d0JBQ0hDLENBQUMsRUFBQyxvRUFBb0U7d0JBQ3RFQyxXQUFXLEVBQUUsR0FBRzt3QkFDaEJDLFNBQVMsRUFBQyxxRUFBcUU7d0JBQy9FQyxXQUFXLEVBQUUsQ0FBQzt3QkFDZEMsYUFBYSxFQUFDLE9BQU87d0JBQ3JCQyxjQUFjLEVBQUMsT0FBTzs7Ozs7NEJBQ3RCO2tDQUNGLDhEQUFDTixNQUFJO3dCQUNIQyxDQUFDLEVBQUMsd0ZBQXdGO3dCQUMxRkUsU0FBUyxFQUFDLHFFQUFxRTt3QkFDL0VDLFdBQVcsRUFBRSxDQUFDO3dCQUNkQyxhQUFhLEVBQUMsT0FBTzt3QkFDckJDLGNBQWMsRUFBQyxPQUFPOzs7Ozs0QkFDdEI7a0NBQ0YsOERBQUNOLE1BQUk7d0JBQ0hDLENBQUMsRUFBQyxxQ0FBcUM7d0JBQ3ZDQyxXQUFXLEVBQUUsR0FBRzt3QkFDaEJLLE1BQU0sRUFBQyxjQUFjO3dCQUNyQkosU0FBUyxFQUFDLHFFQUFxRTt3QkFDL0VDLFdBQVcsRUFBRSxDQUFDO3dCQUNkQyxhQUFhLEVBQUMsT0FBTzt3QkFDckJDLGNBQWMsRUFBQyxPQUFPOzs7Ozs0QkFDdEI7Ozs7OztvQkFDUTswQkFDWiw4REFBQ25CLHNEQUFROzBCQUNQLDRFQUFDYSxNQUFJO29CQUNIUSxRQUFRLEVBQUMsU0FBUztvQkFDbEJDLFFBQVEsRUFBQyxTQUFTO29CQUNsQlIsQ0FBQyxFQUFDLG1NQUFtTTtvQkFDck1GLElBQUksRUFBRSxPQUFNLENBQUssTUFBZSxDQUFsQlIsRUFBRSxFQUFDLGlCQUFlLENBQUM7Ozs7O3dCQUNqQzs7Ozs7b0JBQ087O29CQUNWLENBQ0o7QUFDSCxDQUFDO0FBcERlRCxLQUFBQSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL2ljb25zL1dhcm5pbmdJY29uLmpzeD8xZThjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhcmtNb2RlLCBHcmFkaWVudCwgTGlnaHRNb2RlIH0gZnJvbSAnQC9jb21wb25lbnRzL0ljb24nXG5cbmV4cG9ydCBmdW5jdGlvbiBXYXJuaW5nSWNvbih7IGlkLCBjb2xvciB9KSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkZWZzPlxuICAgICAgICA8R3JhZGllbnRcbiAgICAgICAgICBpZD17YCR7aWR9LWdyYWRpZW50YH1cbiAgICAgICAgICBjb2xvcj17Y29sb3J9XG4gICAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09XCJyb3RhdGUoNjUuOTI0IDEuNTE5IDIwLjkyKSBzY2FsZSgyNS43MzkxKVwiXG4gICAgICAgIC8+XG4gICAgICAgIDxHcmFkaWVudFxuICAgICAgICAgIGlkPXtgJHtpZH0tZ3JhZGllbnQtZGFya2B9XG4gICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KDAgMjQuNSAtMjQuNSAwIDE2IDUuNSlcIlxuICAgICAgICAvPlxuICAgICAgPC9kZWZzPlxuICAgICAgPExpZ2h0TW9kZT5cbiAgICAgICAgPGNpcmNsZSBjeD17MjB9IGN5PXsyMH0gcj17MTJ9IGZpbGw9e2B1cmwoIyR7aWR9LWdyYWRpZW50KWB9IC8+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgZD1cIk0zIDE2YzAgNy4xOCA1LjgyIDEzIDEzIDEzczEzLTUuODIgMTMtMTNTMjMuMTggMyAxNiAzIDMgOC44MiAzIDE2WlwiXG4gICAgICAgICAgZmlsbE9wYWNpdHk9ezAuNX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJmaWxsLVt2YXIoLS1pY29uLWJhY2tncm91bmQpXSBzdHJva2UtW2NvbG9yOnZhcigtLWljb24tZm9yZWdyb3VuZCldXCJcbiAgICAgICAgICBzdHJva2VXaWR0aD17Mn1cbiAgICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJtMTUuNDA4IDE2LjUwOS0xLjA0LTUuNTQzYTEuNjYgMS42NiAwIDEgMSAzLjI2MyAwbC0xLjAzOSA1LjU0M2EuNjAyLjYwMiAwIDAgMS0xLjE4NCAwWlwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZmlsbC1bdmFyKC0taWNvbi1mb3JlZ3JvdW5kKV0gc3Ryb2tlLVtjb2xvcjp2YXIoLS1pY29uLWZvcmVncm91bmQpXVwiXG4gICAgICAgICAgc3Ryb2tlV2lkdGg9ezJ9XG4gICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTE2IDIzYTEgMSAwIDEgMCAwLTIgMSAxIDAgMCAwIDAgMlpcIlxuICAgICAgICAgIGZpbGxPcGFjaXR5PXswLjV9XG4gICAgICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJmaWxsLVt2YXIoLS1pY29uLWJhY2tncm91bmQpXSBzdHJva2UtW2NvbG9yOnZhcigtLWljb24tZm9yZWdyb3VuZCldXCJcbiAgICAgICAgICBzdHJva2VXaWR0aD17Mn1cbiAgICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICAvPlxuICAgICAgPC9MaWdodE1vZGU+XG4gICAgICA8RGFya01vZGU+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgIGQ9XCJNMiAxNkMyIDguMjY4IDguMjY4IDIgMTYgMnMxNCA2LjI2OCAxNCAxNC02LjI2OCAxNC0xNCAxNFMyIDIzLjczMiAyIDE2Wm0xMS4zODYtNC44NWEyLjY2IDIuNjYgMCAxIDEgNS4yMjggMGwtMS4wMzkgNS41NDNhMS42MDIgMS42MDIgMCAwIDEtMy4xNSAwbC0xLjA0LTUuNTQzWk0xNiAyMGEyIDIgMCAxIDAgMCA0IDIgMiAwIDAgMCAwLTRaXCJcbiAgICAgICAgICBmaWxsPXtgdXJsKCMke2lkfS1ncmFkaWVudC1kYXJrKWB9XG4gICAgICAgIC8+XG4gICAgICA8L0RhcmtNb2RlPlxuICAgIDwvPlxuICApXG59XG4iXSwibmFtZXMiOlsiRGFya01vZGUiLCJHcmFkaWVudCIsIkxpZ2h0TW9kZSIsIldhcm5pbmdJY29uIiwiaWQiLCJjb2xvciIsImRlZnMiLCJncmFkaWVudFRyYW5zZm9ybSIsImNpcmNsZSIsImN4IiwiY3kiLCJyIiwiZmlsbCIsInBhdGgiLCJkIiwiZmlsbE9wYWNpdHkiLCJjbGFzc05hbWUiLCJzdHJva2VXaWR0aCIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VMaW5lam9pbiIsInN0cm9rZSIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/icons/WarningIcon.jsx\n"));

/***/ }),

/***/ "./src/pages/centrale-aktorer-og-teknologiske-komponenter/index.md":
/*!*************************************************************************!*\
  !*** ./src/pages/centrale-aktorer-og-teknologiske-komponenter/index.md ***!
  \*************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__N_SSG\": function() { return /* binding */ __N_SSG; },\n/* harmony export */   \"default\": function() { return /* binding */ MarkdocComponent; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @markdoc/markdoc */ \"./node_modules/@markdoc/markdoc/dist/index.mjs\");\n/* harmony import */ var _Users_boetter_Documents_GitHub_data_spaces_rapport_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@markdoc/next.js/src/runtime.js */ \"./node_modules/@markdoc/next.js/src/runtime.js\");\n/* harmony import */ var _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./markdoc/tags.js */ \"./markdoc/tags.js\");\n/* harmony import */ var _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./markdoc/nodes.js */ \"./markdoc/nodes.js\");\n\n\n// renderers is imported separately so Markdoc isn't sent to the client\n\n\n/**\n * Schema is imported like this so end-user's code is compiled using build-in babel/webpack configs.\n * This enables typescript/ESnext support\n */ var config = {};\n\n\nvar functions = {};\nvar schema = (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n    tags: _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ ? _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] || _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ : {},\n    nodes: _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ ? _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] || _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ : {},\n    functions: functions ? functions.default || functions : {}\n}, config ? config.default || config : {});\nvar components = (0,_Users_boetter_Documents_GitHub_data_spaces_rapport_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__.getSchema)(schema).components;\nvar __N_SSG = true;\nfunction MarkdocComponent(props) {\n    // Only execute HMR code in development\n    return _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_5__.renderers.react(props.markdoc.content, (react__WEBPACK_IMPORTED_MODULE_0___default()), {\n        components: (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({}, components, props.components)\n    });\n};\n_c = MarkdocComponent;\nvar _c;\n$RefreshReg$(_c, \"MarkdocComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/centrale-aktorer-og-teknologiske-komponenter/index.md\n"));

/***/ }),

/***/ "./node_modules/prism-react-renderer/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/prism-react-renderer/dist/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Prism\": function() { return /* reexport safe */ _prism_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; },\n/* harmony export */   \"defaultProps\": function() { return /* binding */ defaultProps; }\n/* harmony export */ });\n/* harmony import */ var _prism_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../prism/index.js */ \"./node_modules/prism-react-renderer/prism/index.js\");\n/* harmony import */ var _themes_duotoneDark__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../themes/duotoneDark */ \"./node_modules/prism-react-renderer/themes/duotoneDark/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n\nvar defaultProps = {\n  // $FlowFixMe\n  Prism: _prism_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  theme: _themes_duotoneDark__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar newlineRe = /\\r\\n|\\r|\\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }\n\nvar normalizeEmptyLines = function (line) {\n  if (line.length === 0) {\n    line.push({\n      types: [\"plain\"],\n      content: \"\\n\",\n      empty: true\n    });\n  } else if (line.length === 1 && line[0].content === \"\") {\n    line[0].content = \"\\n\";\n    line[0].empty = true;\n  }\n};\n\nvar appendTypes = function (types, add) {\n  var typesSize = types.length;\n\n  if (typesSize > 0 && types[typesSize - 1] === add) {\n    return types;\n  }\n\n  return types.concat(add);\n}; // Takes an array of Prism's tokens and groups them by line, turning plain\n// strings into tokens as well. Tokens can become recursive in some cases,\n// which means that their types are concatenated. Plain-string tokens however\n// are always of type \"plain\".\n// This is not recursive to avoid exceeding the call-stack limit, since it's unclear\n// how nested Prism's tokens can become\n\n\nvar normalizeTokens = function (tokens) {\n  var typeArrStack = [[]];\n  var tokenArrStack = [tokens];\n  var tokenArrIndexStack = [0];\n  var tokenArrSizeStack = [tokens.length];\n  var i = 0;\n  var stackIndex = 0;\n  var currentLine = [];\n  var acc = [currentLine];\n\n  while (stackIndex > -1) {\n    while ((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]) {\n      var content = void 0;\n      var types = typeArrStack[stackIndex];\n      var tokenArr = tokenArrStack[stackIndex];\n      var token = tokenArr[i]; // Determine content and append type to types if necessary\n\n      if (typeof token === \"string\") {\n        types = stackIndex > 0 ? types : [\"plain\"];\n        content = token;\n      } else {\n        types = appendTypes(types, token.type);\n\n        if (token.alias) {\n          types = appendTypes(types, token.alias);\n        }\n\n        content = token.content;\n      } // If token.content is an array, increase the stack depth and repeat this while-loop\n\n\n      if (typeof content !== \"string\") {\n        stackIndex++;\n        typeArrStack.push(types);\n        tokenArrStack.push(content);\n        tokenArrIndexStack.push(0);\n        tokenArrSizeStack.push(content.length);\n        continue;\n      } // Split by newlines\n\n\n      var splitByNewlines = content.split(newlineRe);\n      var newlineCount = splitByNewlines.length;\n      currentLine.push({\n        types: types,\n        content: splitByNewlines[0]\n      }); // Create a new line for each string on a new line\n\n      for (var i$1 = 1; i$1 < newlineCount; i$1++) {\n        normalizeEmptyLines(currentLine);\n        acc.push(currentLine = []);\n        currentLine.push({\n          types: types,\n          content: splitByNewlines[i$1]\n        });\n      }\n    } // Decreate the stack depth\n\n\n    stackIndex--;\n    typeArrStack.pop();\n    tokenArrStack.pop();\n    tokenArrIndexStack.pop();\n    tokenArrSizeStack.pop();\n  }\n\n  normalizeEmptyLines(currentLine);\n  return acc;\n};\n\nvar themeToDict = function (theme, language) {\n  var plain = theme.plain; // $FlowFixMe\n\n  var base = Object.create(null);\n  var themeDict = theme.styles.reduce(function (acc, themeEntry) {\n    var languages = themeEntry.languages;\n    var style = themeEntry.style;\n\n    if (languages && !languages.includes(language)) {\n      return acc;\n    }\n\n    themeEntry.types.forEach(function (type) {\n      // $FlowFixMe\n      var accStyle = _extends({}, acc[type], style);\n\n      acc[type] = accStyle;\n    });\n    return acc;\n  }, base); // $FlowFixMe\n\n  themeDict.root = plain; // $FlowFixMe\n\n  themeDict.plain = _extends({}, plain, {\n    backgroundColor: null\n  });\n  return themeDict;\n};\n\nfunction objectWithoutProperties(obj, exclude) {\n  var target = {};\n\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n\n  return target;\n}\n\nvar Highlight = /*@__PURE__*/function (Component) {\n  function Highlight() {\n    var this$1 = this;\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    Component.apply(this, args);\n\n    _defineProperty(this, \"getThemeDict\", function (props) {\n      if (this$1.themeDict !== undefined && props.theme === this$1.prevTheme && props.language === this$1.prevLanguage) {\n        return this$1.themeDict;\n      }\n\n      this$1.prevTheme = props.theme;\n      this$1.prevLanguage = props.language;\n      var themeDict = props.theme ? themeToDict(props.theme, props.language) : undefined;\n      return this$1.themeDict = themeDict;\n    });\n\n    _defineProperty(this, \"getLineProps\", function (ref) {\n      var key = ref.key;\n      var className = ref.className;\n      var style = ref.style;\n      var rest$1 = objectWithoutProperties(ref, [\"key\", \"className\", \"style\", \"line\"]);\n      var rest = rest$1;\n\n      var output = _extends({}, rest, {\n        className: \"token-line\",\n        style: undefined,\n        key: undefined\n      });\n\n      var themeDict = this$1.getThemeDict(this$1.props);\n\n      if (themeDict !== undefined) {\n        output.style = themeDict.plain;\n      }\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) {\n        output.key = key;\n      }\n\n      if (className) {\n        output.className += \" \" + className;\n      }\n\n      return output;\n    });\n\n    _defineProperty(this, \"getStyleForToken\", function (ref) {\n      var types = ref.types;\n      var empty = ref.empty;\n      var typesSize = types.length;\n      var themeDict = this$1.getThemeDict(this$1.props);\n\n      if (themeDict === undefined) {\n        return undefined;\n      } else if (typesSize === 1 && types[0] === \"plain\") {\n        return empty ? {\n          display: \"inline-block\"\n        } : undefined;\n      } else if (typesSize === 1 && !empty) {\n        return themeDict[types[0]];\n      }\n\n      var baseStyle = empty ? {\n        display: \"inline-block\"\n      } : {}; // $FlowFixMe\n\n      var typeStyles = types.map(function (type) {\n        return themeDict[type];\n      });\n      return Object.assign.apply(Object, [baseStyle].concat(typeStyles));\n    });\n\n    _defineProperty(this, \"getTokenProps\", function (ref) {\n      var key = ref.key;\n      var className = ref.className;\n      var style = ref.style;\n      var token = ref.token;\n      var rest$1 = objectWithoutProperties(ref, [\"key\", \"className\", \"style\", \"token\"]);\n      var rest = rest$1;\n\n      var output = _extends({}, rest, {\n        className: \"token \" + token.types.join(\" \"),\n        children: token.content,\n        style: this$1.getStyleForToken(token),\n        key: undefined\n      });\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) {\n        output.key = key;\n      }\n\n      if (className) {\n        output.className += \" \" + className;\n      }\n\n      return output;\n    });\n\n    _defineProperty(this, \"tokenize\", function (Prism, code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language,\n        tokens: []\n      };\n      Prism.hooks.run(\"before-tokenize\", env);\n      var tokens = env.tokens = Prism.tokenize(env.code, env.grammar, env.language);\n      Prism.hooks.run(\"after-tokenize\", env);\n      return tokens;\n    });\n  }\n\n  if (Component) Highlight.__proto__ = Component;\n  Highlight.prototype = Object.create(Component && Component.prototype);\n  Highlight.prototype.constructor = Highlight;\n\n  Highlight.prototype.render = function render() {\n    var ref = this.props;\n    var Prism = ref.Prism;\n    var language = ref.language;\n    var code = ref.code;\n    var children = ref.children;\n    var themeDict = this.getThemeDict(this.props);\n    var grammar = Prism.languages[language];\n    var mixedTokens = grammar !== undefined ? this.tokenize(Prism, code, grammar, language) : [code];\n    var tokens = normalizeTokens(mixedTokens);\n    return children({\n      tokens: tokens,\n      className: \"prism-code language-\" + language,\n      style: themeDict !== undefined ? themeDict.root : {},\n      getLineProps: this.getLineProps,\n      getTokenProps: this.getTokenProps\n    });\n  };\n\n  return Highlight;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Highlight);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prism-react-renderer/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/prism-react-renderer/prism/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/prism-react-renderer/prism/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\n\n var Prism = (function () {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\treturn _;\n\n}());\n\nvar prism = Prism;\nPrism.default = Prism;\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nprism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nprism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];\nprism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nprism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function (attrName, lang) {\n    prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend('markup', {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nprism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nprism.languages.c = prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'string': {\n    // https://en.cppreference.com/w/c/language/string_literal\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore('c', 'string', {\n  'char': {\n    // https://en.cppreference.com/w/c/language/character_constant\n    pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n    greedy: true\n  }\n});\nprism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, prism.languages.c['string']],\n      'char': prism.languages.c['char'],\n      'comment': prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: prism.languages.c\n      }\n    }\n  }\n});\nprism.languages.insertBefore('c', 'function', {\n  // highlight predefined macros as constants\n  'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:false|true)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector.pattern,\n    lookbehind: true,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#[\\da-f]{3,8}\\b/i,\n      alias: 'color'\n    },\n    'color': [{\n      pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nprism.languages.javascript = prism.languages.extend('clike', {\n  'class-name': [prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': {\n    pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + ( // constant\n    /NaN|Infinity/.source + '|' + // binary integer\n    /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer\n    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer\n    /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint\n    /\\d+(?:_\\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint\n    /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n    lookbehind: true\n  },\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string-property': {\n    pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property'\n  }\n});\nprism.languages.insertBefore('javascript', 'operator', {\n  'literal-property': {\n    pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n    lookbehind: true,\n    alias: 'property'\n  }\n});\n\nif (prism.languages.markup) {\n  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-coffeescript\" */\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-yaml\" */\n\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/false|true/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n/* \"prismjs/components/prism-markdown\" */\n\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'front-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-graphql\" */\n\n\nprism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /\\b[A-Z]\\w*Input\\b/,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nprism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */\n\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */\n\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */\n\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */\n\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n\n    aliases.push(alias);\n  }\n\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n\n        currentIndex = definitionEnd + 1;\n      }\n\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\n/* \"prismjs/components/prism-sql\" */\n\nprism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n    greedy: true,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^`|`$/\n    }\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-js-templates\" */\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // sql`...`\n  createTemplate('sql', /\\bsql/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n          /* noop */\n        }\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(prism);\n/* \"prismjs/components/prism-jsx\" */\n\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      alias: 'language-javascript',\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      }\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === 'diff') {\n      alias.push('bold');\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(prism);\n/* \"prismjs/components/prism-git\" */\n\n\nprism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nprism.languages.go = prism.languages.extend('clike', {\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n    lookbehind: true,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|false|iota|nil|true)\\b/,\n  'number': [// binary and octal integers\n  /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i, // hexadecimal integers and floats\n  /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i, // decimal integers and floats\n  /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore('go', 'string', {\n  'char': {\n    pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n    greedy: true\n  }\n});\ndelete prism.languages.go['class-name'];\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n  Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nprism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nprism.languages.less = prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n  'operator': /[+\\-*\\/]/\n});\nprism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nprism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin-target': {\n    pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n    alias: 'builtin'\n  },\n  'target': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    alias: 'symbol',\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  // Directives\n  'keyword': /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  'function': {\n    pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n    lookbehind: true\n  },\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */\n\nprism.languages.objectivec = prism.languages.extend('c', {\n  'string': {\n    pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec['class-name'];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n// https://ocaml.org/manual/lex.html\n\nprism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [// binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nprism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:False|None|True)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n  'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nprism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nprism.languages.reason = prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore('reason', 'class-name', {\n  'char': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    greedy: true\n  },\n  // Negative look-ahead prevents from matching things like String.capitalize\n  'constructor': /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nprism.languages.scss = prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nprism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nprism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|hide|show|with)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n    lookbehind: true\n  }\n});\nprism.languages.scss['atrule'].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.tsx['parameter'];\n  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nprism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (prism);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prism-react-renderer/prism/index.js\n"));

/***/ }),

/***/ "./node_modules/prism-react-renderer/themes/duotoneDark/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/prism-react-renderer/themes/duotoneDark/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Duotone Dark\n// Author: Simurai, adapted from DuoTone themes for Atom (http://simurai.com/projects/2016/01/01/duotone-themes)\n// Conversion: Bram de Haan (http://atelierbram.github.io/Base2Tone-prism/output/prism/prism-base2tone-evening-dark.css)\n// Generated with Base16 Builder (https://github.com/base16-builder/base16-builder)\nvar theme = {\n  plain: {\n    backgroundColor: \"#2a2734\",\n    color: \"#9a86fd\"\n  },\n  styles: [{\n    types: [\"comment\", \"prolog\", \"doctype\", \"cdata\", \"punctuation\"],\n    style: {\n      color: \"#6c6783\"\n    }\n  }, {\n    types: [\"namespace\"],\n    style: {\n      opacity: 0.7\n    }\n  }, {\n    types: [\"tag\", \"operator\", \"number\"],\n    style: {\n      color: \"#e09142\"\n    }\n  }, {\n    types: [\"property\", \"function\"],\n    style: {\n      color: \"#9a86fd\"\n    }\n  }, {\n    types: [\"tag-id\", \"selector\", \"atrule-id\"],\n    style: {\n      color: \"#eeebff\"\n    }\n  }, {\n    types: [\"attr-name\"],\n    style: {\n      color: \"#c4b9fe\"\n    }\n  }, {\n    types: [\"boolean\", \"string\", \"entity\", \"url\", \"attr-value\", \"keyword\", \"control\", \"directive\", \"unit\", \"statement\", \"regex\", \"atrule\", \"placeholder\", \"variable\"],\n    style: {\n      color: \"#ffcc99\"\n    }\n  }, {\n    types: [\"deleted\"],\n    style: {\n      textDecorationLine: \"line-through\"\n    }\n  }, {\n    types: [\"inserted\"],\n    style: {\n      textDecorationLine: \"underline\"\n    }\n  }, {\n    types: [\"italic\"],\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, {\n    types: [\"important\", \"bold\"],\n    style: {\n      fontWeight: \"bold\"\n    }\n  }, {\n    types: [\"important\"],\n    style: {\n      color: \"#c4b9fe\"\n    }\n  }]\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (theme);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJpc20tcmVhY3QtcmVuZGVyZXIvdGhlbWVzL2R1b3RvbmVEYXJrL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsK0RBQWUsS0FBSyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcmlzbS1yZWFjdC1yZW5kZXJlci90aGVtZXMvZHVvdG9uZURhcmsvaW5kZXguanM/YTM3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEdW90b25lIERhcmtcbi8vIEF1dGhvcjogU2ltdXJhaSwgYWRhcHRlZCBmcm9tIER1b1RvbmUgdGhlbWVzIGZvciBBdG9tIChodHRwOi8vc2ltdXJhaS5jb20vcHJvamVjdHMvMjAxNi8wMS8wMS9kdW90b25lLXRoZW1lcylcbi8vIENvbnZlcnNpb246IEJyYW0gZGUgSGFhbiAoaHR0cDovL2F0ZWxpZXJicmFtLmdpdGh1Yi5pby9CYXNlMlRvbmUtcHJpc20vb3V0cHV0L3ByaXNtL3ByaXNtLWJhc2UydG9uZS1ldmVuaW5nLWRhcmsuY3NzKVxuLy8gR2VuZXJhdGVkIHdpdGggQmFzZTE2IEJ1aWxkZXIgKGh0dHBzOi8vZ2l0aHViLmNvbS9iYXNlMTYtYnVpbGRlci9iYXNlMTYtYnVpbGRlcilcbnZhciB0aGVtZSA9IHtcbiAgcGxhaW46IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzJhMjczNFwiLFxuICAgIGNvbG9yOiBcIiM5YTg2ZmRcIlxuICB9LFxuICBzdHlsZXM6IFt7XG4gICAgdHlwZXM6IFtcImNvbW1lbnRcIiwgXCJwcm9sb2dcIiwgXCJkb2N0eXBlXCIsIFwiY2RhdGFcIiwgXCJwdW5jdHVhdGlvblwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiIzZjNjc4M1wiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcIm5hbWVzcGFjZVwiXSxcbiAgICBzdHlsZToge1xuICAgICAgb3BhY2l0eTogMC43XG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcInRhZ1wiLCBcIm9wZXJhdG9yXCIsIFwibnVtYmVyXCJdLFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogXCIjZTA5MTQyXCJcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogW1wicHJvcGVydHlcIiwgXCJmdW5jdGlvblwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiIzlhODZmZFwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcInRhZy1pZFwiLCBcInNlbGVjdG9yXCIsIFwiYXRydWxlLWlkXCJdLFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogXCIjZWVlYmZmXCJcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogW1wiYXR0ci1uYW1lXCJdLFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogXCIjYzRiOWZlXCJcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogW1wiYm9vbGVhblwiLCBcInN0cmluZ1wiLCBcImVudGl0eVwiLCBcInVybFwiLCBcImF0dHItdmFsdWVcIiwgXCJrZXl3b3JkXCIsIFwiY29udHJvbFwiLCBcImRpcmVjdGl2ZVwiLCBcInVuaXRcIiwgXCJzdGF0ZW1lbnRcIiwgXCJyZWdleFwiLCBcImF0cnVsZVwiLCBcInBsYWNlaG9sZGVyXCIsIFwidmFyaWFibGVcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiBcIiNmZmNjOTlcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJkZWxldGVkXCJdLFxuICAgIHN0eWxlOiB7XG4gICAgICB0ZXh0RGVjb3JhdGlvbkxpbmU6IFwibGluZS10aHJvdWdoXCJcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogW1wiaW5zZXJ0ZWRcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHRleHREZWNvcmF0aW9uTGluZTogXCJ1bmRlcmxpbmVcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJpdGFsaWNcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJpbXBvcnRhbnRcIiwgXCJib2xkXCJdLFxuICAgIHN0eWxlOiB7XG4gICAgICBmb250V2VpZ2h0OiBcImJvbGRcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJpbXBvcnRhbnRcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiBcIiNjNGI5ZmVcIlxuICAgIH1cbiAgfV1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRoZW1lO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prism-react-renderer/themes/duotoneDark/index.js\n"));

/***/ }),

/***/ "./node_modules/@markdoc/markdoc/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@markdoc/markdoc/dist/index.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ast\": function() { return /* binding */ ast_default; },\n/* harmony export */   \"Tag\": function() { return /* binding */ Tag; },\n/* harmony export */   \"Tokenizer\": function() { return /* binding */ Tokenizer; },\n/* harmony export */   \"__EXPERIMENTAL__format\": function() { return /* binding */ format; },\n/* harmony export */   \"createElement\": function() { return /* binding */ createElement; },\n/* harmony export */   \"default\": function() { return /* binding */ Markdoc; },\n/* harmony export */   \"functions\": function() { return /* binding */ functions_default; },\n/* harmony export */   \"globalAttributes\": function() { return /* binding */ globalAttributes; },\n/* harmony export */   \"nodes\": function() { return /* binding */ schema_exports; },\n/* harmony export */   \"parse\": function() { return /* binding */ parse3; },\n/* harmony export */   \"parseTags\": function() { return /* binding */ parseTags; },\n/* harmony export */   \"renderers\": function() { return /* binding */ renderers_default; },\n/* harmony export */   \"resolve\": function() { return /* binding */ resolve2; },\n/* harmony export */   \"tags\": function() { return /* binding */ tags_default; },\n/* harmony export */   \"transform\": function() { return /* binding */ transform2; },\n/* harmony export */   \"transformer\": function() { return /* binding */ transformer_default; },\n/* harmony export */   \"transforms\": function() { return /* binding */ transforms_default; },\n/* harmony export */   \"truthy\": function() { return /* binding */ truthy; },\n/* harmony export */   \"validate\": function() { return /* binding */ validate2; },\n/* harmony export */   \"validator\": function() { return /* binding */ validate; }\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module, desc) => {\n  if (module && typeof module === \"object\" || typeof module === \"function\") {\n    for (let key of __getOwnPropNames(module))\n      if (!__hasOwnProp.call(target, key) && key !== \"default\")\n        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toModule = (module) => {\n  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, \"default\", module && module.__esModule && \"default\" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);\n};\n\n// src/grammar/tag.js\nvar require_tag = __commonJS({\n  \"src/grammar/tag.js\"(exports, module) {\n    \"use strict\";\n    function peg$subclass(child, parent) {\n      function C() {\n        this.constructor = child;\n      }\n      C.prototype = parent.prototype;\n      child.prototype = new C();\n    }\n    function peg$SyntaxError(message, expected, found, location) {\n      this.message = message;\n      this.expected = expected;\n      this.found = found;\n      this.location = location;\n      this.name = \"SyntaxError\";\n      if (typeof Error.captureStackTrace === \"function\") {\n        Error.captureStackTrace(this, peg$SyntaxError);\n      }\n    }\n    peg$subclass(peg$SyntaxError, Error);\n    peg$SyntaxError.buildMessage = function(expected, found, location) {\n      var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return '\"' + literalEscape(expectation.text) + '\"';\n        },\n        class: function(expectation) {\n          var escapedParts = expectation.parts.map(function(part) {\n            return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n          });\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n        any: function() {\n          return \"any character\";\n        },\n        end: function() {\n          return \"end of input\";\n        },\n        other: function(expectation) {\n          return expectation.description;\n        },\n        not: function(expectation) {\n          return \"not \" + describeExpectation(expectation.expected);\n        }\n      };\n      function hex(ch) {\n        return ch.charCodeAt(0).toString(16).toUpperCase();\n      }\n      function literalEscape(s2) {\n        return s2.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function classEscape(s2) {\n        return s2.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n          return \"\\\\x0\" + hex(ch);\n        }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n          return \"\\\\x\" + hex(ch);\n        });\n      }\n      function describeExpectation(expectation) {\n        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n      }\n      function describeExpected(expected2) {\n        var descriptions = expected2.map(describeExpectation);\n        var i, j;\n        descriptions.sort();\n        if (descriptions.length > 0) {\n          for (i = 1, j = 1; i < descriptions.length; i++) {\n            if (descriptions[i - 1] !== descriptions[i]) {\n              descriptions[j] = descriptions[i];\n              j++;\n            }\n          }\n          descriptions.length = j;\n        }\n        switch (descriptions.length) {\n          case 1:\n            return descriptions[0];\n          case 2:\n            return descriptions[0] + \" or \" + descriptions[1];\n          default:\n            return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n        }\n      }\n      function describeFound(found2) {\n        return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n      }\n      return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    function peg$parse(input, options) {\n      options = options !== void 0 ? options : {};\n      var peg$FAILED = {};\n      var peg$startRuleFunctions = { Top: peg$parseTop };\n      var peg$startRuleFunction = peg$parseTop;\n      var peg$c0 = \"/\";\n      var peg$c1 = \".\";\n      var peg$c2 = \"#\";\n      var peg$c3 = \"=\";\n      var peg$c4 = \"(\";\n      var peg$c5 = \")\";\n      var peg$c6 = \",\";\n      var peg$c7 = \"[\";\n      var peg$c8 = \"]\";\n      var peg$c9 = \"null\";\n      var peg$c10 = \"true\";\n      var peg$c11 = \"false\";\n      var peg$c12 = \"{\";\n      var peg$c13 = \"}\";\n      var peg$c14 = \":\";\n      var peg$c15 = \"-\";\n      var peg$c16 = '\"';\n      var peg$c17 = \"\\\\\";\n      var peg$r0 = /^[$@]/;\n      var peg$r1 = /^[0-9]/;\n      var peg$r2 = /^[^\\0-\\x1F\"\\\\]/;\n      var peg$r3 = /^[a-zA-Z0-9_\\-]/;\n      var peg$r4 = /^[ \\n\\t]/;\n      var peg$e0 = peg$literalExpectation(\"/\", false);\n      var peg$e1 = peg$otherExpectation(\"tag name\");\n      var peg$e2 = peg$otherExpectation(\"class\");\n      var peg$e3 = peg$otherExpectation(\"id\");\n      var peg$e4 = peg$literalExpectation(\"=\", false);\n      var peg$e5 = peg$literalExpectation(\"(\", false);\n      var peg$e6 = peg$literalExpectation(\")\", false);\n      var peg$e7 = peg$literalExpectation(\",\", false);\n      var peg$e8 = peg$otherExpectation(\"variable\");\n      var peg$e9 = peg$otherExpectation(\"null\");\n      var peg$e10 = peg$otherExpectation(\"boolean\");\n      var peg$e11 = peg$literalExpectation(\"[\", false);\n      var peg$e12 = peg$literalExpectation(\"]\", false);\n      var peg$e13 = peg$literalExpectation(\"{\", false);\n      var peg$e14 = peg$literalExpectation(\"}\", false);\n      var peg$e15 = peg$literalExpectation(\":\", false);\n      var peg$e16 = peg$otherExpectation(\"number\");\n      var peg$e17 = peg$otherExpectation(\"string\");\n      var peg$e18 = peg$otherExpectation(\"identifier\");\n      var peg$e19 = peg$otherExpectation(\"whitespace\");\n      var peg$f0 = function(variable) {\n        return { type: \"variable\", meta: { variable } };\n      };\n      var peg$f1 = function(attributes) {\n        return { type: \"annotation\", meta: { attributes } };\n      };\n      var peg$f2 = function(tag, value) {\n        return value;\n      };\n      var peg$f3 = function(tag, primary, attributes, close) {\n        if (primary) {\n          attributes = attributes || [];\n          attributes.unshift({\n            type: \"attribute\",\n            name: \"primary\",\n            value: primary\n          });\n        }\n        const [type, nesting] = close ? [\"tag\", 0] : [\"tag_open\", 1];\n        return { type, nesting, meta: { tag, attributes } };\n      };\n      var peg$f4 = function(tag) {\n        return { type: \"tag_close\", nesting: -1, meta: { tag } };\n      };\n      var peg$f5 = function(head, tail) {\n        return !head ? [] : [head, ...tail];\n      };\n      var peg$f6 = function(item2) {\n        return item2;\n      };\n      var peg$f7 = function(ids) {\n        return ids;\n      };\n      var peg$f8 = function(classes) {\n        return classes;\n      };\n      var peg$f9 = function(attribute) {\n        return attribute;\n      };\n      var peg$f10 = function(name) {\n        return { type: \"class\", name, value: true };\n      };\n      var peg$f11 = function(value) {\n        return { type: \"attribute\", name: \"id\", value };\n      };\n      var peg$f12 = function(name, value) {\n        return { type: \"attribute\", name, value };\n      };\n      var peg$f13 = function(name, head, tail) {\n        return head ? [head, ...tail] : [];\n      };\n      var peg$f14 = function(name, params) {\n        let parameters = {};\n        for (let [index, { name: name2, value }] of params.entries())\n          parameters[name2 || index] = value;\n        return new Function3(name, parameters);\n      };\n      var peg$f15 = function(name) {\n        return name;\n      };\n      var peg$f16 = function(name, value) {\n        return { name, value };\n      };\n      var peg$f17 = function(value) {\n        return value;\n      };\n      var peg$f18 = function(prefix, head, tail) {\n        if (prefix === \"@\")\n          return [head, ...tail];\n        return new Variable2([head, ...tail]);\n      };\n      var peg$f19 = function() {\n        return null;\n      };\n      var peg$f20 = function() {\n        return true;\n      };\n      var peg$f21 = function() {\n        return false;\n      };\n      var peg$f22 = function(head, tail) {\n        return [head, ...tail];\n      };\n      var peg$f23 = function(value) {\n        return value || [];\n      };\n      var peg$f24 = function(head, tail) {\n        return Object.assign(head, ...tail);\n      };\n      var peg$f25 = function(value) {\n        return value || {};\n      };\n      var peg$f26 = function(key, value) {\n        return key === \"$$mdtype\" ? {} : { [key]: value };\n      };\n      var peg$f27 = function() {\n        return parseFloat(text2());\n      };\n      var peg$f28 = function(value) {\n        return value.join(\"\");\n      };\n      var peg$f29 = function(sequence) {\n        return sequence;\n      };\n      var peg$currPos = 0;\n      var peg$savedPos = 0;\n      var peg$posDetailsCache = [{ line: 1, column: 1 }];\n      var peg$expected = [];\n      var peg$silentFails = 0;\n      var peg$result;\n      if (\"startRule\" in options) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n          throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n      }\n      function text2() {\n        return input.substring(peg$savedPos, peg$currPos);\n      }\n      function offset() {\n        return peg$savedPos;\n      }\n      function range() {\n        return [peg$savedPos, peg$currPos];\n      }\n      function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n      }\n      function expected(description, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);\n      }\n      function error2(message, location2) {\n        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location2);\n      }\n      function peg$literalExpectation(text3, ignoreCase) {\n        return { type: \"literal\", text: text3, ignoreCase };\n      }\n      function peg$classExpectation(parts, inverted, ignoreCase) {\n        return {\n          type: \"class\",\n          parts,\n          inverted,\n          ignoreCase\n        };\n      }\n      function peg$anyExpectation() {\n        return { type: \"any\" };\n      }\n      function peg$endExpectation() {\n        return { type: \"end\" };\n      }\n      function peg$otherExpectation(description) {\n        return { type: \"other\", description };\n      }\n      function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n          return details;\n        } else {\n          p = pos - 1;\n          while (!peg$posDetailsCache[p]) {\n            p--;\n          }\n          details = peg$posDetailsCache[p];\n          details = {\n            line: details.line,\n            column: details.column\n          };\n          while (p < pos) {\n            if (input.charCodeAt(p) === 10) {\n              details.line++;\n              details.column = 1;\n            } else {\n              details.column++;\n            }\n            p++;\n          }\n          peg$posDetailsCache[pos] = details;\n          return details;\n        }\n      }\n      var peg$VALIDFILENAME = typeof options.filename === \"string\" && options.filename.length > 0;\n      function peg$computeLocation(startPos, endPos) {\n        var loc = {};\n        if (peg$VALIDFILENAME)\n          loc.filename = options.filename;\n        var startPosDetails = peg$computePosDetails(startPos);\n        loc.start = {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        };\n        var endPosDetails = peg$computePosDetails(endPos);\n        loc.end = {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        };\n        return loc;\n      }\n      function peg$begin() {\n        peg$expected.push({ pos: peg$currPos, variants: [] });\n      }\n      function peg$expect(expected2) {\n        var top = peg$expected[peg$expected.length - 1];\n        if (peg$currPos < top.pos) {\n          return;\n        }\n        if (peg$currPos > top.pos) {\n          top.pos = peg$currPos;\n          top.variants = [];\n        }\n        top.variants.push(expected2);\n      }\n      function peg$end(invert) {\n        var expected2 = peg$expected.pop();\n        var top = peg$expected[peg$expected.length - 1];\n        var variants = expected2.variants;\n        if (top.pos !== expected2.pos) {\n          return;\n        }\n        if (invert) {\n          variants = variants.map(function(e) {\n            return e.type === \"not\" ? e.expected : { type: \"not\", expected: e };\n          });\n        }\n        Array.prototype.push.apply(top.variants, variants);\n      }\n      function peg$buildSimpleError(message, location2) {\n        return new peg$SyntaxError(message, null, null, location2);\n      }\n      function peg$buildStructuredError(expected2, found, location2) {\n        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found, location2), expected2, found, location2);\n      }\n      function peg$buildError() {\n        var expected2 = peg$expected[0];\n        var failPos = expected2.pos;\n        return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));\n      }\n      function peg$parseTop() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$parseTopLevelValue();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseAnnotation();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseTagOpen();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseTagClose();\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parseTopLevelValue() {\n        var s0, s1;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseVariable();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseFunction();\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f0(s1);\n        }\n        s0 = s1;\n        return s0;\n      }\n      function peg$parseAnnotation() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseTagAttributes();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f1(s1);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagOpen() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseTagName();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          s3 = peg$currPos;\n          s4 = peg$parseValue();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            peg$savedPos = s3;\n            s3 = peg$f2(s1, s4);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = peg$parseTagAttributes();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          s5 = [];\n          s6 = peg$parse_();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parse_();\n          }\n          rule$expects(peg$e0);\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s6 = peg$c0;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n          }\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f3(s1, s3, s4, s6);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagClose() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        rule$expects(peg$e0);\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s1 = peg$c0;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseTagName();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f4(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagName() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e1);\n        peg$silentFails++;\n        s0 = peg$parseIdentifier();\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseTagAttributes() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseTagAttributesItem();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseTagAttributesTail();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseTagAttributesTail();\n          }\n          peg$savedPos = s0;\n          s0 = peg$f5(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagAttributesTail() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parse_();\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseTagAttributesItem();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTagAttributesItem() {\n        var s0, s1;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseTagShortcutId();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f7(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseTagShortcutClass();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f8(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseTagAttribute();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$f9(s1);\n            }\n            s0 = s1;\n          }\n        }\n        return s0;\n      }\n      function peg$parseTagShortcutClass() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e2);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s1 = peg$c1;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseIdentifier();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f10(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseTagShortcutId() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e3);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s1 = peg$c2;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseIdentifier();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f11(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseTagAttribute() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseIdentifier();\n        if (s1 !== peg$FAILED) {\n          rule$expects(peg$e4);\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c3;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseValue();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f12(s1, s3);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseFunction() {\n        var s0, s1, s2, s3, s4, s5, s6, s7;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseIdentifier();\n        if (s1 !== peg$FAILED) {\n          rule$expects(peg$e5);\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s2 = peg$c4;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parse_();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parse_();\n            }\n            s4 = peg$currPos;\n            s5 = peg$parseFunctionParameter();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            s6 = [];\n            s7 = peg$parseFunctionParameterTail();\n            while (s7 !== peg$FAILED) {\n              s6.push(s7);\n              s7 = peg$parseFunctionParameterTail();\n            }\n            peg$savedPos = s4;\n            s4 = peg$f13(s1, s5, s6);\n            rule$expects(peg$e6);\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c5;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f14(s1, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseFunctionParameter() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseIdentifier();\n        if (s2 !== peg$FAILED) {\n          rule$expects(peg$e4);\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c3;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s1 = peg$f15(s2);\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = peg$parseValue();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s0 = peg$f16(s1, s2);\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseFunctionParameterTail() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        rule$expects(peg$e7);\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c6;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parse_();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n          s4 = peg$parseFunctionParameter();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17(s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseTrailingComma() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        rule$expects(peg$e7);\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c6;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = null;\n        }\n        return s0;\n      }\n      function peg$parseVariable() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e8);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (peg$r0.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseIdentifier();\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parseVariableTail();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseVariableTail();\n            }\n            peg$savedPos = s0;\n            s0 = peg$f18(s1, s2, s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseVariableTail() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s1 = peg$c1;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseIdentifier();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f15(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 91) {\n            s1 = peg$c7;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseValueNumber();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseValueString();\n            }\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s3 = peg$c8;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s0 = peg$f17(s2);\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n        return s0;\n      }\n      function peg$parseValue() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$parseValueNull();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseValueBoolean();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseValueString();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseValueNumber();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseValueArray();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseValueHash();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseFunction();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseVariable();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return s0;\n      }\n      function peg$parseValueNull() {\n        var s0, s1;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e9);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4) === peg$c9) {\n          s1 = peg$c9;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f19();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseValueBoolean() {\n        var s0, s1;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e10);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4) === peg$c10) {\n          s1 = peg$c10;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$f20();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 5) === peg$c11) {\n            s1 = peg$c11;\n            peg$currPos += 5;\n          } else {\n            s1 = peg$FAILED;\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$f21();\n          }\n          s0 = s1;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseValueArray() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        rule$expects(peg$e11);\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s1 = peg$c7;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          s3 = peg$currPos;\n          s4 = peg$parseValue();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parseValueArrayTail();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parseValueArrayTail();\n            }\n            s6 = peg$parseTrailingComma();\n            peg$savedPos = s3;\n            s3 = peg$f22(s4, s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          rule$expects(peg$e12);\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s5 = peg$c8;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f23(s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueArrayTail() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        rule$expects(peg$e7);\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c6;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parse_();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n          s4 = peg$parseValue();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f17(s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueHash() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        rule$expects(peg$e13);\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s1 = peg$c12;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parse_();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parse_();\n          }\n          s3 = peg$currPos;\n          s4 = peg$parseValueHashItem();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parseValueHashTail();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parseValueHashTail();\n            }\n            s6 = peg$parseTrailingComma();\n            peg$savedPos = s3;\n            s3 = peg$f24(s4, s5);\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          s4 = [];\n          s5 = peg$parse_();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parse_();\n          }\n          rule$expects(peg$e14);\n          if (input.charCodeAt(peg$currPos) === 125) {\n            s5 = peg$c13;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f25(s3);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueHashTail() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parse_();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parse_();\n        }\n        rule$expects(peg$e7);\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c6;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parse_();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parse_();\n          }\n          s4 = peg$parseValueHashItem();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f6(s4);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueHashItem() {\n        var s0, s1, s2, s3, s4;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        s1 = peg$parseIdentifier();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseValueString();\n        }\n        if (s1 !== peg$FAILED) {\n          rule$expects(peg$e15);\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s2 = peg$c14;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parse_();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parse_();\n            }\n            s4 = peg$parseValue();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s0 = peg$f26(s1, s4);\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseValueNumber() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e16);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c15;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        s2 = [];\n        if (peg$r1.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s4 = peg$c1;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$r1.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$r1.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          peg$savedPos = s0;\n          s0 = peg$f27();\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseValueString() {\n        var s0, s1, s2, s3;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e17);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s1 = peg$c16;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseValueStringChars();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseValueStringChars();\n          }\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s3 = peg$c16;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f28(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parseValueStringChars() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        if (peg$r2.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseValueStringEscapes();\n        }\n        return s0;\n      }\n      function peg$parseValueStringEscapes() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s1 = peg$c17;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s2 = peg$c16;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 92) {\n              s2 = peg$c17;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s0 = peg$f29(s2);\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        return s0;\n      }\n      function peg$parseIdentifier() {\n        var s0, s1, s2;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e18);\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$r3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$r3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      function peg$parse_() {\n        var s0;\n        var rule$expects = function(expected2) {\n          if (peg$silentFails === 0)\n            peg$expect(expected2);\n        };\n        rule$expects(peg$e19);\n        peg$silentFails++;\n        if (peg$r4.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        return s0;\n      }\n      const { Variable: Variable2, Function: Function3 } = options;\n      peg$begin();\n      peg$result = peg$startRuleFunction();\n      if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n      } else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n          peg$expect(peg$endExpectation());\n        }\n        throw peg$buildError();\n      }\n    }\n    module.exports = {\n      SyntaxError: peg$SyntaxError,\n      parse: peg$parse\n    };\n  }\n});\n\n// node_modules/entities/lib/maps/entities.json\nvar require_entities = __commonJS({\n  \"node_modules/entities/lib/maps/entities.json\"(exports, module) {\n    module.exports = { Aacute: \"\\xC1\", aacute: \"\\xE1\", Abreve: \"\\u0102\", abreve: \"\\u0103\", ac: \"\\u223E\", acd: \"\\u223F\", acE: \"\\u223E\\u0333\", Acirc: \"\\xC2\", acirc: \"\\xE2\", acute: \"\\xB4\", Acy: \"\\u0410\", acy: \"\\u0430\", AElig: \"\\xC6\", aelig: \"\\xE6\", af: \"\\u2061\", Afr: \"\\u{1D504}\", afr: \"\\u{1D51E}\", Agrave: \"\\xC0\", agrave: \"\\xE0\", alefsym: \"\\u2135\", aleph: \"\\u2135\", Alpha: \"\\u0391\", alpha: \"\\u03B1\", Amacr: \"\\u0100\", amacr: \"\\u0101\", amalg: \"\\u2A3F\", amp: \"&\", AMP: \"&\", andand: \"\\u2A55\", And: \"\\u2A53\", and: \"\\u2227\", andd: \"\\u2A5C\", andslope: \"\\u2A58\", andv: \"\\u2A5A\", ang: \"\\u2220\", ange: \"\\u29A4\", angle: \"\\u2220\", angmsdaa: \"\\u29A8\", angmsdab: \"\\u29A9\", angmsdac: \"\\u29AA\", angmsdad: \"\\u29AB\", angmsdae: \"\\u29AC\", angmsdaf: \"\\u29AD\", angmsdag: \"\\u29AE\", angmsdah: \"\\u29AF\", angmsd: \"\\u2221\", angrt: \"\\u221F\", angrtvb: \"\\u22BE\", angrtvbd: \"\\u299D\", angsph: \"\\u2222\", angst: \"\\xC5\", angzarr: \"\\u237C\", Aogon: \"\\u0104\", aogon: \"\\u0105\", Aopf: \"\\u{1D538}\", aopf: \"\\u{1D552}\", apacir: \"\\u2A6F\", ap: \"\\u2248\", apE: \"\\u2A70\", ape: \"\\u224A\", apid: \"\\u224B\", apos: \"'\", ApplyFunction: \"\\u2061\", approx: \"\\u2248\", approxeq: \"\\u224A\", Aring: \"\\xC5\", aring: \"\\xE5\", Ascr: \"\\u{1D49C}\", ascr: \"\\u{1D4B6}\", Assign: \"\\u2254\", ast: \"*\", asymp: \"\\u2248\", asympeq: \"\\u224D\", Atilde: \"\\xC3\", atilde: \"\\xE3\", Auml: \"\\xC4\", auml: \"\\xE4\", awconint: \"\\u2233\", awint: \"\\u2A11\", backcong: \"\\u224C\", backepsilon: \"\\u03F6\", backprime: \"\\u2035\", backsim: \"\\u223D\", backsimeq: \"\\u22CD\", Backslash: \"\\u2216\", Barv: \"\\u2AE7\", barvee: \"\\u22BD\", barwed: \"\\u2305\", Barwed: \"\\u2306\", barwedge: \"\\u2305\", bbrk: \"\\u23B5\", bbrktbrk: \"\\u23B6\", bcong: \"\\u224C\", Bcy: \"\\u0411\", bcy: \"\\u0431\", bdquo: \"\\u201E\", becaus: \"\\u2235\", because: \"\\u2235\", Because: \"\\u2235\", bemptyv: \"\\u29B0\", bepsi: \"\\u03F6\", bernou: \"\\u212C\", Bernoullis: \"\\u212C\", Beta: \"\\u0392\", beta: \"\\u03B2\", beth: \"\\u2136\", between: \"\\u226C\", Bfr: \"\\u{1D505}\", bfr: \"\\u{1D51F}\", bigcap: \"\\u22C2\", bigcirc: \"\\u25EF\", bigcup: \"\\u22C3\", bigodot: \"\\u2A00\", bigoplus: \"\\u2A01\", bigotimes: \"\\u2A02\", bigsqcup: \"\\u2A06\", bigstar: \"\\u2605\", bigtriangledown: \"\\u25BD\", bigtriangleup: \"\\u25B3\", biguplus: \"\\u2A04\", bigvee: \"\\u22C1\", bigwedge: \"\\u22C0\", bkarow: \"\\u290D\", blacklozenge: \"\\u29EB\", blacksquare: \"\\u25AA\", blacktriangle: \"\\u25B4\", blacktriangledown: \"\\u25BE\", blacktriangleleft: \"\\u25C2\", blacktriangleright: \"\\u25B8\", blank: \"\\u2423\", blk12: \"\\u2592\", blk14: \"\\u2591\", blk34: \"\\u2593\", block: \"\\u2588\", bne: \"=\\u20E5\", bnequiv: \"\\u2261\\u20E5\", bNot: \"\\u2AED\", bnot: \"\\u2310\", Bopf: \"\\u{1D539}\", bopf: \"\\u{1D553}\", bot: \"\\u22A5\", bottom: \"\\u22A5\", bowtie: \"\\u22C8\", boxbox: \"\\u29C9\", boxdl: \"\\u2510\", boxdL: \"\\u2555\", boxDl: \"\\u2556\", boxDL: \"\\u2557\", boxdr: \"\\u250C\", boxdR: \"\\u2552\", boxDr: \"\\u2553\", boxDR: \"\\u2554\", boxh: \"\\u2500\", boxH: \"\\u2550\", boxhd: \"\\u252C\", boxHd: \"\\u2564\", boxhD: \"\\u2565\", boxHD: \"\\u2566\", boxhu: \"\\u2534\", boxHu: \"\\u2567\", boxhU: \"\\u2568\", boxHU: \"\\u2569\", boxminus: \"\\u229F\", boxplus: \"\\u229E\", boxtimes: \"\\u22A0\", boxul: \"\\u2518\", boxuL: \"\\u255B\", boxUl: \"\\u255C\", boxUL: \"\\u255D\", boxur: \"\\u2514\", boxuR: \"\\u2558\", boxUr: \"\\u2559\", boxUR: \"\\u255A\", boxv: \"\\u2502\", boxV: \"\\u2551\", boxvh: \"\\u253C\", boxvH: \"\\u256A\", boxVh: \"\\u256B\", boxVH: \"\\u256C\", boxvl: \"\\u2524\", boxvL: \"\\u2561\", boxVl: \"\\u2562\", boxVL: \"\\u2563\", boxvr: \"\\u251C\", boxvR: \"\\u255E\", boxVr: \"\\u255F\", boxVR: \"\\u2560\", bprime: \"\\u2035\", breve: \"\\u02D8\", Breve: \"\\u02D8\", brvbar: \"\\xA6\", bscr: \"\\u{1D4B7}\", Bscr: \"\\u212C\", bsemi: \"\\u204F\", bsim: \"\\u223D\", bsime: \"\\u22CD\", bsolb: \"\\u29C5\", bsol: \"\\\\\", bsolhsub: \"\\u27C8\", bull: \"\\u2022\", bullet: \"\\u2022\", bump: \"\\u224E\", bumpE: \"\\u2AAE\", bumpe: \"\\u224F\", Bumpeq: \"\\u224E\", bumpeq: \"\\u224F\", Cacute: \"\\u0106\", cacute: \"\\u0107\", capand: \"\\u2A44\", capbrcup: \"\\u2A49\", capcap: \"\\u2A4B\", cap: \"\\u2229\", Cap: \"\\u22D2\", capcup: \"\\u2A47\", capdot: \"\\u2A40\", CapitalDifferentialD: \"\\u2145\", caps: \"\\u2229\\uFE00\", caret: \"\\u2041\", caron: \"\\u02C7\", Cayleys: \"\\u212D\", ccaps: \"\\u2A4D\", Ccaron: \"\\u010C\", ccaron: \"\\u010D\", Ccedil: \"\\xC7\", ccedil: \"\\xE7\", Ccirc: \"\\u0108\", ccirc: \"\\u0109\", Cconint: \"\\u2230\", ccups: \"\\u2A4C\", ccupssm: \"\\u2A50\", Cdot: \"\\u010A\", cdot: \"\\u010B\", cedil: \"\\xB8\", Cedilla: \"\\xB8\", cemptyv: \"\\u29B2\", cent: \"\\xA2\", centerdot: \"\\xB7\", CenterDot: \"\\xB7\", cfr: \"\\u{1D520}\", Cfr: \"\\u212D\", CHcy: \"\\u0427\", chcy: \"\\u0447\", check: \"\\u2713\", checkmark: \"\\u2713\", Chi: \"\\u03A7\", chi: \"\\u03C7\", circ: \"\\u02C6\", circeq: \"\\u2257\", circlearrowleft: \"\\u21BA\", circlearrowright: \"\\u21BB\", circledast: \"\\u229B\", circledcirc: \"\\u229A\", circleddash: \"\\u229D\", CircleDot: \"\\u2299\", circledR: \"\\xAE\", circledS: \"\\u24C8\", CircleMinus: \"\\u2296\", CirclePlus: \"\\u2295\", CircleTimes: \"\\u2297\", cir: \"\\u25CB\", cirE: \"\\u29C3\", cire: \"\\u2257\", cirfnint: \"\\u2A10\", cirmid: \"\\u2AEF\", cirscir: \"\\u29C2\", ClockwiseContourIntegral: \"\\u2232\", CloseCurlyDoubleQuote: \"\\u201D\", CloseCurlyQuote: \"\\u2019\", clubs: \"\\u2663\", clubsuit: \"\\u2663\", colon: \":\", Colon: \"\\u2237\", Colone: \"\\u2A74\", colone: \"\\u2254\", coloneq: \"\\u2254\", comma: \",\", commat: \"@\", comp: \"\\u2201\", compfn: \"\\u2218\", complement: \"\\u2201\", complexes: \"\\u2102\", cong: \"\\u2245\", congdot: \"\\u2A6D\", Congruent: \"\\u2261\", conint: \"\\u222E\", Conint: \"\\u222F\", ContourIntegral: \"\\u222E\", copf: \"\\u{1D554}\", Copf: \"\\u2102\", coprod: \"\\u2210\", Coproduct: \"\\u2210\", copy: \"\\xA9\", COPY: \"\\xA9\", copysr: \"\\u2117\", CounterClockwiseContourIntegral: \"\\u2233\", crarr: \"\\u21B5\", cross: \"\\u2717\", Cross: \"\\u2A2F\", Cscr: \"\\u{1D49E}\", cscr: \"\\u{1D4B8}\", csub: \"\\u2ACF\", csube: \"\\u2AD1\", csup: \"\\u2AD0\", csupe: \"\\u2AD2\", ctdot: \"\\u22EF\", cudarrl: \"\\u2938\", cudarrr: \"\\u2935\", cuepr: \"\\u22DE\", cuesc: \"\\u22DF\", cularr: \"\\u21B6\", cularrp: \"\\u293D\", cupbrcap: \"\\u2A48\", cupcap: \"\\u2A46\", CupCap: \"\\u224D\", cup: \"\\u222A\", Cup: \"\\u22D3\", cupcup: \"\\u2A4A\", cupdot: \"\\u228D\", cupor: \"\\u2A45\", cups: \"\\u222A\\uFE00\", curarr: \"\\u21B7\", curarrm: \"\\u293C\", curlyeqprec: \"\\u22DE\", curlyeqsucc: \"\\u22DF\", curlyvee: \"\\u22CE\", curlywedge: \"\\u22CF\", curren: \"\\xA4\", curvearrowleft: \"\\u21B6\", curvearrowright: \"\\u21B7\", cuvee: \"\\u22CE\", cuwed: \"\\u22CF\", cwconint: \"\\u2232\", cwint: \"\\u2231\", cylcty: \"\\u232D\", dagger: \"\\u2020\", Dagger: \"\\u2021\", daleth: \"\\u2138\", darr: \"\\u2193\", Darr: \"\\u21A1\", dArr: \"\\u21D3\", dash: \"\\u2010\", Dashv: \"\\u2AE4\", dashv: \"\\u22A3\", dbkarow: \"\\u290F\", dblac: \"\\u02DD\", Dcaron: \"\\u010E\", dcaron: \"\\u010F\", Dcy: \"\\u0414\", dcy: \"\\u0434\", ddagger: \"\\u2021\", ddarr: \"\\u21CA\", DD: \"\\u2145\", dd: \"\\u2146\", DDotrahd: \"\\u2911\", ddotseq: \"\\u2A77\", deg: \"\\xB0\", Del: \"\\u2207\", Delta: \"\\u0394\", delta: \"\\u03B4\", demptyv: \"\\u29B1\", dfisht: \"\\u297F\", Dfr: \"\\u{1D507}\", dfr: \"\\u{1D521}\", dHar: \"\\u2965\", dharl: \"\\u21C3\", dharr: \"\\u21C2\", DiacriticalAcute: \"\\xB4\", DiacriticalDot: \"\\u02D9\", DiacriticalDoubleAcute: \"\\u02DD\", DiacriticalGrave: \"`\", DiacriticalTilde: \"\\u02DC\", diam: \"\\u22C4\", diamond: \"\\u22C4\", Diamond: \"\\u22C4\", diamondsuit: \"\\u2666\", diams: \"\\u2666\", die: \"\\xA8\", DifferentialD: \"\\u2146\", digamma: \"\\u03DD\", disin: \"\\u22F2\", div: \"\\xF7\", divide: \"\\xF7\", divideontimes: \"\\u22C7\", divonx: \"\\u22C7\", DJcy: \"\\u0402\", djcy: \"\\u0452\", dlcorn: \"\\u231E\", dlcrop: \"\\u230D\", dollar: \"$\", Dopf: \"\\u{1D53B}\", dopf: \"\\u{1D555}\", Dot: \"\\xA8\", dot: \"\\u02D9\", DotDot: \"\\u20DC\", doteq: \"\\u2250\", doteqdot: \"\\u2251\", DotEqual: \"\\u2250\", dotminus: \"\\u2238\", dotplus: \"\\u2214\", dotsquare: \"\\u22A1\", doublebarwedge: \"\\u2306\", DoubleContourIntegral: \"\\u222F\", DoubleDot: \"\\xA8\", DoubleDownArrow: \"\\u21D3\", DoubleLeftArrow: \"\\u21D0\", DoubleLeftRightArrow: \"\\u21D4\", DoubleLeftTee: \"\\u2AE4\", DoubleLongLeftArrow: \"\\u27F8\", DoubleLongLeftRightArrow: \"\\u27FA\", DoubleLongRightArrow: \"\\u27F9\", DoubleRightArrow: \"\\u21D2\", DoubleRightTee: \"\\u22A8\", DoubleUpArrow: \"\\u21D1\", DoubleUpDownArrow: \"\\u21D5\", DoubleVerticalBar: \"\\u2225\", DownArrowBar: \"\\u2913\", downarrow: \"\\u2193\", DownArrow: \"\\u2193\", Downarrow: \"\\u21D3\", DownArrowUpArrow: \"\\u21F5\", DownBreve: \"\\u0311\", downdownarrows: \"\\u21CA\", downharpoonleft: \"\\u21C3\", downharpoonright: \"\\u21C2\", DownLeftRightVector: \"\\u2950\", DownLeftTeeVector: \"\\u295E\", DownLeftVectorBar: \"\\u2956\", DownLeftVector: \"\\u21BD\", DownRightTeeVector: \"\\u295F\", DownRightVectorBar: \"\\u2957\", DownRightVector: \"\\u21C1\", DownTeeArrow: \"\\u21A7\", DownTee: \"\\u22A4\", drbkarow: \"\\u2910\", drcorn: \"\\u231F\", drcrop: \"\\u230C\", Dscr: \"\\u{1D49F}\", dscr: \"\\u{1D4B9}\", DScy: \"\\u0405\", dscy: \"\\u0455\", dsol: \"\\u29F6\", Dstrok: \"\\u0110\", dstrok: \"\\u0111\", dtdot: \"\\u22F1\", dtri: \"\\u25BF\", dtrif: \"\\u25BE\", duarr: \"\\u21F5\", duhar: \"\\u296F\", dwangle: \"\\u29A6\", DZcy: \"\\u040F\", dzcy: \"\\u045F\", dzigrarr: \"\\u27FF\", Eacute: \"\\xC9\", eacute: \"\\xE9\", easter: \"\\u2A6E\", Ecaron: \"\\u011A\", ecaron: \"\\u011B\", Ecirc: \"\\xCA\", ecirc: \"\\xEA\", ecir: \"\\u2256\", ecolon: \"\\u2255\", Ecy: \"\\u042D\", ecy: \"\\u044D\", eDDot: \"\\u2A77\", Edot: \"\\u0116\", edot: \"\\u0117\", eDot: \"\\u2251\", ee: \"\\u2147\", efDot: \"\\u2252\", Efr: \"\\u{1D508}\", efr: \"\\u{1D522}\", eg: \"\\u2A9A\", Egrave: \"\\xC8\", egrave: \"\\xE8\", egs: \"\\u2A96\", egsdot: \"\\u2A98\", el: \"\\u2A99\", Element: \"\\u2208\", elinters: \"\\u23E7\", ell: \"\\u2113\", els: \"\\u2A95\", elsdot: \"\\u2A97\", Emacr: \"\\u0112\", emacr: \"\\u0113\", empty: \"\\u2205\", emptyset: \"\\u2205\", EmptySmallSquare: \"\\u25FB\", emptyv: \"\\u2205\", EmptyVerySmallSquare: \"\\u25AB\", emsp13: \"\\u2004\", emsp14: \"\\u2005\", emsp: \"\\u2003\", ENG: \"\\u014A\", eng: \"\\u014B\", ensp: \"\\u2002\", Eogon: \"\\u0118\", eogon: \"\\u0119\", Eopf: \"\\u{1D53C}\", eopf: \"\\u{1D556}\", epar: \"\\u22D5\", eparsl: \"\\u29E3\", eplus: \"\\u2A71\", epsi: \"\\u03B5\", Epsilon: \"\\u0395\", epsilon: \"\\u03B5\", epsiv: \"\\u03F5\", eqcirc: \"\\u2256\", eqcolon: \"\\u2255\", eqsim: \"\\u2242\", eqslantgtr: \"\\u2A96\", eqslantless: \"\\u2A95\", Equal: \"\\u2A75\", equals: \"=\", EqualTilde: \"\\u2242\", equest: \"\\u225F\", Equilibrium: \"\\u21CC\", equiv: \"\\u2261\", equivDD: \"\\u2A78\", eqvparsl: \"\\u29E5\", erarr: \"\\u2971\", erDot: \"\\u2253\", escr: \"\\u212F\", Escr: \"\\u2130\", esdot: \"\\u2250\", Esim: \"\\u2A73\", esim: \"\\u2242\", Eta: \"\\u0397\", eta: \"\\u03B7\", ETH: \"\\xD0\", eth: \"\\xF0\", Euml: \"\\xCB\", euml: \"\\xEB\", euro: \"\\u20AC\", excl: \"!\", exist: \"\\u2203\", Exists: \"\\u2203\", expectation: \"\\u2130\", exponentiale: \"\\u2147\", ExponentialE: \"\\u2147\", fallingdotseq: \"\\u2252\", Fcy: \"\\u0424\", fcy: \"\\u0444\", female: \"\\u2640\", ffilig: \"\\uFB03\", fflig: \"\\uFB00\", ffllig: \"\\uFB04\", Ffr: \"\\u{1D509}\", ffr: \"\\u{1D523}\", filig: \"\\uFB01\", FilledSmallSquare: \"\\u25FC\", FilledVerySmallSquare: \"\\u25AA\", fjlig: \"fj\", flat: \"\\u266D\", fllig: \"\\uFB02\", fltns: \"\\u25B1\", fnof: \"\\u0192\", Fopf: \"\\u{1D53D}\", fopf: \"\\u{1D557}\", forall: \"\\u2200\", ForAll: \"\\u2200\", fork: \"\\u22D4\", forkv: \"\\u2AD9\", Fouriertrf: \"\\u2131\", fpartint: \"\\u2A0D\", frac12: \"\\xBD\", frac13: \"\\u2153\", frac14: \"\\xBC\", frac15: \"\\u2155\", frac16: \"\\u2159\", frac18: \"\\u215B\", frac23: \"\\u2154\", frac25: \"\\u2156\", frac34: \"\\xBE\", frac35: \"\\u2157\", frac38: \"\\u215C\", frac45: \"\\u2158\", frac56: \"\\u215A\", frac58: \"\\u215D\", frac78: \"\\u215E\", frasl: \"\\u2044\", frown: \"\\u2322\", fscr: \"\\u{1D4BB}\", Fscr: \"\\u2131\", gacute: \"\\u01F5\", Gamma: \"\\u0393\", gamma: \"\\u03B3\", Gammad: \"\\u03DC\", gammad: \"\\u03DD\", gap: \"\\u2A86\", Gbreve: \"\\u011E\", gbreve: \"\\u011F\", Gcedil: \"\\u0122\", Gcirc: \"\\u011C\", gcirc: \"\\u011D\", Gcy: \"\\u0413\", gcy: \"\\u0433\", Gdot: \"\\u0120\", gdot: \"\\u0121\", ge: \"\\u2265\", gE: \"\\u2267\", gEl: \"\\u2A8C\", gel: \"\\u22DB\", geq: \"\\u2265\", geqq: \"\\u2267\", geqslant: \"\\u2A7E\", gescc: \"\\u2AA9\", ges: \"\\u2A7E\", gesdot: \"\\u2A80\", gesdoto: \"\\u2A82\", gesdotol: \"\\u2A84\", gesl: \"\\u22DB\\uFE00\", gesles: \"\\u2A94\", Gfr: \"\\u{1D50A}\", gfr: \"\\u{1D524}\", gg: \"\\u226B\", Gg: \"\\u22D9\", ggg: \"\\u22D9\", gimel: \"\\u2137\", GJcy: \"\\u0403\", gjcy: \"\\u0453\", gla: \"\\u2AA5\", gl: \"\\u2277\", glE: \"\\u2A92\", glj: \"\\u2AA4\", gnap: \"\\u2A8A\", gnapprox: \"\\u2A8A\", gne: \"\\u2A88\", gnE: \"\\u2269\", gneq: \"\\u2A88\", gneqq: \"\\u2269\", gnsim: \"\\u22E7\", Gopf: \"\\u{1D53E}\", gopf: \"\\u{1D558}\", grave: \"`\", GreaterEqual: \"\\u2265\", GreaterEqualLess: \"\\u22DB\", GreaterFullEqual: \"\\u2267\", GreaterGreater: \"\\u2AA2\", GreaterLess: \"\\u2277\", GreaterSlantEqual: \"\\u2A7E\", GreaterTilde: \"\\u2273\", Gscr: \"\\u{1D4A2}\", gscr: \"\\u210A\", gsim: \"\\u2273\", gsime: \"\\u2A8E\", gsiml: \"\\u2A90\", gtcc: \"\\u2AA7\", gtcir: \"\\u2A7A\", gt: \">\", GT: \">\", Gt: \"\\u226B\", gtdot: \"\\u22D7\", gtlPar: \"\\u2995\", gtquest: \"\\u2A7C\", gtrapprox: \"\\u2A86\", gtrarr: \"\\u2978\", gtrdot: \"\\u22D7\", gtreqless: \"\\u22DB\", gtreqqless: \"\\u2A8C\", gtrless: \"\\u2277\", gtrsim: \"\\u2273\", gvertneqq: \"\\u2269\\uFE00\", gvnE: \"\\u2269\\uFE00\", Hacek: \"\\u02C7\", hairsp: \"\\u200A\", half: \"\\xBD\", hamilt: \"\\u210B\", HARDcy: \"\\u042A\", hardcy: \"\\u044A\", harrcir: \"\\u2948\", harr: \"\\u2194\", hArr: \"\\u21D4\", harrw: \"\\u21AD\", Hat: \"^\", hbar: \"\\u210F\", Hcirc: \"\\u0124\", hcirc: \"\\u0125\", hearts: \"\\u2665\", heartsuit: \"\\u2665\", hellip: \"\\u2026\", hercon: \"\\u22B9\", hfr: \"\\u{1D525}\", Hfr: \"\\u210C\", HilbertSpace: \"\\u210B\", hksearow: \"\\u2925\", hkswarow: \"\\u2926\", hoarr: \"\\u21FF\", homtht: \"\\u223B\", hookleftarrow: \"\\u21A9\", hookrightarrow: \"\\u21AA\", hopf: \"\\u{1D559}\", Hopf: \"\\u210D\", horbar: \"\\u2015\", HorizontalLine: \"\\u2500\", hscr: \"\\u{1D4BD}\", Hscr: \"\\u210B\", hslash: \"\\u210F\", Hstrok: \"\\u0126\", hstrok: \"\\u0127\", HumpDownHump: \"\\u224E\", HumpEqual: \"\\u224F\", hybull: \"\\u2043\", hyphen: \"\\u2010\", Iacute: \"\\xCD\", iacute: \"\\xED\", ic: \"\\u2063\", Icirc: \"\\xCE\", icirc: \"\\xEE\", Icy: \"\\u0418\", icy: \"\\u0438\", Idot: \"\\u0130\", IEcy: \"\\u0415\", iecy: \"\\u0435\", iexcl: \"\\xA1\", iff: \"\\u21D4\", ifr: \"\\u{1D526}\", Ifr: \"\\u2111\", Igrave: \"\\xCC\", igrave: \"\\xEC\", ii: \"\\u2148\", iiiint: \"\\u2A0C\", iiint: \"\\u222D\", iinfin: \"\\u29DC\", iiota: \"\\u2129\", IJlig: \"\\u0132\", ijlig: \"\\u0133\", Imacr: \"\\u012A\", imacr: \"\\u012B\", image: \"\\u2111\", ImaginaryI: \"\\u2148\", imagline: \"\\u2110\", imagpart: \"\\u2111\", imath: \"\\u0131\", Im: \"\\u2111\", imof: \"\\u22B7\", imped: \"\\u01B5\", Implies: \"\\u21D2\", incare: \"\\u2105\", in: \"\\u2208\", infin: \"\\u221E\", infintie: \"\\u29DD\", inodot: \"\\u0131\", intcal: \"\\u22BA\", int: \"\\u222B\", Int: \"\\u222C\", integers: \"\\u2124\", Integral: \"\\u222B\", intercal: \"\\u22BA\", Intersection: \"\\u22C2\", intlarhk: \"\\u2A17\", intprod: \"\\u2A3C\", InvisibleComma: \"\\u2063\", InvisibleTimes: \"\\u2062\", IOcy: \"\\u0401\", iocy: \"\\u0451\", Iogon: \"\\u012E\", iogon: \"\\u012F\", Iopf: \"\\u{1D540}\", iopf: \"\\u{1D55A}\", Iota: \"\\u0399\", iota: \"\\u03B9\", iprod: \"\\u2A3C\", iquest: \"\\xBF\", iscr: \"\\u{1D4BE}\", Iscr: \"\\u2110\", isin: \"\\u2208\", isindot: \"\\u22F5\", isinE: \"\\u22F9\", isins: \"\\u22F4\", isinsv: \"\\u22F3\", isinv: \"\\u2208\", it: \"\\u2062\", Itilde: \"\\u0128\", itilde: \"\\u0129\", Iukcy: \"\\u0406\", iukcy: \"\\u0456\", Iuml: \"\\xCF\", iuml: \"\\xEF\", Jcirc: \"\\u0134\", jcirc: \"\\u0135\", Jcy: \"\\u0419\", jcy: \"\\u0439\", Jfr: \"\\u{1D50D}\", jfr: \"\\u{1D527}\", jmath: \"\\u0237\", Jopf: \"\\u{1D541}\", jopf: \"\\u{1D55B}\", Jscr: \"\\u{1D4A5}\", jscr: \"\\u{1D4BF}\", Jsercy: \"\\u0408\", jsercy: \"\\u0458\", Jukcy: \"\\u0404\", jukcy: \"\\u0454\", Kappa: \"\\u039A\", kappa: \"\\u03BA\", kappav: \"\\u03F0\", Kcedil: \"\\u0136\", kcedil: \"\\u0137\", Kcy: \"\\u041A\", kcy: \"\\u043A\", Kfr: \"\\u{1D50E}\", kfr: \"\\u{1D528}\", kgreen: \"\\u0138\", KHcy: \"\\u0425\", khcy: \"\\u0445\", KJcy: \"\\u040C\", kjcy: \"\\u045C\", Kopf: \"\\u{1D542}\", kopf: \"\\u{1D55C}\", Kscr: \"\\u{1D4A6}\", kscr: \"\\u{1D4C0}\", lAarr: \"\\u21DA\", Lacute: \"\\u0139\", lacute: \"\\u013A\", laemptyv: \"\\u29B4\", lagran: \"\\u2112\", Lambda: \"\\u039B\", lambda: \"\\u03BB\", lang: \"\\u27E8\", Lang: \"\\u27EA\", langd: \"\\u2991\", langle: \"\\u27E8\", lap: \"\\u2A85\", Laplacetrf: \"\\u2112\", laquo: \"\\xAB\", larrb: \"\\u21E4\", larrbfs: \"\\u291F\", larr: \"\\u2190\", Larr: \"\\u219E\", lArr: \"\\u21D0\", larrfs: \"\\u291D\", larrhk: \"\\u21A9\", larrlp: \"\\u21AB\", larrpl: \"\\u2939\", larrsim: \"\\u2973\", larrtl: \"\\u21A2\", latail: \"\\u2919\", lAtail: \"\\u291B\", lat: \"\\u2AAB\", late: \"\\u2AAD\", lates: \"\\u2AAD\\uFE00\", lbarr: \"\\u290C\", lBarr: \"\\u290E\", lbbrk: \"\\u2772\", lbrace: \"{\", lbrack: \"[\", lbrke: \"\\u298B\", lbrksld: \"\\u298F\", lbrkslu: \"\\u298D\", Lcaron: \"\\u013D\", lcaron: \"\\u013E\", Lcedil: \"\\u013B\", lcedil: \"\\u013C\", lceil: \"\\u2308\", lcub: \"{\", Lcy: \"\\u041B\", lcy: \"\\u043B\", ldca: \"\\u2936\", ldquo: \"\\u201C\", ldquor: \"\\u201E\", ldrdhar: \"\\u2967\", ldrushar: \"\\u294B\", ldsh: \"\\u21B2\", le: \"\\u2264\", lE: \"\\u2266\", LeftAngleBracket: \"\\u27E8\", LeftArrowBar: \"\\u21E4\", leftarrow: \"\\u2190\", LeftArrow: \"\\u2190\", Leftarrow: \"\\u21D0\", LeftArrowRightArrow: \"\\u21C6\", leftarrowtail: \"\\u21A2\", LeftCeiling: \"\\u2308\", LeftDoubleBracket: \"\\u27E6\", LeftDownTeeVector: \"\\u2961\", LeftDownVectorBar: \"\\u2959\", LeftDownVector: \"\\u21C3\", LeftFloor: \"\\u230A\", leftharpoondown: \"\\u21BD\", leftharpoonup: \"\\u21BC\", leftleftarrows: \"\\u21C7\", leftrightarrow: \"\\u2194\", LeftRightArrow: \"\\u2194\", Leftrightarrow: \"\\u21D4\", leftrightarrows: \"\\u21C6\", leftrightharpoons: \"\\u21CB\", leftrightsquigarrow: \"\\u21AD\", LeftRightVector: \"\\u294E\", LeftTeeArrow: \"\\u21A4\", LeftTee: \"\\u22A3\", LeftTeeVector: \"\\u295A\", leftthreetimes: \"\\u22CB\", LeftTriangleBar: \"\\u29CF\", LeftTriangle: \"\\u22B2\", LeftTriangleEqual: \"\\u22B4\", LeftUpDownVector: \"\\u2951\", LeftUpTeeVector: \"\\u2960\", LeftUpVectorBar: \"\\u2958\", LeftUpVector: \"\\u21BF\", LeftVectorBar: \"\\u2952\", LeftVector: \"\\u21BC\", lEg: \"\\u2A8B\", leg: \"\\u22DA\", leq: \"\\u2264\", leqq: \"\\u2266\", leqslant: \"\\u2A7D\", lescc: \"\\u2AA8\", les: \"\\u2A7D\", lesdot: \"\\u2A7F\", lesdoto: \"\\u2A81\", lesdotor: \"\\u2A83\", lesg: \"\\u22DA\\uFE00\", lesges: \"\\u2A93\", lessapprox: \"\\u2A85\", lessdot: \"\\u22D6\", lesseqgtr: \"\\u22DA\", lesseqqgtr: \"\\u2A8B\", LessEqualGreater: \"\\u22DA\", LessFullEqual: \"\\u2266\", LessGreater: \"\\u2276\", lessgtr: \"\\u2276\", LessLess: \"\\u2AA1\", lesssim: \"\\u2272\", LessSlantEqual: \"\\u2A7D\", LessTilde: \"\\u2272\", lfisht: \"\\u297C\", lfloor: \"\\u230A\", Lfr: \"\\u{1D50F}\", lfr: \"\\u{1D529}\", lg: \"\\u2276\", lgE: \"\\u2A91\", lHar: \"\\u2962\", lhard: \"\\u21BD\", lharu: \"\\u21BC\", lharul: \"\\u296A\", lhblk: \"\\u2584\", LJcy: \"\\u0409\", ljcy: \"\\u0459\", llarr: \"\\u21C7\", ll: \"\\u226A\", Ll: \"\\u22D8\", llcorner: \"\\u231E\", Lleftarrow: \"\\u21DA\", llhard: \"\\u296B\", lltri: \"\\u25FA\", Lmidot: \"\\u013F\", lmidot: \"\\u0140\", lmoustache: \"\\u23B0\", lmoust: \"\\u23B0\", lnap: \"\\u2A89\", lnapprox: \"\\u2A89\", lne: \"\\u2A87\", lnE: \"\\u2268\", lneq: \"\\u2A87\", lneqq: \"\\u2268\", lnsim: \"\\u22E6\", loang: \"\\u27EC\", loarr: \"\\u21FD\", lobrk: \"\\u27E6\", longleftarrow: \"\\u27F5\", LongLeftArrow: \"\\u27F5\", Longleftarrow: \"\\u27F8\", longleftrightarrow: \"\\u27F7\", LongLeftRightArrow: \"\\u27F7\", Longleftrightarrow: \"\\u27FA\", longmapsto: \"\\u27FC\", longrightarrow: \"\\u27F6\", LongRightArrow: \"\\u27F6\", Longrightarrow: \"\\u27F9\", looparrowleft: \"\\u21AB\", looparrowright: \"\\u21AC\", lopar: \"\\u2985\", Lopf: \"\\u{1D543}\", lopf: \"\\u{1D55D}\", loplus: \"\\u2A2D\", lotimes: \"\\u2A34\", lowast: \"\\u2217\", lowbar: \"_\", LowerLeftArrow: \"\\u2199\", LowerRightArrow: \"\\u2198\", loz: \"\\u25CA\", lozenge: \"\\u25CA\", lozf: \"\\u29EB\", lpar: \"(\", lparlt: \"\\u2993\", lrarr: \"\\u21C6\", lrcorner: \"\\u231F\", lrhar: \"\\u21CB\", lrhard: \"\\u296D\", lrm: \"\\u200E\", lrtri: \"\\u22BF\", lsaquo: \"\\u2039\", lscr: \"\\u{1D4C1}\", Lscr: \"\\u2112\", lsh: \"\\u21B0\", Lsh: \"\\u21B0\", lsim: \"\\u2272\", lsime: \"\\u2A8D\", lsimg: \"\\u2A8F\", lsqb: \"[\", lsquo: \"\\u2018\", lsquor: \"\\u201A\", Lstrok: \"\\u0141\", lstrok: \"\\u0142\", ltcc: \"\\u2AA6\", ltcir: \"\\u2A79\", lt: \"<\", LT: \"<\", Lt: \"\\u226A\", ltdot: \"\\u22D6\", lthree: \"\\u22CB\", ltimes: \"\\u22C9\", ltlarr: \"\\u2976\", ltquest: \"\\u2A7B\", ltri: \"\\u25C3\", ltrie: \"\\u22B4\", ltrif: \"\\u25C2\", ltrPar: \"\\u2996\", lurdshar: \"\\u294A\", luruhar: \"\\u2966\", lvertneqq: \"\\u2268\\uFE00\", lvnE: \"\\u2268\\uFE00\", macr: \"\\xAF\", male: \"\\u2642\", malt: \"\\u2720\", maltese: \"\\u2720\", Map: \"\\u2905\", map: \"\\u21A6\", mapsto: \"\\u21A6\", mapstodown: \"\\u21A7\", mapstoleft: \"\\u21A4\", mapstoup: \"\\u21A5\", marker: \"\\u25AE\", mcomma: \"\\u2A29\", Mcy: \"\\u041C\", mcy: \"\\u043C\", mdash: \"\\u2014\", mDDot: \"\\u223A\", measuredangle: \"\\u2221\", MediumSpace: \"\\u205F\", Mellintrf: \"\\u2133\", Mfr: \"\\u{1D510}\", mfr: \"\\u{1D52A}\", mho: \"\\u2127\", micro: \"\\xB5\", midast: \"*\", midcir: \"\\u2AF0\", mid: \"\\u2223\", middot: \"\\xB7\", minusb: \"\\u229F\", minus: \"\\u2212\", minusd: \"\\u2238\", minusdu: \"\\u2A2A\", MinusPlus: \"\\u2213\", mlcp: \"\\u2ADB\", mldr: \"\\u2026\", mnplus: \"\\u2213\", models: \"\\u22A7\", Mopf: \"\\u{1D544}\", mopf: \"\\u{1D55E}\", mp: \"\\u2213\", mscr: \"\\u{1D4C2}\", Mscr: \"\\u2133\", mstpos: \"\\u223E\", Mu: \"\\u039C\", mu: \"\\u03BC\", multimap: \"\\u22B8\", mumap: \"\\u22B8\", nabla: \"\\u2207\", Nacute: \"\\u0143\", nacute: \"\\u0144\", nang: \"\\u2220\\u20D2\", nap: \"\\u2249\", napE: \"\\u2A70\\u0338\", napid: \"\\u224B\\u0338\", napos: \"\\u0149\", napprox: \"\\u2249\", natural: \"\\u266E\", naturals: \"\\u2115\", natur: \"\\u266E\", nbsp: \"\\xA0\", nbump: \"\\u224E\\u0338\", nbumpe: \"\\u224F\\u0338\", ncap: \"\\u2A43\", Ncaron: \"\\u0147\", ncaron: \"\\u0148\", Ncedil: \"\\u0145\", ncedil: \"\\u0146\", ncong: \"\\u2247\", ncongdot: \"\\u2A6D\\u0338\", ncup: \"\\u2A42\", Ncy: \"\\u041D\", ncy: \"\\u043D\", ndash: \"\\u2013\", nearhk: \"\\u2924\", nearr: \"\\u2197\", neArr: \"\\u21D7\", nearrow: \"\\u2197\", ne: \"\\u2260\", nedot: \"\\u2250\\u0338\", NegativeMediumSpace: \"\\u200B\", NegativeThickSpace: \"\\u200B\", NegativeThinSpace: \"\\u200B\", NegativeVeryThinSpace: \"\\u200B\", nequiv: \"\\u2262\", nesear: \"\\u2928\", nesim: \"\\u2242\\u0338\", NestedGreaterGreater: \"\\u226B\", NestedLessLess: \"\\u226A\", NewLine: \"\\n\", nexist: \"\\u2204\", nexists: \"\\u2204\", Nfr: \"\\u{1D511}\", nfr: \"\\u{1D52B}\", ngE: \"\\u2267\\u0338\", nge: \"\\u2271\", ngeq: \"\\u2271\", ngeqq: \"\\u2267\\u0338\", ngeqslant: \"\\u2A7E\\u0338\", nges: \"\\u2A7E\\u0338\", nGg: \"\\u22D9\\u0338\", ngsim: \"\\u2275\", nGt: \"\\u226B\\u20D2\", ngt: \"\\u226F\", ngtr: \"\\u226F\", nGtv: \"\\u226B\\u0338\", nharr: \"\\u21AE\", nhArr: \"\\u21CE\", nhpar: \"\\u2AF2\", ni: \"\\u220B\", nis: \"\\u22FC\", nisd: \"\\u22FA\", niv: \"\\u220B\", NJcy: \"\\u040A\", njcy: \"\\u045A\", nlarr: \"\\u219A\", nlArr: \"\\u21CD\", nldr: \"\\u2025\", nlE: \"\\u2266\\u0338\", nle: \"\\u2270\", nleftarrow: \"\\u219A\", nLeftarrow: \"\\u21CD\", nleftrightarrow: \"\\u21AE\", nLeftrightarrow: \"\\u21CE\", nleq: \"\\u2270\", nleqq: \"\\u2266\\u0338\", nleqslant: \"\\u2A7D\\u0338\", nles: \"\\u2A7D\\u0338\", nless: \"\\u226E\", nLl: \"\\u22D8\\u0338\", nlsim: \"\\u2274\", nLt: \"\\u226A\\u20D2\", nlt: \"\\u226E\", nltri: \"\\u22EA\", nltrie: \"\\u22EC\", nLtv: \"\\u226A\\u0338\", nmid: \"\\u2224\", NoBreak: \"\\u2060\", NonBreakingSpace: \"\\xA0\", nopf: \"\\u{1D55F}\", Nopf: \"\\u2115\", Not: \"\\u2AEC\", not: \"\\xAC\", NotCongruent: \"\\u2262\", NotCupCap: \"\\u226D\", NotDoubleVerticalBar: \"\\u2226\", NotElement: \"\\u2209\", NotEqual: \"\\u2260\", NotEqualTilde: \"\\u2242\\u0338\", NotExists: \"\\u2204\", NotGreater: \"\\u226F\", NotGreaterEqual: \"\\u2271\", NotGreaterFullEqual: \"\\u2267\\u0338\", NotGreaterGreater: \"\\u226B\\u0338\", NotGreaterLess: \"\\u2279\", NotGreaterSlantEqual: \"\\u2A7E\\u0338\", NotGreaterTilde: \"\\u2275\", NotHumpDownHump: \"\\u224E\\u0338\", NotHumpEqual: \"\\u224F\\u0338\", notin: \"\\u2209\", notindot: \"\\u22F5\\u0338\", notinE: \"\\u22F9\\u0338\", notinva: \"\\u2209\", notinvb: \"\\u22F7\", notinvc: \"\\u22F6\", NotLeftTriangleBar: \"\\u29CF\\u0338\", NotLeftTriangle: \"\\u22EA\", NotLeftTriangleEqual: \"\\u22EC\", NotLess: \"\\u226E\", NotLessEqual: \"\\u2270\", NotLessGreater: \"\\u2278\", NotLessLess: \"\\u226A\\u0338\", NotLessSlantEqual: \"\\u2A7D\\u0338\", NotLessTilde: \"\\u2274\", NotNestedGreaterGreater: \"\\u2AA2\\u0338\", NotNestedLessLess: \"\\u2AA1\\u0338\", notni: \"\\u220C\", notniva: \"\\u220C\", notnivb: \"\\u22FE\", notnivc: \"\\u22FD\", NotPrecedes: \"\\u2280\", NotPrecedesEqual: \"\\u2AAF\\u0338\", NotPrecedesSlantEqual: \"\\u22E0\", NotReverseElement: \"\\u220C\", NotRightTriangleBar: \"\\u29D0\\u0338\", NotRightTriangle: \"\\u22EB\", NotRightTriangleEqual: \"\\u22ED\", NotSquareSubset: \"\\u228F\\u0338\", NotSquareSubsetEqual: \"\\u22E2\", NotSquareSuperset: \"\\u2290\\u0338\", NotSquareSupersetEqual: \"\\u22E3\", NotSubset: \"\\u2282\\u20D2\", NotSubsetEqual: \"\\u2288\", NotSucceeds: \"\\u2281\", NotSucceedsEqual: \"\\u2AB0\\u0338\", NotSucceedsSlantEqual: \"\\u22E1\", NotSucceedsTilde: \"\\u227F\\u0338\", NotSuperset: \"\\u2283\\u20D2\", NotSupersetEqual: \"\\u2289\", NotTilde: \"\\u2241\", NotTildeEqual: \"\\u2244\", NotTildeFullEqual: \"\\u2247\", NotTildeTilde: \"\\u2249\", NotVerticalBar: \"\\u2224\", nparallel: \"\\u2226\", npar: \"\\u2226\", nparsl: \"\\u2AFD\\u20E5\", npart: \"\\u2202\\u0338\", npolint: \"\\u2A14\", npr: \"\\u2280\", nprcue: \"\\u22E0\", nprec: \"\\u2280\", npreceq: \"\\u2AAF\\u0338\", npre: \"\\u2AAF\\u0338\", nrarrc: \"\\u2933\\u0338\", nrarr: \"\\u219B\", nrArr: \"\\u21CF\", nrarrw: \"\\u219D\\u0338\", nrightarrow: \"\\u219B\", nRightarrow: \"\\u21CF\", nrtri: \"\\u22EB\", nrtrie: \"\\u22ED\", nsc: \"\\u2281\", nsccue: \"\\u22E1\", nsce: \"\\u2AB0\\u0338\", Nscr: \"\\u{1D4A9}\", nscr: \"\\u{1D4C3}\", nshortmid: \"\\u2224\", nshortparallel: \"\\u2226\", nsim: \"\\u2241\", nsime: \"\\u2244\", nsimeq: \"\\u2244\", nsmid: \"\\u2224\", nspar: \"\\u2226\", nsqsube: \"\\u22E2\", nsqsupe: \"\\u22E3\", nsub: \"\\u2284\", nsubE: \"\\u2AC5\\u0338\", nsube: \"\\u2288\", nsubset: \"\\u2282\\u20D2\", nsubseteq: \"\\u2288\", nsubseteqq: \"\\u2AC5\\u0338\", nsucc: \"\\u2281\", nsucceq: \"\\u2AB0\\u0338\", nsup: \"\\u2285\", nsupE: \"\\u2AC6\\u0338\", nsupe: \"\\u2289\", nsupset: \"\\u2283\\u20D2\", nsupseteq: \"\\u2289\", nsupseteqq: \"\\u2AC6\\u0338\", ntgl: \"\\u2279\", Ntilde: \"\\xD1\", ntilde: \"\\xF1\", ntlg: \"\\u2278\", ntriangleleft: \"\\u22EA\", ntrianglelefteq: \"\\u22EC\", ntriangleright: \"\\u22EB\", ntrianglerighteq: \"\\u22ED\", Nu: \"\\u039D\", nu: \"\\u03BD\", num: \"#\", numero: \"\\u2116\", numsp: \"\\u2007\", nvap: \"\\u224D\\u20D2\", nvdash: \"\\u22AC\", nvDash: \"\\u22AD\", nVdash: \"\\u22AE\", nVDash: \"\\u22AF\", nvge: \"\\u2265\\u20D2\", nvgt: \">\\u20D2\", nvHarr: \"\\u2904\", nvinfin: \"\\u29DE\", nvlArr: \"\\u2902\", nvle: \"\\u2264\\u20D2\", nvlt: \"<\\u20D2\", nvltrie: \"\\u22B4\\u20D2\", nvrArr: \"\\u2903\", nvrtrie: \"\\u22B5\\u20D2\", nvsim: \"\\u223C\\u20D2\", nwarhk: \"\\u2923\", nwarr: \"\\u2196\", nwArr: \"\\u21D6\", nwarrow: \"\\u2196\", nwnear: \"\\u2927\", Oacute: \"\\xD3\", oacute: \"\\xF3\", oast: \"\\u229B\", Ocirc: \"\\xD4\", ocirc: \"\\xF4\", ocir: \"\\u229A\", Ocy: \"\\u041E\", ocy: \"\\u043E\", odash: \"\\u229D\", Odblac: \"\\u0150\", odblac: \"\\u0151\", odiv: \"\\u2A38\", odot: \"\\u2299\", odsold: \"\\u29BC\", OElig: \"\\u0152\", oelig: \"\\u0153\", ofcir: \"\\u29BF\", Ofr: \"\\u{1D512}\", ofr: \"\\u{1D52C}\", ogon: \"\\u02DB\", Ograve: \"\\xD2\", ograve: \"\\xF2\", ogt: \"\\u29C1\", ohbar: \"\\u29B5\", ohm: \"\\u03A9\", oint: \"\\u222E\", olarr: \"\\u21BA\", olcir: \"\\u29BE\", olcross: \"\\u29BB\", oline: \"\\u203E\", olt: \"\\u29C0\", Omacr: \"\\u014C\", omacr: \"\\u014D\", Omega: \"\\u03A9\", omega: \"\\u03C9\", Omicron: \"\\u039F\", omicron: \"\\u03BF\", omid: \"\\u29B6\", ominus: \"\\u2296\", Oopf: \"\\u{1D546}\", oopf: \"\\u{1D560}\", opar: \"\\u29B7\", OpenCurlyDoubleQuote: \"\\u201C\", OpenCurlyQuote: \"\\u2018\", operp: \"\\u29B9\", oplus: \"\\u2295\", orarr: \"\\u21BB\", Or: \"\\u2A54\", or: \"\\u2228\", ord: \"\\u2A5D\", order: \"\\u2134\", orderof: \"\\u2134\", ordf: \"\\xAA\", ordm: \"\\xBA\", origof: \"\\u22B6\", oror: \"\\u2A56\", orslope: \"\\u2A57\", orv: \"\\u2A5B\", oS: \"\\u24C8\", Oscr: \"\\u{1D4AA}\", oscr: \"\\u2134\", Oslash: \"\\xD8\", oslash: \"\\xF8\", osol: \"\\u2298\", Otilde: \"\\xD5\", otilde: \"\\xF5\", otimesas: \"\\u2A36\", Otimes: \"\\u2A37\", otimes: \"\\u2297\", Ouml: \"\\xD6\", ouml: \"\\xF6\", ovbar: \"\\u233D\", OverBar: \"\\u203E\", OverBrace: \"\\u23DE\", OverBracket: \"\\u23B4\", OverParenthesis: \"\\u23DC\", para: \"\\xB6\", parallel: \"\\u2225\", par: \"\\u2225\", parsim: \"\\u2AF3\", parsl: \"\\u2AFD\", part: \"\\u2202\", PartialD: \"\\u2202\", Pcy: \"\\u041F\", pcy: \"\\u043F\", percnt: \"%\", period: \".\", permil: \"\\u2030\", perp: \"\\u22A5\", pertenk: \"\\u2031\", Pfr: \"\\u{1D513}\", pfr: \"\\u{1D52D}\", Phi: \"\\u03A6\", phi: \"\\u03C6\", phiv: \"\\u03D5\", phmmat: \"\\u2133\", phone: \"\\u260E\", Pi: \"\\u03A0\", pi: \"\\u03C0\", pitchfork: \"\\u22D4\", piv: \"\\u03D6\", planck: \"\\u210F\", planckh: \"\\u210E\", plankv: \"\\u210F\", plusacir: \"\\u2A23\", plusb: \"\\u229E\", pluscir: \"\\u2A22\", plus: \"+\", plusdo: \"\\u2214\", plusdu: \"\\u2A25\", pluse: \"\\u2A72\", PlusMinus: \"\\xB1\", plusmn: \"\\xB1\", plussim: \"\\u2A26\", plustwo: \"\\u2A27\", pm: \"\\xB1\", Poincareplane: \"\\u210C\", pointint: \"\\u2A15\", popf: \"\\u{1D561}\", Popf: \"\\u2119\", pound: \"\\xA3\", prap: \"\\u2AB7\", Pr: \"\\u2ABB\", pr: \"\\u227A\", prcue: \"\\u227C\", precapprox: \"\\u2AB7\", prec: \"\\u227A\", preccurlyeq: \"\\u227C\", Precedes: \"\\u227A\", PrecedesEqual: \"\\u2AAF\", PrecedesSlantEqual: \"\\u227C\", PrecedesTilde: \"\\u227E\", preceq: \"\\u2AAF\", precnapprox: \"\\u2AB9\", precneqq: \"\\u2AB5\", precnsim: \"\\u22E8\", pre: \"\\u2AAF\", prE: \"\\u2AB3\", precsim: \"\\u227E\", prime: \"\\u2032\", Prime: \"\\u2033\", primes: \"\\u2119\", prnap: \"\\u2AB9\", prnE: \"\\u2AB5\", prnsim: \"\\u22E8\", prod: \"\\u220F\", Product: \"\\u220F\", profalar: \"\\u232E\", profline: \"\\u2312\", profsurf: \"\\u2313\", prop: \"\\u221D\", Proportional: \"\\u221D\", Proportion: \"\\u2237\", propto: \"\\u221D\", prsim: \"\\u227E\", prurel: \"\\u22B0\", Pscr: \"\\u{1D4AB}\", pscr: \"\\u{1D4C5}\", Psi: \"\\u03A8\", psi: \"\\u03C8\", puncsp: \"\\u2008\", Qfr: \"\\u{1D514}\", qfr: \"\\u{1D52E}\", qint: \"\\u2A0C\", qopf: \"\\u{1D562}\", Qopf: \"\\u211A\", qprime: \"\\u2057\", Qscr: \"\\u{1D4AC}\", qscr: \"\\u{1D4C6}\", quaternions: \"\\u210D\", quatint: \"\\u2A16\", quest: \"?\", questeq: \"\\u225F\", quot: '\"', QUOT: '\"', rAarr: \"\\u21DB\", race: \"\\u223D\\u0331\", Racute: \"\\u0154\", racute: \"\\u0155\", radic: \"\\u221A\", raemptyv: \"\\u29B3\", rang: \"\\u27E9\", Rang: \"\\u27EB\", rangd: \"\\u2992\", range: \"\\u29A5\", rangle: \"\\u27E9\", raquo: \"\\xBB\", rarrap: \"\\u2975\", rarrb: \"\\u21E5\", rarrbfs: \"\\u2920\", rarrc: \"\\u2933\", rarr: \"\\u2192\", Rarr: \"\\u21A0\", rArr: \"\\u21D2\", rarrfs: \"\\u291E\", rarrhk: \"\\u21AA\", rarrlp: \"\\u21AC\", rarrpl: \"\\u2945\", rarrsim: \"\\u2974\", Rarrtl: \"\\u2916\", rarrtl: \"\\u21A3\", rarrw: \"\\u219D\", ratail: \"\\u291A\", rAtail: \"\\u291C\", ratio: \"\\u2236\", rationals: \"\\u211A\", rbarr: \"\\u290D\", rBarr: \"\\u290F\", RBarr: \"\\u2910\", rbbrk: \"\\u2773\", rbrace: \"}\", rbrack: \"]\", rbrke: \"\\u298C\", rbrksld: \"\\u298E\", rbrkslu: \"\\u2990\", Rcaron: \"\\u0158\", rcaron: \"\\u0159\", Rcedil: \"\\u0156\", rcedil: \"\\u0157\", rceil: \"\\u2309\", rcub: \"}\", Rcy: \"\\u0420\", rcy: \"\\u0440\", rdca: \"\\u2937\", rdldhar: \"\\u2969\", rdquo: \"\\u201D\", rdquor: \"\\u201D\", rdsh: \"\\u21B3\", real: \"\\u211C\", realine: \"\\u211B\", realpart: \"\\u211C\", reals: \"\\u211D\", Re: \"\\u211C\", rect: \"\\u25AD\", reg: \"\\xAE\", REG: \"\\xAE\", ReverseElement: \"\\u220B\", ReverseEquilibrium: \"\\u21CB\", ReverseUpEquilibrium: \"\\u296F\", rfisht: \"\\u297D\", rfloor: \"\\u230B\", rfr: \"\\u{1D52F}\", Rfr: \"\\u211C\", rHar: \"\\u2964\", rhard: \"\\u21C1\", rharu: \"\\u21C0\", rharul: \"\\u296C\", Rho: \"\\u03A1\", rho: \"\\u03C1\", rhov: \"\\u03F1\", RightAngleBracket: \"\\u27E9\", RightArrowBar: \"\\u21E5\", rightarrow: \"\\u2192\", RightArrow: \"\\u2192\", Rightarrow: \"\\u21D2\", RightArrowLeftArrow: \"\\u21C4\", rightarrowtail: \"\\u21A3\", RightCeiling: \"\\u2309\", RightDoubleBracket: \"\\u27E7\", RightDownTeeVector: \"\\u295D\", RightDownVectorBar: \"\\u2955\", RightDownVector: \"\\u21C2\", RightFloor: \"\\u230B\", rightharpoondown: \"\\u21C1\", rightharpoonup: \"\\u21C0\", rightleftarrows: \"\\u21C4\", rightleftharpoons: \"\\u21CC\", rightrightarrows: \"\\u21C9\", rightsquigarrow: \"\\u219D\", RightTeeArrow: \"\\u21A6\", RightTee: \"\\u22A2\", RightTeeVector: \"\\u295B\", rightthreetimes: \"\\u22CC\", RightTriangleBar: \"\\u29D0\", RightTriangle: \"\\u22B3\", RightTriangleEqual: \"\\u22B5\", RightUpDownVector: \"\\u294F\", RightUpTeeVector: \"\\u295C\", RightUpVectorBar: \"\\u2954\", RightUpVector: \"\\u21BE\", RightVectorBar: \"\\u2953\", RightVector: \"\\u21C0\", ring: \"\\u02DA\", risingdotseq: \"\\u2253\", rlarr: \"\\u21C4\", rlhar: \"\\u21CC\", rlm: \"\\u200F\", rmoustache: \"\\u23B1\", rmoust: \"\\u23B1\", rnmid: \"\\u2AEE\", roang: \"\\u27ED\", roarr: \"\\u21FE\", robrk: \"\\u27E7\", ropar: \"\\u2986\", ropf: \"\\u{1D563}\", Ropf: \"\\u211D\", roplus: \"\\u2A2E\", rotimes: \"\\u2A35\", RoundImplies: \"\\u2970\", rpar: \")\", rpargt: \"\\u2994\", rppolint: \"\\u2A12\", rrarr: \"\\u21C9\", Rrightarrow: \"\\u21DB\", rsaquo: \"\\u203A\", rscr: \"\\u{1D4C7}\", Rscr: \"\\u211B\", rsh: \"\\u21B1\", Rsh: \"\\u21B1\", rsqb: \"]\", rsquo: \"\\u2019\", rsquor: \"\\u2019\", rthree: \"\\u22CC\", rtimes: \"\\u22CA\", rtri: \"\\u25B9\", rtrie: \"\\u22B5\", rtrif: \"\\u25B8\", rtriltri: \"\\u29CE\", RuleDelayed: \"\\u29F4\", ruluhar: \"\\u2968\", rx: \"\\u211E\", Sacute: \"\\u015A\", sacute: \"\\u015B\", sbquo: \"\\u201A\", scap: \"\\u2AB8\", Scaron: \"\\u0160\", scaron: \"\\u0161\", Sc: \"\\u2ABC\", sc: \"\\u227B\", sccue: \"\\u227D\", sce: \"\\u2AB0\", scE: \"\\u2AB4\", Scedil: \"\\u015E\", scedil: \"\\u015F\", Scirc: \"\\u015C\", scirc: \"\\u015D\", scnap: \"\\u2ABA\", scnE: \"\\u2AB6\", scnsim: \"\\u22E9\", scpolint: \"\\u2A13\", scsim: \"\\u227F\", Scy: \"\\u0421\", scy: \"\\u0441\", sdotb: \"\\u22A1\", sdot: \"\\u22C5\", sdote: \"\\u2A66\", searhk: \"\\u2925\", searr: \"\\u2198\", seArr: \"\\u21D8\", searrow: \"\\u2198\", sect: \"\\xA7\", semi: \";\", seswar: \"\\u2929\", setminus: \"\\u2216\", setmn: \"\\u2216\", sext: \"\\u2736\", Sfr: \"\\u{1D516}\", sfr: \"\\u{1D530}\", sfrown: \"\\u2322\", sharp: \"\\u266F\", SHCHcy: \"\\u0429\", shchcy: \"\\u0449\", SHcy: \"\\u0428\", shcy: \"\\u0448\", ShortDownArrow: \"\\u2193\", ShortLeftArrow: \"\\u2190\", shortmid: \"\\u2223\", shortparallel: \"\\u2225\", ShortRightArrow: \"\\u2192\", ShortUpArrow: \"\\u2191\", shy: \"\\xAD\", Sigma: \"\\u03A3\", sigma: \"\\u03C3\", sigmaf: \"\\u03C2\", sigmav: \"\\u03C2\", sim: \"\\u223C\", simdot: \"\\u2A6A\", sime: \"\\u2243\", simeq: \"\\u2243\", simg: \"\\u2A9E\", simgE: \"\\u2AA0\", siml: \"\\u2A9D\", simlE: \"\\u2A9F\", simne: \"\\u2246\", simplus: \"\\u2A24\", simrarr: \"\\u2972\", slarr: \"\\u2190\", SmallCircle: \"\\u2218\", smallsetminus: \"\\u2216\", smashp: \"\\u2A33\", smeparsl: \"\\u29E4\", smid: \"\\u2223\", smile: \"\\u2323\", smt: \"\\u2AAA\", smte: \"\\u2AAC\", smtes: \"\\u2AAC\\uFE00\", SOFTcy: \"\\u042C\", softcy: \"\\u044C\", solbar: \"\\u233F\", solb: \"\\u29C4\", sol: \"/\", Sopf: \"\\u{1D54A}\", sopf: \"\\u{1D564}\", spades: \"\\u2660\", spadesuit: \"\\u2660\", spar: \"\\u2225\", sqcap: \"\\u2293\", sqcaps: \"\\u2293\\uFE00\", sqcup: \"\\u2294\", sqcups: \"\\u2294\\uFE00\", Sqrt: \"\\u221A\", sqsub: \"\\u228F\", sqsube: \"\\u2291\", sqsubset: \"\\u228F\", sqsubseteq: \"\\u2291\", sqsup: \"\\u2290\", sqsupe: \"\\u2292\", sqsupset: \"\\u2290\", sqsupseteq: \"\\u2292\", square: \"\\u25A1\", Square: \"\\u25A1\", SquareIntersection: \"\\u2293\", SquareSubset: \"\\u228F\", SquareSubsetEqual: \"\\u2291\", SquareSuperset: \"\\u2290\", SquareSupersetEqual: \"\\u2292\", SquareUnion: \"\\u2294\", squarf: \"\\u25AA\", squ: \"\\u25A1\", squf: \"\\u25AA\", srarr: \"\\u2192\", Sscr: \"\\u{1D4AE}\", sscr: \"\\u{1D4C8}\", ssetmn: \"\\u2216\", ssmile: \"\\u2323\", sstarf: \"\\u22C6\", Star: \"\\u22C6\", star: \"\\u2606\", starf: \"\\u2605\", straightepsilon: \"\\u03F5\", straightphi: \"\\u03D5\", strns: \"\\xAF\", sub: \"\\u2282\", Sub: \"\\u22D0\", subdot: \"\\u2ABD\", subE: \"\\u2AC5\", sube: \"\\u2286\", subedot: \"\\u2AC3\", submult: \"\\u2AC1\", subnE: \"\\u2ACB\", subne: \"\\u228A\", subplus: \"\\u2ABF\", subrarr: \"\\u2979\", subset: \"\\u2282\", Subset: \"\\u22D0\", subseteq: \"\\u2286\", subseteqq: \"\\u2AC5\", SubsetEqual: \"\\u2286\", subsetneq: \"\\u228A\", subsetneqq: \"\\u2ACB\", subsim: \"\\u2AC7\", subsub: \"\\u2AD5\", subsup: \"\\u2AD3\", succapprox: \"\\u2AB8\", succ: \"\\u227B\", succcurlyeq: \"\\u227D\", Succeeds: \"\\u227B\", SucceedsEqual: \"\\u2AB0\", SucceedsSlantEqual: \"\\u227D\", SucceedsTilde: \"\\u227F\", succeq: \"\\u2AB0\", succnapprox: \"\\u2ABA\", succneqq: \"\\u2AB6\", succnsim: \"\\u22E9\", succsim: \"\\u227F\", SuchThat: \"\\u220B\", sum: \"\\u2211\", Sum: \"\\u2211\", sung: \"\\u266A\", sup1: \"\\xB9\", sup2: \"\\xB2\", sup3: \"\\xB3\", sup: \"\\u2283\", Sup: \"\\u22D1\", supdot: \"\\u2ABE\", supdsub: \"\\u2AD8\", supE: \"\\u2AC6\", supe: \"\\u2287\", supedot: \"\\u2AC4\", Superset: \"\\u2283\", SupersetEqual: \"\\u2287\", suphsol: \"\\u27C9\", suphsub: \"\\u2AD7\", suplarr: \"\\u297B\", supmult: \"\\u2AC2\", supnE: \"\\u2ACC\", supne: \"\\u228B\", supplus: \"\\u2AC0\", supset: \"\\u2283\", Supset: \"\\u22D1\", supseteq: \"\\u2287\", supseteqq: \"\\u2AC6\", supsetneq: \"\\u228B\", supsetneqq: \"\\u2ACC\", supsim: \"\\u2AC8\", supsub: \"\\u2AD4\", supsup: \"\\u2AD6\", swarhk: \"\\u2926\", swarr: \"\\u2199\", swArr: \"\\u21D9\", swarrow: \"\\u2199\", swnwar: \"\\u292A\", szlig: \"\\xDF\", Tab: \"\t\", target: \"\\u2316\", Tau: \"\\u03A4\", tau: \"\\u03C4\", tbrk: \"\\u23B4\", Tcaron: \"\\u0164\", tcaron: \"\\u0165\", Tcedil: \"\\u0162\", tcedil: \"\\u0163\", Tcy: \"\\u0422\", tcy: \"\\u0442\", tdot: \"\\u20DB\", telrec: \"\\u2315\", Tfr: \"\\u{1D517}\", tfr: \"\\u{1D531}\", there4: \"\\u2234\", therefore: \"\\u2234\", Therefore: \"\\u2234\", Theta: \"\\u0398\", theta: \"\\u03B8\", thetasym: \"\\u03D1\", thetav: \"\\u03D1\", thickapprox: \"\\u2248\", thicksim: \"\\u223C\", ThickSpace: \"\\u205F\\u200A\", ThinSpace: \"\\u2009\", thinsp: \"\\u2009\", thkap: \"\\u2248\", thksim: \"\\u223C\", THORN: \"\\xDE\", thorn: \"\\xFE\", tilde: \"\\u02DC\", Tilde: \"\\u223C\", TildeEqual: \"\\u2243\", TildeFullEqual: \"\\u2245\", TildeTilde: \"\\u2248\", timesbar: \"\\u2A31\", timesb: \"\\u22A0\", times: \"\\xD7\", timesd: \"\\u2A30\", tint: \"\\u222D\", toea: \"\\u2928\", topbot: \"\\u2336\", topcir: \"\\u2AF1\", top: \"\\u22A4\", Topf: \"\\u{1D54B}\", topf: \"\\u{1D565}\", topfork: \"\\u2ADA\", tosa: \"\\u2929\", tprime: \"\\u2034\", trade: \"\\u2122\", TRADE: \"\\u2122\", triangle: \"\\u25B5\", triangledown: \"\\u25BF\", triangleleft: \"\\u25C3\", trianglelefteq: \"\\u22B4\", triangleq: \"\\u225C\", triangleright: \"\\u25B9\", trianglerighteq: \"\\u22B5\", tridot: \"\\u25EC\", trie: \"\\u225C\", triminus: \"\\u2A3A\", TripleDot: \"\\u20DB\", triplus: \"\\u2A39\", trisb: \"\\u29CD\", tritime: \"\\u2A3B\", trpezium: \"\\u23E2\", Tscr: \"\\u{1D4AF}\", tscr: \"\\u{1D4C9}\", TScy: \"\\u0426\", tscy: \"\\u0446\", TSHcy: \"\\u040B\", tshcy: \"\\u045B\", Tstrok: \"\\u0166\", tstrok: \"\\u0167\", twixt: \"\\u226C\", twoheadleftarrow: \"\\u219E\", twoheadrightarrow: \"\\u21A0\", Uacute: \"\\xDA\", uacute: \"\\xFA\", uarr: \"\\u2191\", Uarr: \"\\u219F\", uArr: \"\\u21D1\", Uarrocir: \"\\u2949\", Ubrcy: \"\\u040E\", ubrcy: \"\\u045E\", Ubreve: \"\\u016C\", ubreve: \"\\u016D\", Ucirc: \"\\xDB\", ucirc: \"\\xFB\", Ucy: \"\\u0423\", ucy: \"\\u0443\", udarr: \"\\u21C5\", Udblac: \"\\u0170\", udblac: \"\\u0171\", udhar: \"\\u296E\", ufisht: \"\\u297E\", Ufr: \"\\u{1D518}\", ufr: \"\\u{1D532}\", Ugrave: \"\\xD9\", ugrave: \"\\xF9\", uHar: \"\\u2963\", uharl: \"\\u21BF\", uharr: \"\\u21BE\", uhblk: \"\\u2580\", ulcorn: \"\\u231C\", ulcorner: \"\\u231C\", ulcrop: \"\\u230F\", ultri: \"\\u25F8\", Umacr: \"\\u016A\", umacr: \"\\u016B\", uml: \"\\xA8\", UnderBar: \"_\", UnderBrace: \"\\u23DF\", UnderBracket: \"\\u23B5\", UnderParenthesis: \"\\u23DD\", Union: \"\\u22C3\", UnionPlus: \"\\u228E\", Uogon: \"\\u0172\", uogon: \"\\u0173\", Uopf: \"\\u{1D54C}\", uopf: \"\\u{1D566}\", UpArrowBar: \"\\u2912\", uparrow: \"\\u2191\", UpArrow: \"\\u2191\", Uparrow: \"\\u21D1\", UpArrowDownArrow: \"\\u21C5\", updownarrow: \"\\u2195\", UpDownArrow: \"\\u2195\", Updownarrow: \"\\u21D5\", UpEquilibrium: \"\\u296E\", upharpoonleft: \"\\u21BF\", upharpoonright: \"\\u21BE\", uplus: \"\\u228E\", UpperLeftArrow: \"\\u2196\", UpperRightArrow: \"\\u2197\", upsi: \"\\u03C5\", Upsi: \"\\u03D2\", upsih: \"\\u03D2\", Upsilon: \"\\u03A5\", upsilon: \"\\u03C5\", UpTeeArrow: \"\\u21A5\", UpTee: \"\\u22A5\", upuparrows: \"\\u21C8\", urcorn: \"\\u231D\", urcorner: \"\\u231D\", urcrop: \"\\u230E\", Uring: \"\\u016E\", uring: \"\\u016F\", urtri: \"\\u25F9\", Uscr: \"\\u{1D4B0}\", uscr: \"\\u{1D4CA}\", utdot: \"\\u22F0\", Utilde: \"\\u0168\", utilde: \"\\u0169\", utri: \"\\u25B5\", utrif: \"\\u25B4\", uuarr: \"\\u21C8\", Uuml: \"\\xDC\", uuml: \"\\xFC\", uwangle: \"\\u29A7\", vangrt: \"\\u299C\", varepsilon: \"\\u03F5\", varkappa: \"\\u03F0\", varnothing: \"\\u2205\", varphi: \"\\u03D5\", varpi: \"\\u03D6\", varpropto: \"\\u221D\", varr: \"\\u2195\", vArr: \"\\u21D5\", varrho: \"\\u03F1\", varsigma: \"\\u03C2\", varsubsetneq: \"\\u228A\\uFE00\", varsubsetneqq: \"\\u2ACB\\uFE00\", varsupsetneq: \"\\u228B\\uFE00\", varsupsetneqq: \"\\u2ACC\\uFE00\", vartheta: \"\\u03D1\", vartriangleleft: \"\\u22B2\", vartriangleright: \"\\u22B3\", vBar: \"\\u2AE8\", Vbar: \"\\u2AEB\", vBarv: \"\\u2AE9\", Vcy: \"\\u0412\", vcy: \"\\u0432\", vdash: \"\\u22A2\", vDash: \"\\u22A8\", Vdash: \"\\u22A9\", VDash: \"\\u22AB\", Vdashl: \"\\u2AE6\", veebar: \"\\u22BB\", vee: \"\\u2228\", Vee: \"\\u22C1\", veeeq: \"\\u225A\", vellip: \"\\u22EE\", verbar: \"|\", Verbar: \"\\u2016\", vert: \"|\", Vert: \"\\u2016\", VerticalBar: \"\\u2223\", VerticalLine: \"|\", VerticalSeparator: \"\\u2758\", VerticalTilde: \"\\u2240\", VeryThinSpace: \"\\u200A\", Vfr: \"\\u{1D519}\", vfr: \"\\u{1D533}\", vltri: \"\\u22B2\", vnsub: \"\\u2282\\u20D2\", vnsup: \"\\u2283\\u20D2\", Vopf: \"\\u{1D54D}\", vopf: \"\\u{1D567}\", vprop: \"\\u221D\", vrtri: \"\\u22B3\", Vscr: \"\\u{1D4B1}\", vscr: \"\\u{1D4CB}\", vsubnE: \"\\u2ACB\\uFE00\", vsubne: \"\\u228A\\uFE00\", vsupnE: \"\\u2ACC\\uFE00\", vsupne: \"\\u228B\\uFE00\", Vvdash: \"\\u22AA\", vzigzag: \"\\u299A\", Wcirc: \"\\u0174\", wcirc: \"\\u0175\", wedbar: \"\\u2A5F\", wedge: \"\\u2227\", Wedge: \"\\u22C0\", wedgeq: \"\\u2259\", weierp: \"\\u2118\", Wfr: \"\\u{1D51A}\", wfr: \"\\u{1D534}\", Wopf: \"\\u{1D54E}\", wopf: \"\\u{1D568}\", wp: \"\\u2118\", wr: \"\\u2240\", wreath: \"\\u2240\", Wscr: \"\\u{1D4B2}\", wscr: \"\\u{1D4CC}\", xcap: \"\\u22C2\", xcirc: \"\\u25EF\", xcup: \"\\u22C3\", xdtri: \"\\u25BD\", Xfr: \"\\u{1D51B}\", xfr: \"\\u{1D535}\", xharr: \"\\u27F7\", xhArr: \"\\u27FA\", Xi: \"\\u039E\", xi: \"\\u03BE\", xlarr: \"\\u27F5\", xlArr: \"\\u27F8\", xmap: \"\\u27FC\", xnis: \"\\u22FB\", xodot: \"\\u2A00\", Xopf: \"\\u{1D54F}\", xopf: \"\\u{1D569}\", xoplus: \"\\u2A01\", xotime: \"\\u2A02\", xrarr: \"\\u27F6\", xrArr: \"\\u27F9\", Xscr: \"\\u{1D4B3}\", xscr: \"\\u{1D4CD}\", xsqcup: \"\\u2A06\", xuplus: \"\\u2A04\", xutri: \"\\u25B3\", xvee: \"\\u22C1\", xwedge: \"\\u22C0\", Yacute: \"\\xDD\", yacute: \"\\xFD\", YAcy: \"\\u042F\", yacy: \"\\u044F\", Ycirc: \"\\u0176\", ycirc: \"\\u0177\", Ycy: \"\\u042B\", ycy: \"\\u044B\", yen: \"\\xA5\", Yfr: \"\\u{1D51C}\", yfr: \"\\u{1D536}\", YIcy: \"\\u0407\", yicy: \"\\u0457\", Yopf: \"\\u{1D550}\", yopf: \"\\u{1D56A}\", Yscr: \"\\u{1D4B4}\", yscr: \"\\u{1D4CE}\", YUcy: \"\\u042E\", yucy: \"\\u044E\", yuml: \"\\xFF\", Yuml: \"\\u0178\", Zacute: \"\\u0179\", zacute: \"\\u017A\", Zcaron: \"\\u017D\", zcaron: \"\\u017E\", Zcy: \"\\u0417\", zcy: \"\\u0437\", Zdot: \"\\u017B\", zdot: \"\\u017C\", zeetrf: \"\\u2128\", ZeroWidthSpace: \"\\u200B\", Zeta: \"\\u0396\", zeta: \"\\u03B6\", zfr: \"\\u{1D537}\", Zfr: \"\\u2128\", ZHcy: \"\\u0416\", zhcy: \"\\u0436\", zigrarr: \"\\u21DD\", zopf: \"\\u{1D56B}\", Zopf: \"\\u2124\", Zscr: \"\\u{1D4B5}\", zscr: \"\\u{1D4CF}\", zwj: \"\\u200D\", zwnj: \"\\u200C\" };\n  }\n});\n\n// node_modules/markdown-it/lib/common/entities.js\nvar require_entities2 = __commonJS({\n  \"node_modules/markdown-it/lib/common/entities.js\"(exports, module) {\n    \"use strict\";\n    module.exports = require_entities();\n  }\n});\n\n// node_modules/uc.micro/categories/P/regex.js\nvar require_regex = __commonJS({\n  \"node_modules/uc.micro/categories/P/regex.js\"(exports, module) {\n    module.exports = /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/;\n  }\n});\n\n// node_modules/mdurl/encode.js\nvar require_encode = __commonJS({\n  \"node_modules/mdurl/encode.js\"(exports, module) {\n    \"use strict\";\n    var encodeCache = {};\n    function getEncodeCache(exclude) {\n      var i, ch, cache = encodeCache[exclude];\n      if (cache) {\n        return cache;\n      }\n      cache = encodeCache[exclude] = [];\n      for (i = 0; i < 128; i++) {\n        ch = String.fromCharCode(i);\n        if (/^[0-9a-z]$/i.test(ch)) {\n          cache.push(ch);\n        } else {\n          cache.push(\"%\" + (\"0\" + i.toString(16).toUpperCase()).slice(-2));\n        }\n      }\n      for (i = 0; i < exclude.length; i++) {\n        cache[exclude.charCodeAt(i)] = exclude[i];\n      }\n      return cache;\n    }\n    function encode(string, exclude, keepEscaped) {\n      var i, l, code2, nextCode, cache, result = \"\";\n      if (typeof exclude !== \"string\") {\n        keepEscaped = exclude;\n        exclude = encode.defaultChars;\n      }\n      if (typeof keepEscaped === \"undefined\") {\n        keepEscaped = true;\n      }\n      cache = getEncodeCache(exclude);\n      for (i = 0, l = string.length; i < l; i++) {\n        code2 = string.charCodeAt(i);\n        if (keepEscaped && code2 === 37 && i + 2 < l) {\n          if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n            result += string.slice(i, i + 3);\n            i += 2;\n            continue;\n          }\n        }\n        if (code2 < 128) {\n          result += cache[code2];\n          continue;\n        }\n        if (code2 >= 55296 && code2 <= 57343) {\n          if (code2 >= 55296 && code2 <= 56319 && i + 1 < l) {\n            nextCode = string.charCodeAt(i + 1);\n            if (nextCode >= 56320 && nextCode <= 57343) {\n              result += encodeURIComponent(string[i] + string[i + 1]);\n              i++;\n              continue;\n            }\n          }\n          result += \"%EF%BF%BD\";\n          continue;\n        }\n        result += encodeURIComponent(string[i]);\n      }\n      return result;\n    }\n    encode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\n    encode.componentChars = \"-_.!~*'()\";\n    module.exports = encode;\n  }\n});\n\n// node_modules/mdurl/decode.js\nvar require_decode = __commonJS({\n  \"node_modules/mdurl/decode.js\"(exports, module) {\n    \"use strict\";\n    var decodeCache = {};\n    function getDecodeCache(exclude) {\n      var i, ch, cache = decodeCache[exclude];\n      if (cache) {\n        return cache;\n      }\n      cache = decodeCache[exclude] = [];\n      for (i = 0; i < 128; i++) {\n        ch = String.fromCharCode(i);\n        cache.push(ch);\n      }\n      for (i = 0; i < exclude.length; i++) {\n        ch = exclude.charCodeAt(i);\n        cache[ch] = \"%\" + (\"0\" + ch.toString(16).toUpperCase()).slice(-2);\n      }\n      return cache;\n    }\n    function decode(string, exclude) {\n      var cache;\n      if (typeof exclude !== \"string\") {\n        exclude = decode.defaultChars;\n      }\n      cache = getDecodeCache(exclude);\n      return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n        var i, l, b1, b2, b3, b4, chr, result = \"\";\n        for (i = 0, l = seq.length; i < l; i += 3) {\n          b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n          if (b1 < 128) {\n            result += cache[b1];\n            continue;\n          }\n          if ((b1 & 224) === 192 && i + 3 < l) {\n            b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n            if ((b2 & 192) === 128) {\n              chr = b1 << 6 & 1984 | b2 & 63;\n              if (chr < 128) {\n                result += \"\\uFFFD\\uFFFD\";\n              } else {\n                result += String.fromCharCode(chr);\n              }\n              i += 3;\n              continue;\n            }\n          }\n          if ((b1 & 240) === 224 && i + 6 < l) {\n            b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n            b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n            if ((b2 & 192) === 128 && (b3 & 192) === 128) {\n              chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;\n              if (chr < 2048 || chr >= 55296 && chr <= 57343) {\n                result += \"\\uFFFD\\uFFFD\\uFFFD\";\n              } else {\n                result += String.fromCharCode(chr);\n              }\n              i += 6;\n              continue;\n            }\n          }\n          if ((b1 & 248) === 240 && i + 9 < l) {\n            b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n            b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n            b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n            if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {\n              chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;\n              if (chr < 65536 || chr > 1114111) {\n                result += \"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\";\n              } else {\n                chr -= 65536;\n                result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));\n              }\n              i += 9;\n              continue;\n            }\n          }\n          result += \"\\uFFFD\";\n        }\n        return result;\n      });\n    }\n    decode.defaultChars = \";/?:@&=+$,#\";\n    decode.componentChars = \"\";\n    module.exports = decode;\n  }\n});\n\n// node_modules/mdurl/format.js\nvar require_format = __commonJS({\n  \"node_modules/mdurl/format.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function format2(url) {\n      var result = \"\";\n      result += url.protocol || \"\";\n      result += url.slashes ? \"//\" : \"\";\n      result += url.auth ? url.auth + \"@\" : \"\";\n      if (url.hostname && url.hostname.indexOf(\":\") !== -1) {\n        result += \"[\" + url.hostname + \"]\";\n      } else {\n        result += url.hostname || \"\";\n      }\n      result += url.port ? \":\" + url.port : \"\";\n      result += url.pathname || \"\";\n      result += url.search || \"\";\n      result += url.hash || \"\";\n      return result;\n    };\n  }\n});\n\n// node_modules/mdurl/parse.js\nvar require_parse = __commonJS({\n  \"node_modules/mdurl/parse.js\"(exports, module) {\n    \"use strict\";\n    function Url() {\n      this.protocol = null;\n      this.slashes = null;\n      this.auth = null;\n      this.port = null;\n      this.hostname = null;\n      this.hash = null;\n      this.search = null;\n      this.pathname = null;\n    }\n    var protocolPattern = /^([a-z0-9.+-]+:)/i;\n    var portPattern = /:[0-9]*$/;\n    var simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n    var delims = [\"<\", \">\", '\"', \"`\", \" \", \"\\r\", \"\\n\", \"\t\"];\n    var unwise = [\"{\", \"}\", \"|\", \"\\\\\", \"^\", \"`\"].concat(delims);\n    var autoEscape = [\"'\"].concat(unwise);\n    var nonHostChars = [\"%\", \"/\", \"?\", \";\", \"#\"].concat(autoEscape);\n    var hostEndingChars = [\"/\", \"?\", \"#\"];\n    var hostnameMaxLen = 255;\n    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;\n    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;\n    var hostlessProtocol = {\n      \"javascript\": true,\n      \"javascript:\": true\n    };\n    var slashedProtocol = {\n      \"http\": true,\n      \"https\": true,\n      \"ftp\": true,\n      \"gopher\": true,\n      \"file\": true,\n      \"http:\": true,\n      \"https:\": true,\n      \"ftp:\": true,\n      \"gopher:\": true,\n      \"file:\": true\n    };\n    function urlParse(url, slashesDenoteHost) {\n      if (url && url instanceof Url) {\n        return url;\n      }\n      var u = new Url();\n      u.parse(url, slashesDenoteHost);\n      return u;\n    }\n    Url.prototype.parse = function(url, slashesDenoteHost) {\n      var i, l, lowerProto, hec, slashes, rest = url;\n      rest = rest.trim();\n      if (!slashesDenoteHost && url.split(\"#\").length === 1) {\n        var simplePath = simplePathPattern.exec(rest);\n        if (simplePath) {\n          this.pathname = simplePath[1];\n          if (simplePath[2]) {\n            this.search = simplePath[2];\n          }\n          return this;\n        }\n      }\n      var proto = protocolPattern.exec(rest);\n      if (proto) {\n        proto = proto[0];\n        lowerProto = proto.toLowerCase();\n        this.protocol = proto;\n        rest = rest.substr(proto.length);\n      }\n      if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n        slashes = rest.substr(0, 2) === \"//\";\n        if (slashes && !(proto && hostlessProtocol[proto])) {\n          rest = rest.substr(2);\n          this.slashes = true;\n        }\n      }\n      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n        var hostEnd = -1;\n        for (i = 0; i < hostEndingChars.length; i++) {\n          hec = rest.indexOf(hostEndingChars[i]);\n          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n            hostEnd = hec;\n          }\n        }\n        var auth, atSign;\n        if (hostEnd === -1) {\n          atSign = rest.lastIndexOf(\"@\");\n        } else {\n          atSign = rest.lastIndexOf(\"@\", hostEnd);\n        }\n        if (atSign !== -1) {\n          auth = rest.slice(0, atSign);\n          rest = rest.slice(atSign + 1);\n          this.auth = auth;\n        }\n        hostEnd = -1;\n        for (i = 0; i < nonHostChars.length; i++) {\n          hec = rest.indexOf(nonHostChars[i]);\n          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n            hostEnd = hec;\n          }\n        }\n        if (hostEnd === -1) {\n          hostEnd = rest.length;\n        }\n        if (rest[hostEnd - 1] === \":\") {\n          hostEnd--;\n        }\n        var host = rest.slice(0, hostEnd);\n        rest = rest.slice(hostEnd);\n        this.parseHost(host);\n        this.hostname = this.hostname || \"\";\n        var ipv6Hostname = this.hostname[0] === \"[\" && this.hostname[this.hostname.length - 1] === \"]\";\n        if (!ipv6Hostname) {\n          var hostparts = this.hostname.split(/\\./);\n          for (i = 0, l = hostparts.length; i < l; i++) {\n            var part = hostparts[i];\n            if (!part) {\n              continue;\n            }\n            if (!part.match(hostnamePartPattern)) {\n              var newpart = \"\";\n              for (var j = 0, k = part.length; j < k; j++) {\n                if (part.charCodeAt(j) > 127) {\n                  newpart += \"x\";\n                } else {\n                  newpart += part[j];\n                }\n              }\n              if (!newpart.match(hostnamePartPattern)) {\n                var validParts = hostparts.slice(0, i);\n                var notHost = hostparts.slice(i + 1);\n                var bit = part.match(hostnamePartStart);\n                if (bit) {\n                  validParts.push(bit[1]);\n                  notHost.unshift(bit[2]);\n                }\n                if (notHost.length) {\n                  rest = notHost.join(\".\") + rest;\n                }\n                this.hostname = validParts.join(\".\");\n                break;\n              }\n            }\n          }\n        }\n        if (this.hostname.length > hostnameMaxLen) {\n          this.hostname = \"\";\n        }\n        if (ipv6Hostname) {\n          this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n        }\n      }\n      var hash = rest.indexOf(\"#\");\n      if (hash !== -1) {\n        this.hash = rest.substr(hash);\n        rest = rest.slice(0, hash);\n      }\n      var qm = rest.indexOf(\"?\");\n      if (qm !== -1) {\n        this.search = rest.substr(qm);\n        rest = rest.slice(0, qm);\n      }\n      if (rest) {\n        this.pathname = rest;\n      }\n      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n        this.pathname = \"\";\n      }\n      return this;\n    };\n    Url.prototype.parseHost = function(host) {\n      var port = portPattern.exec(host);\n      if (port) {\n        port = port[0];\n        if (port !== \":\") {\n          this.port = port.substr(1);\n        }\n        host = host.substr(0, host.length - port.length);\n      }\n      if (host) {\n        this.hostname = host;\n      }\n    };\n    module.exports = urlParse;\n  }\n});\n\n// node_modules/mdurl/index.js\nvar require_mdurl = __commonJS({\n  \"node_modules/mdurl/index.js\"(exports, module) {\n    \"use strict\";\n    module.exports.encode = require_encode();\n    module.exports.decode = require_decode();\n    module.exports.format = require_format();\n    module.exports.parse = require_parse();\n  }\n});\n\n// node_modules/uc.micro/properties/Any/regex.js\nvar require_regex2 = __commonJS({\n  \"node_modules/uc.micro/properties/Any/regex.js\"(exports, module) {\n    module.exports = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n  }\n});\n\n// node_modules/uc.micro/categories/Cc/regex.js\nvar require_regex3 = __commonJS({\n  \"node_modules/uc.micro/categories/Cc/regex.js\"(exports, module) {\n    module.exports = /[\\0-\\x1F\\x7F-\\x9F]/;\n  }\n});\n\n// node_modules/uc.micro/categories/Cf/regex.js\nvar require_regex4 = __commonJS({\n  \"node_modules/uc.micro/categories/Cf/regex.js\"(exports, module) {\n    module.exports = /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/;\n  }\n});\n\n// node_modules/uc.micro/categories/Z/regex.js\nvar require_regex5 = __commonJS({\n  \"node_modules/uc.micro/categories/Z/regex.js\"(exports, module) {\n    module.exports = /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n  }\n});\n\n// node_modules/uc.micro/index.js\nvar require_uc = __commonJS({\n  \"node_modules/uc.micro/index.js\"(exports) {\n    \"use strict\";\n    exports.Any = require_regex2();\n    exports.Cc = require_regex3();\n    exports.Cf = require_regex4();\n    exports.P = require_regex();\n    exports.Z = require_regex5();\n  }\n});\n\n// node_modules/markdown-it/lib/common/utils.js\nvar require_utils = __commonJS({\n  \"node_modules/markdown-it/lib/common/utils.js\"(exports) {\n    \"use strict\";\n    function _class(obj) {\n      return Object.prototype.toString.call(obj);\n    }\n    function isString(obj) {\n      return _class(obj) === \"[object String]\";\n    }\n    var _hasOwnProperty = Object.prototype.hasOwnProperty;\n    function has(object, key) {\n      return _hasOwnProperty.call(object, key);\n    }\n    function assign(obj) {\n      var sources = Array.prototype.slice.call(arguments, 1);\n      sources.forEach(function(source) {\n        if (!source) {\n          return;\n        }\n        if (typeof source !== \"object\") {\n          throw new TypeError(source + \"must be object\");\n        }\n        Object.keys(source).forEach(function(key) {\n          obj[key] = source[key];\n        });\n      });\n      return obj;\n    }\n    function arrayReplaceAt(src, pos, newElements) {\n      return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n    }\n    function isValidEntityCode(c) {\n      if (c >= 55296 && c <= 57343) {\n        return false;\n      }\n      if (c >= 64976 && c <= 65007) {\n        return false;\n      }\n      if ((c & 65535) === 65535 || (c & 65535) === 65534) {\n        return false;\n      }\n      if (c >= 0 && c <= 8) {\n        return false;\n      }\n      if (c === 11) {\n        return false;\n      }\n      if (c >= 14 && c <= 31) {\n        return false;\n      }\n      if (c >= 127 && c <= 159) {\n        return false;\n      }\n      if (c > 1114111) {\n        return false;\n      }\n      return true;\n    }\n    function fromCodePoint(c) {\n      if (c > 65535) {\n        c -= 65536;\n        var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);\n        return String.fromCharCode(surrogate1, surrogate2);\n      }\n      return String.fromCharCode(c);\n    }\n    var UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\n    var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\n    var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + \"|\" + ENTITY_RE.source, \"gi\");\n    var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n    var entities = require_entities2();\n    function replaceEntityPattern(match, name) {\n      var code2 = 0;\n      if (has(entities, name)) {\n        return entities[name];\n      }\n      if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {\n        code2 = name[1].toLowerCase() === \"x\" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n        if (isValidEntityCode(code2)) {\n          return fromCodePoint(code2);\n        }\n      }\n      return match;\n    }\n    function unescapeMd(str) {\n      if (str.indexOf(\"\\\\\") < 0) {\n        return str;\n      }\n      return str.replace(UNESCAPE_MD_RE, \"$1\");\n    }\n    function unescapeAll(str) {\n      if (str.indexOf(\"\\\\\") < 0 && str.indexOf(\"&\") < 0) {\n        return str;\n      }\n      return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {\n        if (escaped) {\n          return escaped;\n        }\n        return replaceEntityPattern(match, entity);\n      });\n    }\n    var HTML_ESCAPE_TEST_RE = /[&<>\"]/;\n    var HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\n    var HTML_REPLACEMENTS = {\n      \"&\": \"&amp;\",\n      \"<\": \"&lt;\",\n      \">\": \"&gt;\",\n      '\"': \"&quot;\"\n    };\n    function replaceUnsafeChar(ch) {\n      return HTML_REPLACEMENTS[ch];\n    }\n    function escapeHtml2(str) {\n      if (HTML_ESCAPE_TEST_RE.test(str)) {\n        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n      }\n      return str;\n    }\n    var REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n    function escapeRE(str) {\n      return str.replace(REGEXP_ESCAPE_RE, \"\\\\$&\");\n    }\n    function isSpace(code2) {\n      switch (code2) {\n        case 9:\n        case 32:\n          return true;\n      }\n      return false;\n    }\n    function isWhiteSpace(code2) {\n      if (code2 >= 8192 && code2 <= 8202) {\n        return true;\n      }\n      switch (code2) {\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 32:\n        case 160:\n        case 5760:\n        case 8239:\n        case 8287:\n        case 12288:\n          return true;\n      }\n      return false;\n    }\n    var UNICODE_PUNCT_RE = require_regex();\n    function isPunctChar(ch) {\n      return UNICODE_PUNCT_RE.test(ch);\n    }\n    function isMdAsciiPunct(ch) {\n      switch (ch) {\n        case 33:\n        case 34:\n        case 35:\n        case 36:\n        case 37:\n        case 38:\n        case 39:\n        case 40:\n        case 41:\n        case 42:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 58:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 63:\n        case 64:\n        case 91:\n        case 92:\n        case 93:\n        case 94:\n        case 95:\n        case 96:\n        case 123:\n        case 124:\n        case 125:\n        case 126:\n          return true;\n        default:\n          return false;\n      }\n    }\n    function normalizeReference(str) {\n      str = str.trim().replace(/\\s+/g, \" \");\n      if (\"\\u1E9E\".toLowerCase() === \"\\u1E7E\") {\n        str = str.replace(/ẞ/g, \"\\xDF\");\n      }\n      return str.toLowerCase().toUpperCase();\n    }\n    exports.lib = {};\n    exports.lib.mdurl = require_mdurl();\n    exports.lib.ucmicro = require_uc();\n    exports.assign = assign;\n    exports.isString = isString;\n    exports.has = has;\n    exports.unescapeMd = unescapeMd;\n    exports.unescapeAll = unescapeAll;\n    exports.isValidEntityCode = isValidEntityCode;\n    exports.fromCodePoint = fromCodePoint;\n    exports.escapeHtml = escapeHtml2;\n    exports.arrayReplaceAt = arrayReplaceAt;\n    exports.isSpace = isSpace;\n    exports.isWhiteSpace = isWhiteSpace;\n    exports.isMdAsciiPunct = isMdAsciiPunct;\n    exports.isPunctChar = isPunctChar;\n    exports.escapeRE = escapeRE;\n    exports.normalizeReference = normalizeReference;\n  }\n});\n\n// node_modules/markdown-it/lib/helpers/parse_link_label.js\nvar require_parse_link_label = __commonJS({\n  \"node_modules/markdown-it/lib/helpers/parse_link_label.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function parseLinkLabel(state, start, disableNested) {\n      var level, found, marker, prevPos, labelEnd = -1, max2 = state.posMax, oldPos = state.pos;\n      state.pos = start + 1;\n      level = 1;\n      while (state.pos < max2) {\n        marker = state.src.charCodeAt(state.pos);\n        if (marker === 93) {\n          level--;\n          if (level === 0) {\n            found = true;\n            break;\n          }\n        }\n        prevPos = state.pos;\n        state.md.inline.skipToken(state);\n        if (marker === 91) {\n          if (prevPos === state.pos - 1) {\n            level++;\n          } else if (disableNested) {\n            state.pos = oldPos;\n            return -1;\n          }\n        }\n      }\n      if (found) {\n        labelEnd = state.pos;\n      }\n      state.pos = oldPos;\n      return labelEnd;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/helpers/parse_link_destination.js\nvar require_parse_link_destination = __commonJS({\n  \"node_modules/markdown-it/lib/helpers/parse_link_destination.js\"(exports, module) {\n    \"use strict\";\n    var unescapeAll = require_utils().unescapeAll;\n    module.exports = function parseLinkDestination(str, pos, max2) {\n      var code2, level, lines = 0, start = pos, result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: \"\"\n      };\n      if (str.charCodeAt(pos) === 60) {\n        pos++;\n        while (pos < max2) {\n          code2 = str.charCodeAt(pos);\n          if (code2 === 10) {\n            return result;\n          }\n          if (code2 === 60) {\n            return result;\n          }\n          if (code2 === 62) {\n            result.pos = pos + 1;\n            result.str = unescapeAll(str.slice(start + 1, pos));\n            result.ok = true;\n            return result;\n          }\n          if (code2 === 92 && pos + 1 < max2) {\n            pos += 2;\n            continue;\n          }\n          pos++;\n        }\n        return result;\n      }\n      level = 0;\n      while (pos < max2) {\n        code2 = str.charCodeAt(pos);\n        if (code2 === 32) {\n          break;\n        }\n        if (code2 < 32 || code2 === 127) {\n          break;\n        }\n        if (code2 === 92 && pos + 1 < max2) {\n          if (str.charCodeAt(pos + 1) === 32) {\n            break;\n          }\n          pos += 2;\n          continue;\n        }\n        if (code2 === 40) {\n          level++;\n          if (level > 32) {\n            return result;\n          }\n        }\n        if (code2 === 41) {\n          if (level === 0) {\n            break;\n          }\n          level--;\n        }\n        pos++;\n      }\n      if (start === pos) {\n        return result;\n      }\n      if (level !== 0) {\n        return result;\n      }\n      result.str = unescapeAll(str.slice(start, pos));\n      result.lines = lines;\n      result.pos = pos;\n      result.ok = true;\n      return result;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/helpers/parse_link_title.js\nvar require_parse_link_title = __commonJS({\n  \"node_modules/markdown-it/lib/helpers/parse_link_title.js\"(exports, module) {\n    \"use strict\";\n    var unescapeAll = require_utils().unescapeAll;\n    module.exports = function parseLinkTitle(str, pos, max2) {\n      var code2, marker, lines = 0, start = pos, result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: \"\"\n      };\n      if (pos >= max2) {\n        return result;\n      }\n      marker = str.charCodeAt(pos);\n      if (marker !== 34 && marker !== 39 && marker !== 40) {\n        return result;\n      }\n      pos++;\n      if (marker === 40) {\n        marker = 41;\n      }\n      while (pos < max2) {\n        code2 = str.charCodeAt(pos);\n        if (code2 === marker) {\n          result.pos = pos + 1;\n          result.lines = lines;\n          result.str = unescapeAll(str.slice(start + 1, pos));\n          result.ok = true;\n          return result;\n        } else if (code2 === 40 && marker === 41) {\n          return result;\n        } else if (code2 === 10) {\n          lines++;\n        } else if (code2 === 92 && pos + 1 < max2) {\n          pos++;\n          if (str.charCodeAt(pos) === 10) {\n            lines++;\n          }\n        }\n        pos++;\n      }\n      return result;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/helpers/index.js\nvar require_helpers = __commonJS({\n  \"node_modules/markdown-it/lib/helpers/index.js\"(exports) {\n    \"use strict\";\n    exports.parseLinkLabel = require_parse_link_label();\n    exports.parseLinkDestination = require_parse_link_destination();\n    exports.parseLinkTitle = require_parse_link_title();\n  }\n});\n\n// node_modules/markdown-it/lib/renderer.js\nvar require_renderer = __commonJS({\n  \"node_modules/markdown-it/lib/renderer.js\"(exports, module) {\n    \"use strict\";\n    var assign = require_utils().assign;\n    var unescapeAll = require_utils().unescapeAll;\n    var escapeHtml2 = require_utils().escapeHtml;\n    var default_rules = {};\n    default_rules.code_inline = function(tokens, idx, options, env, slf) {\n      var token = tokens[idx];\n      return \"<code\" + slf.renderAttrs(token) + \">\" + escapeHtml2(tokens[idx].content) + \"</code>\";\n    };\n    default_rules.code_block = function(tokens, idx, options, env, slf) {\n      var token = tokens[idx];\n      return \"<pre\" + slf.renderAttrs(token) + \"><code>\" + escapeHtml2(tokens[idx].content) + \"</code></pre>\\n\";\n    };\n    default_rules.fence = function(tokens, idx, options, env, slf) {\n      var token = tokens[idx], info = token.info ? unescapeAll(token.info).trim() : \"\", langName = \"\", langAttrs = \"\", highlighted, i, arr, tmpAttrs, tmpToken;\n      if (info) {\n        arr = info.split(/(\\s+)/g);\n        langName = arr[0];\n        langAttrs = arr.slice(2).join(\"\");\n      }\n      if (options.highlight) {\n        highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml2(token.content);\n      } else {\n        highlighted = escapeHtml2(token.content);\n      }\n      if (highlighted.indexOf(\"<pre\") === 0) {\n        return highlighted + \"\\n\";\n      }\n      if (info) {\n        i = token.attrIndex(\"class\");\n        tmpAttrs = token.attrs ? token.attrs.slice() : [];\n        if (i < 0) {\n          tmpAttrs.push([\"class\", options.langPrefix + langName]);\n        } else {\n          tmpAttrs[i] = tmpAttrs[i].slice();\n          tmpAttrs[i][1] += \" \" + options.langPrefix + langName;\n        }\n        tmpToken = {\n          attrs: tmpAttrs\n        };\n        return \"<pre><code\" + slf.renderAttrs(tmpToken) + \">\" + highlighted + \"</code></pre>\\n\";\n      }\n      return \"<pre><code\" + slf.renderAttrs(token) + \">\" + highlighted + \"</code></pre>\\n\";\n    };\n    default_rules.image = function(tokens, idx, options, env, slf) {\n      var token = tokens[idx];\n      token.attrs[token.attrIndex(\"alt\")][1] = slf.renderInlineAsText(token.children, options, env);\n      return slf.renderToken(tokens, idx, options);\n    };\n    default_rules.hardbreak = function(tokens, idx, options) {\n      return options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\";\n    };\n    default_rules.softbreak = function(tokens, idx, options) {\n      return options.breaks ? options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\" : \"\\n\";\n    };\n    default_rules.text = function(tokens, idx) {\n      return escapeHtml2(tokens[idx].content);\n    };\n    default_rules.html_block = function(tokens, idx) {\n      return tokens[idx].content;\n    };\n    default_rules.html_inline = function(tokens, idx) {\n      return tokens[idx].content;\n    };\n    function Renderer() {\n      this.rules = assign({}, default_rules);\n    }\n    Renderer.prototype.renderAttrs = function renderAttrs(token) {\n      var i, l, result;\n      if (!token.attrs) {\n        return \"\";\n      }\n      result = \"\";\n      for (i = 0, l = token.attrs.length; i < l; i++) {\n        result += \" \" + escapeHtml2(token.attrs[i][0]) + '=\"' + escapeHtml2(token.attrs[i][1]) + '\"';\n      }\n      return result;\n    };\n    Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n      var nextToken, result = \"\", needLf = false, token = tokens[idx];\n      if (token.hidden) {\n        return \"\";\n      }\n      if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n        result += \"\\n\";\n      }\n      result += (token.nesting === -1 ? \"</\" : \"<\") + token.tag;\n      result += this.renderAttrs(token);\n      if (token.nesting === 0 && options.xhtmlOut) {\n        result += \" /\";\n      }\n      if (token.block) {\n        needLf = true;\n        if (token.nesting === 1) {\n          if (idx + 1 < tokens.length) {\n            nextToken = tokens[idx + 1];\n            if (nextToken.type === \"inline\" || nextToken.hidden) {\n              needLf = false;\n            } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n              needLf = false;\n            }\n          }\n        }\n      }\n      result += needLf ? \">\\n\" : \">\";\n      return result;\n    };\n    Renderer.prototype.renderInline = function(tokens, options, env) {\n      var type, result = \"\", rules = this.rules;\n      for (var i = 0, len = tokens.length; i < len; i++) {\n        type = tokens[i].type;\n        if (typeof rules[type] !== \"undefined\") {\n          result += rules[type](tokens, i, options, env, this);\n        } else {\n          result += this.renderToken(tokens, i, options);\n        }\n      }\n      return result;\n    };\n    Renderer.prototype.renderInlineAsText = function(tokens, options, env) {\n      var result = \"\";\n      for (var i = 0, len = tokens.length; i < len; i++) {\n        if (tokens[i].type === \"text\") {\n          result += tokens[i].content;\n        } else if (tokens[i].type === \"image\") {\n          result += this.renderInlineAsText(tokens[i].children, options, env);\n        } else if (tokens[i].type === \"softbreak\") {\n          result += \"\\n\";\n        }\n      }\n      return result;\n    };\n    Renderer.prototype.render = function(tokens, options, env) {\n      var i, len, type, result = \"\", rules = this.rules;\n      for (i = 0, len = tokens.length; i < len; i++) {\n        type = tokens[i].type;\n        if (type === \"inline\") {\n          result += this.renderInline(tokens[i].children, options, env);\n        } else if (typeof rules[type] !== \"undefined\") {\n          result += rules[tokens[i].type](tokens, i, options, env, this);\n        } else {\n          result += this.renderToken(tokens, i, options, env);\n        }\n      }\n      return result;\n    };\n    module.exports = Renderer;\n  }\n});\n\n// node_modules/markdown-it/lib/ruler.js\nvar require_ruler = __commonJS({\n  \"node_modules/markdown-it/lib/ruler.js\"(exports, module) {\n    \"use strict\";\n    function Ruler() {\n      this.__rules__ = [];\n      this.__cache__ = null;\n    }\n    Ruler.prototype.__find__ = function(name) {\n      for (var i = 0; i < this.__rules__.length; i++) {\n        if (this.__rules__[i].name === name) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    Ruler.prototype.__compile__ = function() {\n      var self = this;\n      var chains = [\"\"];\n      self.__rules__.forEach(function(rule) {\n        if (!rule.enabled) {\n          return;\n        }\n        rule.alt.forEach(function(altName) {\n          if (chains.indexOf(altName) < 0) {\n            chains.push(altName);\n          }\n        });\n      });\n      self.__cache__ = {};\n      chains.forEach(function(chain) {\n        self.__cache__[chain] = [];\n        self.__rules__.forEach(function(rule) {\n          if (!rule.enabled) {\n            return;\n          }\n          if (chain && rule.alt.indexOf(chain) < 0) {\n            return;\n          }\n          self.__cache__[chain].push(rule.fn);\n        });\n      });\n    };\n    Ruler.prototype.at = function(name, fn, options) {\n      var index = this.__find__(name);\n      var opt = options || {};\n      if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + name);\n      }\n      this.__rules__[index].fn = fn;\n      this.__rules__[index].alt = opt.alt || [];\n      this.__cache__ = null;\n    };\n    Ruler.prototype.before = function(beforeName, ruleName, fn, options) {\n      var index = this.__find__(beforeName);\n      var opt = options || {};\n      if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + beforeName);\n      }\n      this.__rules__.splice(index, 0, {\n        name: ruleName,\n        enabled: true,\n        fn,\n        alt: opt.alt || []\n      });\n      this.__cache__ = null;\n    };\n    Ruler.prototype.after = function(afterName, ruleName, fn, options) {\n      var index = this.__find__(afterName);\n      var opt = options || {};\n      if (index === -1) {\n        throw new Error(\"Parser rule not found: \" + afterName);\n      }\n      this.__rules__.splice(index + 1, 0, {\n        name: ruleName,\n        enabled: true,\n        fn,\n        alt: opt.alt || []\n      });\n      this.__cache__ = null;\n    };\n    Ruler.prototype.push = function(ruleName, fn, options) {\n      var opt = options || {};\n      this.__rules__.push({\n        name: ruleName,\n        enabled: true,\n        fn,\n        alt: opt.alt || []\n      });\n      this.__cache__ = null;\n    };\n    Ruler.prototype.enable = function(list2, ignoreInvalid) {\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      var result = [];\n      list2.forEach(function(name) {\n        var idx = this.__find__(name);\n        if (idx < 0) {\n          if (ignoreInvalid) {\n            return;\n          }\n          throw new Error(\"Rules manager: invalid rule name \" + name);\n        }\n        this.__rules__[idx].enabled = true;\n        result.push(name);\n      }, this);\n      this.__cache__ = null;\n      return result;\n    };\n    Ruler.prototype.enableOnly = function(list2, ignoreInvalid) {\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      this.__rules__.forEach(function(rule) {\n        rule.enabled = false;\n      });\n      this.enable(list2, ignoreInvalid);\n    };\n    Ruler.prototype.disable = function(list2, ignoreInvalid) {\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      var result = [];\n      list2.forEach(function(name) {\n        var idx = this.__find__(name);\n        if (idx < 0) {\n          if (ignoreInvalid) {\n            return;\n          }\n          throw new Error(\"Rules manager: invalid rule name \" + name);\n        }\n        this.__rules__[idx].enabled = false;\n        result.push(name);\n      }, this);\n      this.__cache__ = null;\n      return result;\n    };\n    Ruler.prototype.getRules = function(chainName) {\n      if (this.__cache__ === null) {\n        this.__compile__();\n      }\n      return this.__cache__[chainName] || [];\n    };\n    module.exports = Ruler;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/normalize.js\nvar require_normalize = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/normalize.js\"(exports, module) {\n    \"use strict\";\n    var NEWLINES_RE = /\\r\\n?|\\n/g;\n    var NULL_RE = /\\0/g;\n    module.exports = function normalize(state) {\n      var str;\n      str = state.src.replace(NEWLINES_RE, \"\\n\");\n      str = str.replace(NULL_RE, \"\\uFFFD\");\n      state.src = str;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/block.js\nvar require_block = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/block.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function block3(state) {\n      var token;\n      if (state.inlineMode) {\n        token = new state.Token(\"inline\", \"\", 0);\n        token.content = state.src;\n        token.map = [0, 1];\n        token.children = [];\n        state.tokens.push(token);\n      } else {\n        state.md.block.parse(state.src, state.md, state.env, state.tokens);\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/inline.js\nvar require_inline = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/inline.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function inline3(state) {\n      var tokens = state.tokens, tok, i, l;\n      for (i = 0, l = tokens.length; i < l; i++) {\n        tok = tokens[i];\n        if (tok.type === \"inline\") {\n          state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/linkify.js\nvar require_linkify = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/linkify.js\"(exports, module) {\n    \"use strict\";\n    var arrayReplaceAt = require_utils().arrayReplaceAt;\n    function isLinkOpen(str) {\n      return /^<a[>\\s]/i.test(str);\n    }\n    function isLinkClose(str) {\n      return /^<\\/a\\s*>/i.test(str);\n    }\n    module.exports = function linkify(state) {\n      var i, j, l, tokens, token, currentToken, nodes, ln, text2, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;\n      if (!state.md.options.linkify) {\n        return;\n      }\n      for (j = 0, l = blockTokens.length; j < l; j++) {\n        if (blockTokens[j].type !== \"inline\" || !state.md.linkify.pretest(blockTokens[j].content)) {\n          continue;\n        }\n        tokens = blockTokens[j].children;\n        htmlLinkLevel = 0;\n        for (i = tokens.length - 1; i >= 0; i--) {\n          currentToken = tokens[i];\n          if (currentToken.type === \"link_close\") {\n            i--;\n            while (tokens[i].level !== currentToken.level && tokens[i].type !== \"link_open\") {\n              i--;\n            }\n            continue;\n          }\n          if (currentToken.type === \"html_inline\") {\n            if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n              htmlLinkLevel--;\n            }\n            if (isLinkClose(currentToken.content)) {\n              htmlLinkLevel++;\n            }\n          }\n          if (htmlLinkLevel > 0) {\n            continue;\n          }\n          if (currentToken.type === \"text\" && state.md.linkify.test(currentToken.content)) {\n            text2 = currentToken.content;\n            links = state.md.linkify.match(text2);\n            nodes = [];\n            level = currentToken.level;\n            lastPos = 0;\n            for (ln = 0; ln < links.length; ln++) {\n              url = links[ln].url;\n              fullUrl = state.md.normalizeLink(url);\n              if (!state.md.validateLink(fullUrl)) {\n                continue;\n              }\n              urlText = links[ln].text;\n              if (!links[ln].schema) {\n                urlText = state.md.normalizeLinkText(\"http://\" + urlText).replace(/^http:\\/\\//, \"\");\n              } else if (links[ln].schema === \"mailto:\" && !/^mailto:/i.test(urlText)) {\n                urlText = state.md.normalizeLinkText(\"mailto:\" + urlText).replace(/^mailto:/, \"\");\n              } else {\n                urlText = state.md.normalizeLinkText(urlText);\n              }\n              pos = links[ln].index;\n              if (pos > lastPos) {\n                token = new state.Token(\"text\", \"\", 0);\n                token.content = text2.slice(lastPos, pos);\n                token.level = level;\n                nodes.push(token);\n              }\n              token = new state.Token(\"link_open\", \"a\", 1);\n              token.attrs = [[\"href\", fullUrl]];\n              token.level = level++;\n              token.markup = \"linkify\";\n              token.info = \"auto\";\n              nodes.push(token);\n              token = new state.Token(\"text\", \"\", 0);\n              token.content = urlText;\n              token.level = level;\n              nodes.push(token);\n              token = new state.Token(\"link_close\", \"a\", -1);\n              token.level = --level;\n              token.markup = \"linkify\";\n              token.info = \"auto\";\n              nodes.push(token);\n              lastPos = links[ln].lastIndex;\n            }\n            if (lastPos < text2.length) {\n              token = new state.Token(\"text\", \"\", 0);\n              token.content = text2.slice(lastPos);\n              token.level = level;\n              nodes.push(token);\n            }\n            blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n          }\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/replacements.js\nvar require_replacements = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/replacements.js\"(exports, module) {\n    \"use strict\";\n    var RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n    var SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n    var SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\n    var SCOPED_ABBR = {\n      c: \"\\xA9\",\n      r: \"\\xAE\",\n      p: \"\\xA7\",\n      tm: \"\\u2122\"\n    };\n    function replaceFn(match, name) {\n      return SCOPED_ABBR[name.toLowerCase()];\n    }\n    function replace_scoped(inlineTokens) {\n      var i, token, inside_autolink = 0;\n      for (i = inlineTokens.length - 1; i >= 0; i--) {\n        token = inlineTokens[i];\n        if (token.type === \"text\" && !inside_autolink) {\n          token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n        }\n        if (token.type === \"link_open\" && token.info === \"auto\") {\n          inside_autolink--;\n        }\n        if (token.type === \"link_close\" && token.info === \"auto\") {\n          inside_autolink++;\n        }\n      }\n    }\n    function replace_rare(inlineTokens) {\n      var i, token, inside_autolink = 0;\n      for (i = inlineTokens.length - 1; i >= 0; i--) {\n        token = inlineTokens[i];\n        if (token.type === \"text\" && !inside_autolink) {\n          if (RARE_RE.test(token.content)) {\n            token.content = token.content.replace(/\\+-/g, \"\\xB1\").replace(/\\.{2,}/g, \"\\u2026\").replace(/([?!])…/g, \"$1..\").replace(/([?!]){4,}/g, \"$1$1$1\").replace(/,{2,}/g, \",\").replace(/(^|[^-])---(?=[^-]|$)/mg, \"$1\\u2014\").replace(/(^|\\s)--(?=\\s|$)/mg, \"$1\\u2013\").replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, \"$1\\u2013\");\n          }\n        }\n        if (token.type === \"link_open\" && token.info === \"auto\") {\n          inside_autolink--;\n        }\n        if (token.type === \"link_close\" && token.info === \"auto\") {\n          inside_autolink++;\n        }\n      }\n    }\n    module.exports = function replace(state) {\n      var blkIdx;\n      if (!state.md.options.typographer) {\n        return;\n      }\n      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n        if (state.tokens[blkIdx].type !== \"inline\") {\n          continue;\n        }\n        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n          replace_scoped(state.tokens[blkIdx].children);\n        }\n        if (RARE_RE.test(state.tokens[blkIdx].content)) {\n          replace_rare(state.tokens[blkIdx].children);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/smartquotes.js\nvar require_smartquotes = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/smartquotes.js\"(exports, module) {\n    \"use strict\";\n    var isWhiteSpace = require_utils().isWhiteSpace;\n    var isPunctChar = require_utils().isPunctChar;\n    var isMdAsciiPunct = require_utils().isMdAsciiPunct;\n    var QUOTE_TEST_RE = /['\"]/;\n    var QUOTE_RE = /['\"]/g;\n    var APOSTROPHE = \"\\u2019\";\n    function replaceAt(str, index, ch) {\n      return str.substr(0, index) + ch + str.substr(index + 1);\n    }\n    function process_inlines(tokens, state) {\n      var i, token, text2, t, pos, max2, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n      stack = [];\n      for (i = 0; i < tokens.length; i++) {\n        token = tokens[i];\n        thisLevel = tokens[i].level;\n        for (j = stack.length - 1; j >= 0; j--) {\n          if (stack[j].level <= thisLevel) {\n            break;\n          }\n        }\n        stack.length = j + 1;\n        if (token.type !== \"text\") {\n          continue;\n        }\n        text2 = token.content;\n        pos = 0;\n        max2 = text2.length;\n        OUTER:\n          while (pos < max2) {\n            QUOTE_RE.lastIndex = pos;\n            t = QUOTE_RE.exec(text2);\n            if (!t) {\n              break;\n            }\n            canOpen = canClose = true;\n            pos = t.index + 1;\n            isSingle = t[0] === \"'\";\n            lastChar = 32;\n            if (t.index - 1 >= 0) {\n              lastChar = text2.charCodeAt(t.index - 1);\n            } else {\n              for (j = i - 1; j >= 0; j--) {\n                if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\")\n                  break;\n                if (!tokens[j].content)\n                  continue;\n                lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n                break;\n              }\n            }\n            nextChar = 32;\n            if (pos < max2) {\n              nextChar = text2.charCodeAt(pos);\n            } else {\n              for (j = i + 1; j < tokens.length; j++) {\n                if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\")\n                  break;\n                if (!tokens[j].content)\n                  continue;\n                nextChar = tokens[j].content.charCodeAt(0);\n                break;\n              }\n            }\n            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n            isLastWhiteSpace = isWhiteSpace(lastChar);\n            isNextWhiteSpace = isWhiteSpace(nextChar);\n            if (isNextWhiteSpace) {\n              canOpen = false;\n            } else if (isNextPunctChar) {\n              if (!(isLastWhiteSpace || isLastPunctChar)) {\n                canOpen = false;\n              }\n            }\n            if (isLastWhiteSpace) {\n              canClose = false;\n            } else if (isLastPunctChar) {\n              if (!(isNextWhiteSpace || isNextPunctChar)) {\n                canClose = false;\n              }\n            }\n            if (nextChar === 34 && t[0] === '\"') {\n              if (lastChar >= 48 && lastChar <= 57) {\n                canClose = canOpen = false;\n              }\n            }\n            if (canOpen && canClose) {\n              canOpen = isLastPunctChar;\n              canClose = isNextPunctChar;\n            }\n            if (!canOpen && !canClose) {\n              if (isSingle) {\n                token.content = replaceAt(token.content, t.index, APOSTROPHE);\n              }\n              continue;\n            }\n            if (canClose) {\n              for (j = stack.length - 1; j >= 0; j--) {\n                item2 = stack[j];\n                if (stack[j].level < thisLevel) {\n                  break;\n                }\n                if (item2.single === isSingle && stack[j].level === thisLevel) {\n                  item2 = stack[j];\n                  if (isSingle) {\n                    openQuote = state.md.options.quotes[2];\n                    closeQuote = state.md.options.quotes[3];\n                  } else {\n                    openQuote = state.md.options.quotes[0];\n                    closeQuote = state.md.options.quotes[1];\n                  }\n                  token.content = replaceAt(token.content, t.index, closeQuote);\n                  tokens[item2.token].content = replaceAt(tokens[item2.token].content, item2.pos, openQuote);\n                  pos += closeQuote.length - 1;\n                  if (item2.token === i) {\n                    pos += openQuote.length - 1;\n                  }\n                  text2 = token.content;\n                  max2 = text2.length;\n                  stack.length = j;\n                  continue OUTER;\n                }\n              }\n            }\n            if (canOpen) {\n              stack.push({\n                token: i,\n                pos: t.index,\n                single: isSingle,\n                level: thisLevel\n              });\n            } else if (canClose && isSingle) {\n              token.content = replaceAt(token.content, t.index, APOSTROPHE);\n            }\n          }\n      }\n    }\n    module.exports = function smartquotes(state) {\n      var blkIdx;\n      if (!state.md.options.typographer) {\n        return;\n      }\n      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n        if (state.tokens[blkIdx].type !== \"inline\" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n          continue;\n        }\n        process_inlines(state.tokens[blkIdx].children, state);\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/token.js\nvar require_token = __commonJS({\n  \"node_modules/markdown-it/lib/token.js\"(exports, module) {\n    \"use strict\";\n    function Token(type, tag, nesting) {\n      this.type = type;\n      this.tag = tag;\n      this.attrs = null;\n      this.map = null;\n      this.nesting = nesting;\n      this.level = 0;\n      this.children = null;\n      this.content = \"\";\n      this.markup = \"\";\n      this.info = \"\";\n      this.meta = null;\n      this.block = false;\n      this.hidden = false;\n    }\n    Token.prototype.attrIndex = function attrIndex(name) {\n      var attrs, i, len;\n      if (!this.attrs) {\n        return -1;\n      }\n      attrs = this.attrs;\n      for (i = 0, len = attrs.length; i < len; i++) {\n        if (attrs[i][0] === name) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    Token.prototype.attrPush = function attrPush(attrData) {\n      if (this.attrs) {\n        this.attrs.push(attrData);\n      } else {\n        this.attrs = [attrData];\n      }\n    };\n    Token.prototype.attrSet = function attrSet(name, value) {\n      var idx = this.attrIndex(name), attrData = [name, value];\n      if (idx < 0) {\n        this.attrPush(attrData);\n      } else {\n        this.attrs[idx] = attrData;\n      }\n    };\n    Token.prototype.attrGet = function attrGet(name) {\n      var idx = this.attrIndex(name), value = null;\n      if (idx >= 0) {\n        value = this.attrs[idx][1];\n      }\n      return value;\n    };\n    Token.prototype.attrJoin = function attrJoin(name, value) {\n      var idx = this.attrIndex(name);\n      if (idx < 0) {\n        this.attrPush([name, value]);\n      } else {\n        this.attrs[idx][1] = this.attrs[idx][1] + \" \" + value;\n      }\n    };\n    module.exports = Token;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_core/state_core.js\nvar require_state_core = __commonJS({\n  \"node_modules/markdown-it/lib/rules_core/state_core.js\"(exports, module) {\n    \"use strict\";\n    var Token = require_token();\n    function StateCore(src, md, env) {\n      this.src = src;\n      this.env = env;\n      this.tokens = [];\n      this.inlineMode = false;\n      this.md = md;\n    }\n    StateCore.prototype.Token = Token;\n    module.exports = StateCore;\n  }\n});\n\n// node_modules/markdown-it/lib/parser_core.js\nvar require_parser_core = __commonJS({\n  \"node_modules/markdown-it/lib/parser_core.js\"(exports, module) {\n    \"use strict\";\n    var Ruler = require_ruler();\n    var _rules = [\n      [\"normalize\", require_normalize()],\n      [\"block\", require_block()],\n      [\"inline\", require_inline()],\n      [\"linkify\", require_linkify()],\n      [\"replacements\", require_replacements()],\n      [\"smartquotes\", require_smartquotes()]\n    ];\n    function Core() {\n      this.ruler = new Ruler();\n      for (var i = 0; i < _rules.length; i++) {\n        this.ruler.push(_rules[i][0], _rules[i][1]);\n      }\n    }\n    Core.prototype.process = function(state) {\n      var i, l, rules;\n      rules = this.ruler.getRules(\"\");\n      for (i = 0, l = rules.length; i < l; i++) {\n        rules[i](state);\n      }\n    };\n    Core.prototype.State = require_state_core();\n    module.exports = Core;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/table.js\nvar require_table = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/table.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    function getLine2(state, line) {\n      var pos = state.bMarks[line] + state.tShift[line], max2 = state.eMarks[line];\n      return state.src.substr(pos, max2 - pos);\n    }\n    function escapedSplit(str) {\n      var result = [], pos = 0, max2 = str.length, ch, isEscaped = false, lastPos = 0, current = \"\";\n      ch = str.charCodeAt(pos);\n      while (pos < max2) {\n        if (ch === 124) {\n          if (!isEscaped) {\n            result.push(current + str.substring(lastPos, pos));\n            current = \"\";\n            lastPos = pos + 1;\n          } else {\n            current += str.substring(lastPos, pos - 1);\n            lastPos = pos;\n          }\n        }\n        isEscaped = ch === 92;\n        pos++;\n        ch = str.charCodeAt(pos);\n      }\n      result.push(current + str.substring(lastPos));\n      return result;\n    }\n    module.exports = function table3(state, startLine, endLine, silent) {\n      var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;\n      if (startLine + 2 > endLine) {\n        return false;\n      }\n      nextLine = startLine + 1;\n      if (state.sCount[nextLine] < state.blkIndent) {\n        return false;\n      }\n      if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      if (pos >= state.eMarks[nextLine]) {\n        return false;\n      }\n      firstCh = state.src.charCodeAt(pos++);\n      if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {\n        return false;\n      }\n      if (pos >= state.eMarks[nextLine]) {\n        return false;\n      }\n      secondCh = state.src.charCodeAt(pos++);\n      if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {\n        return false;\n      }\n      if (firstCh === 45 && isSpace(secondCh)) {\n        return false;\n      }\n      while (pos < state.eMarks[nextLine]) {\n        ch = state.src.charCodeAt(pos);\n        if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {\n          return false;\n        }\n        pos++;\n      }\n      lineText = getLine2(state, startLine + 1);\n      columns = lineText.split(\"|\");\n      aligns = [];\n      for (i = 0; i < columns.length; i++) {\n        t = columns[i].trim();\n        if (!t) {\n          if (i === 0 || i === columns.length - 1) {\n            continue;\n          } else {\n            return false;\n          }\n        }\n        if (!/^:?-+:?$/.test(t)) {\n          return false;\n        }\n        if (t.charCodeAt(t.length - 1) === 58) {\n          aligns.push(t.charCodeAt(0) === 58 ? \"center\" : \"right\");\n        } else if (t.charCodeAt(0) === 58) {\n          aligns.push(\"left\");\n        } else {\n          aligns.push(\"\");\n        }\n      }\n      lineText = getLine2(state, startLine).trim();\n      if (lineText.indexOf(\"|\") === -1) {\n        return false;\n      }\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      columns = escapedSplit(lineText);\n      if (columns.length && columns[0] === \"\")\n        columns.shift();\n      if (columns.length && columns[columns.length - 1] === \"\")\n        columns.pop();\n      columnCount = columns.length;\n      if (columnCount === 0 || columnCount !== aligns.length) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      oldParentType = state.parentType;\n      state.parentType = \"table\";\n      terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n      token = state.push(\"table_open\", \"table\", 1);\n      token.map = tableLines = [startLine, 0];\n      token = state.push(\"thead_open\", \"thead\", 1);\n      token.map = [startLine, startLine + 1];\n      token = state.push(\"tr_open\", \"tr\", 1);\n      token.map = [startLine, startLine + 1];\n      for (i = 0; i < columns.length; i++) {\n        token = state.push(\"th_open\", \"th\", 1);\n        if (aligns[i]) {\n          token.attrs = [[\"style\", \"text-align:\" + aligns[i]]];\n        }\n        token = state.push(\"inline\", \"\", 0);\n        token.content = columns[i].trim();\n        token.children = [];\n        token = state.push(\"th_close\", \"th\", -1);\n      }\n      token = state.push(\"tr_close\", \"tr\", -1);\n      token = state.push(\"thead_close\", \"thead\", -1);\n      for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n        if (state.sCount[nextLine] < state.blkIndent) {\n          break;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n        lineText = getLine2(state, nextLine).trim();\n        if (!lineText) {\n          break;\n        }\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n          break;\n        }\n        columns = escapedSplit(lineText);\n        if (columns.length && columns[0] === \"\")\n          columns.shift();\n        if (columns.length && columns[columns.length - 1] === \"\")\n          columns.pop();\n        if (nextLine === startLine + 2) {\n          token = state.push(\"tbody_open\", \"tbody\", 1);\n          token.map = tbodyLines = [startLine + 2, 0];\n        }\n        token = state.push(\"tr_open\", \"tr\", 1);\n        token.map = [nextLine, nextLine + 1];\n        for (i = 0; i < columnCount; i++) {\n          token = state.push(\"td_open\", \"td\", 1);\n          if (aligns[i]) {\n            token.attrs = [[\"style\", \"text-align:\" + aligns[i]]];\n          }\n          token = state.push(\"inline\", \"\", 0);\n          token.content = columns[i] ? columns[i].trim() : \"\";\n          token.children = [];\n          token = state.push(\"td_close\", \"td\", -1);\n        }\n        token = state.push(\"tr_close\", \"tr\", -1);\n      }\n      if (tbodyLines) {\n        token = state.push(\"tbody_close\", \"tbody\", -1);\n        tbodyLines[1] = nextLine;\n      }\n      token = state.push(\"table_close\", \"table\", -1);\n      tableLines[1] = nextLine;\n      state.parentType = oldParentType;\n      state.line = nextLine;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/code.js\nvar require_code = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/code.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function code2(state, startLine, endLine) {\n      if (state.md.options.allowIndentation) {\n        return false;\n      }\n      var nextLine, last, token;\n      if (state.sCount[startLine] - state.blkIndent < 4) {\n        return false;\n      }\n      last = nextLine = startLine + 1;\n      while (nextLine < endLine) {\n        if (state.isEmpty(nextLine)) {\n          nextLine++;\n          continue;\n        }\n        if (state.sCount[nextLine] - state.blkIndent >= 4) {\n          nextLine++;\n          last = nextLine;\n          continue;\n        }\n        break;\n      }\n      state.line = last;\n      token = state.push(\"code_block\", \"code\", 0);\n      token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + \"\\n\";\n      token.map = [startLine, state.line];\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/fence.js\nvar require_fence = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/fence.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function fence3(state, startLine, endLine, silent) {\n      var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (pos + 3 > max2) {\n        return false;\n      }\n      marker = state.src.charCodeAt(pos);\n      if (marker !== 126 && marker !== 96) {\n        return false;\n      }\n      mem = pos;\n      pos = state.skipChars(pos, marker);\n      len = pos - mem;\n      if (len < 3) {\n        return false;\n      }\n      markup = state.src.slice(mem, pos);\n      params = state.src.slice(pos, max2);\n      if (marker === 96) {\n        if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n          return false;\n        }\n      }\n      if (silent) {\n        return true;\n      }\n      nextLine = startLine;\n      for (; ; ) {\n        nextLine++;\n        if (nextLine >= endLine) {\n          break;\n        }\n        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n        max2 = state.eMarks[nextLine];\n        if (pos < max2 && state.sCount[nextLine] < state.blkIndent) {\n          break;\n        }\n        if (state.src.charCodeAt(pos) !== marker) {\n          continue;\n        }\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n          continue;\n        }\n        pos = state.skipChars(pos, marker);\n        if (pos - mem < len) {\n          continue;\n        }\n        pos = state.skipSpaces(pos);\n        if (pos < max2) {\n          continue;\n        }\n        haveEndMarker = true;\n        break;\n      }\n      len = state.sCount[startLine];\n      state.line = nextLine + (haveEndMarker ? 1 : 0);\n      token = state.push(\"fence\", \"code\", 0);\n      token.info = params;\n      token.content = state.getLines(startLine + 1, nextLine, len, true);\n      token.markup = markup;\n      token.map = [startLine, state.line];\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/blockquote.js\nvar require_blockquote = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/blockquote.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    module.exports = function blockquote2(state, startLine, endLine, silent) {\n      var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (state.src.charCodeAt(pos++) !== 62) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      initial = offset = state.sCount[startLine] + 1;\n      if (state.src.charCodeAt(pos) === 32) {\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 9) {\n        spaceAfterMarker = true;\n        if ((state.bsCount[startLine] + offset) % 4 === 3) {\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n      oldBMarks = [state.bMarks[startLine]];\n      state.bMarks[startLine] = pos;\n      while (pos < max2) {\n        ch = state.src.charCodeAt(pos);\n        if (isSpace(ch)) {\n          if (ch === 9) {\n            offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n        pos++;\n      }\n      oldBSCount = [state.bsCount[startLine]];\n      state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n      lastLineEmpty = pos >= max2;\n      oldSCount = [state.sCount[startLine]];\n      state.sCount[startLine] = offset - initial;\n      oldTShift = [state.tShift[startLine]];\n      state.tShift[startLine] = pos - state.bMarks[startLine];\n      terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n      oldParentType = state.parentType;\n      state.parentType = \"blockquote\";\n      for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n        isOutdented = state.sCount[nextLine] < state.blkIndent;\n        pos = state.bMarks[nextLine] + state.tShift[nextLine];\n        max2 = state.eMarks[nextLine];\n        if (pos >= max2) {\n          break;\n        }\n        if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {\n          initial = offset = state.sCount[nextLine] + 1;\n          if (state.src.charCodeAt(pos) === 32) {\n            pos++;\n            initial++;\n            offset++;\n            adjustTab = false;\n            spaceAfterMarker = true;\n          } else if (state.src.charCodeAt(pos) === 9) {\n            spaceAfterMarker = true;\n            if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n              pos++;\n              initial++;\n              offset++;\n              adjustTab = false;\n            } else {\n              adjustTab = true;\n            }\n          } else {\n            spaceAfterMarker = false;\n          }\n          oldBMarks.push(state.bMarks[nextLine]);\n          state.bMarks[nextLine] = pos;\n          while (pos < max2) {\n            ch = state.src.charCodeAt(pos);\n            if (isSpace(ch)) {\n              if (ch === 9) {\n                offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n              } else {\n                offset++;\n              }\n            } else {\n              break;\n            }\n            pos++;\n          }\n          lastLineEmpty = pos >= max2;\n          oldBSCount.push(state.bsCount[nextLine]);\n          state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n          oldSCount.push(state.sCount[nextLine]);\n          state.sCount[nextLine] = offset - initial;\n          oldTShift.push(state.tShift[nextLine]);\n          state.tShift[nextLine] = pos - state.bMarks[nextLine];\n          continue;\n        }\n        if (lastLineEmpty) {\n          break;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          state.lineMax = nextLine;\n          if (state.blkIndent !== 0) {\n            oldBMarks.push(state.bMarks[nextLine]);\n            oldBSCount.push(state.bsCount[nextLine]);\n            oldTShift.push(state.tShift[nextLine]);\n            oldSCount.push(state.sCount[nextLine]);\n            state.sCount[nextLine] -= state.blkIndent;\n          }\n          break;\n        }\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] = -1;\n      }\n      oldIndent = state.blkIndent;\n      state.blkIndent = 0;\n      token = state.push(\"blockquote_open\", \"blockquote\", 1);\n      token.markup = \">\";\n      token.map = lines = [startLine, 0];\n      state.md.block.tokenize(state, startLine, nextLine);\n      token = state.push(\"blockquote_close\", \"blockquote\", -1);\n      token.markup = \">\";\n      state.lineMax = oldLineMax;\n      state.parentType = oldParentType;\n      lines[1] = state.line;\n      for (i = 0; i < oldTShift.length; i++) {\n        state.bMarks[i + startLine] = oldBMarks[i];\n        state.tShift[i + startLine] = oldTShift[i];\n        state.sCount[i + startLine] = oldSCount[i];\n        state.bsCount[i + startLine] = oldBSCount[i];\n      }\n      state.blkIndent = oldIndent;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/hr.js\nvar require_hr = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/hr.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    module.exports = function hr2(state, startLine, endLine, silent) {\n      var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      marker = state.src.charCodeAt(pos++);\n      if (marker !== 42 && marker !== 45 && marker !== 95) {\n        return false;\n      }\n      cnt = 1;\n      while (pos < max2) {\n        ch = state.src.charCodeAt(pos++);\n        if (ch !== marker && !isSpace(ch)) {\n          return false;\n        }\n        if (ch === marker) {\n          cnt++;\n        }\n      }\n      if (cnt < 3) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      state.line = startLine + 1;\n      token = state.push(\"hr\", \"hr\", 0);\n      token.map = [startLine, state.line];\n      token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/list.js\nvar require_list = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/list.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    function skipBulletListMarker(state, startLine) {\n      var marker, pos, max2, ch;\n      pos = state.bMarks[startLine] + state.tShift[startLine];\n      max2 = state.eMarks[startLine];\n      marker = state.src.charCodeAt(pos++);\n      if (marker !== 42 && marker !== 45 && marker !== 43) {\n        return -1;\n      }\n      if (pos < max2) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          return -1;\n        }\n      }\n      return pos;\n    }\n    function skipOrderedListMarker(state, startLine) {\n      var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max2 = state.eMarks[startLine];\n      if (pos + 1 >= max2) {\n        return -1;\n      }\n      ch = state.src.charCodeAt(pos++);\n      if (ch < 48 || ch > 57) {\n        return -1;\n      }\n      for (; ; ) {\n        if (pos >= max2) {\n          return -1;\n        }\n        ch = state.src.charCodeAt(pos++);\n        if (ch >= 48 && ch <= 57) {\n          if (pos - start >= 10) {\n            return -1;\n          }\n          continue;\n        }\n        if (ch === 41 || ch === 46) {\n          break;\n        }\n        return -1;\n      }\n      if (pos < max2) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          return -1;\n        }\n      }\n      return pos;\n    }\n    function markTightParagraphs(state, idx) {\n      var i, l, level = state.level + 2;\n      for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n        if (state.tokens[i].level === level && state.tokens[i].type === \"paragraph_open\") {\n          state.tokens[i + 2].hidden = true;\n          state.tokens[i].hidden = true;\n          i += 2;\n        }\n      }\n    }\n    module.exports = function list2(state, startLine, endLine, silent) {\n      var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max2, nextLine, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token, isTerminatingParagraph = false, tight = true;\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (!state.md.options.allowIndentation && state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {\n        return false;\n      }\n      if (silent && state.parentType === \"paragraph\") {\n        if (state.sCount[startLine] >= state.blkIndent) {\n          isTerminatingParagraph = true;\n        }\n      }\n      if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n        isOrdered = true;\n        start = state.bMarks[startLine] + state.tShift[startLine];\n        markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n        if (isTerminatingParagraph && markerValue !== 1)\n          return false;\n      } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n        isOrdered = false;\n      } else {\n        return false;\n      }\n      if (isTerminatingParagraph) {\n        if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine])\n          return false;\n      }\n      markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n      if (silent) {\n        return true;\n      }\n      listTokIdx = state.tokens.length;\n      if (isOrdered) {\n        token = state.push(\"ordered_list_open\", \"ol\", 1);\n        if (markerValue !== 1) {\n          token.attrs = [[\"start\", markerValue]];\n        }\n      } else {\n        token = state.push(\"bullet_list_open\", \"ul\", 1);\n      }\n      token.map = listLines = [startLine, 0];\n      token.markup = String.fromCharCode(markerCharCode);\n      nextLine = startLine;\n      prevEmptyEnd = false;\n      terminatorRules = state.md.block.ruler.getRules(\"list\");\n      oldParentType = state.parentType;\n      state.parentType = \"list\";\n      while (nextLine < endLine) {\n        pos = posAfterMarker;\n        max2 = state.eMarks[nextLine];\n        initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n        while (pos < max2) {\n          ch = state.src.charCodeAt(pos);\n          if (ch === 9) {\n            offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n          } else if (ch === 32) {\n            offset++;\n          } else {\n            break;\n          }\n          pos++;\n        }\n        contentStart = pos;\n        if (contentStart >= max2) {\n          indentAfterMarker = 1;\n        } else {\n          indentAfterMarker = offset - initial;\n        }\n        if (!state.md.options.allowIndentation && indentAfterMarker > 4) {\n          indentAfterMarker = 1;\n        }\n        indent = initial + indentAfterMarker;\n        token = state.push(\"list_item_open\", \"li\", 1);\n        token.markup = String.fromCharCode(markerCharCode);\n        token.map = itemLines = [startLine, 0];\n        if (isOrdered) {\n          token.info = state.src.slice(start, posAfterMarker - 1);\n        }\n        oldTight = state.tight;\n        oldTShift = state.tShift[startLine];\n        oldSCount = state.sCount[startLine];\n        oldListIndent = state.listIndent;\n        state.listIndent = state.blkIndent;\n        state.blkIndent = indent;\n        state.tight = true;\n        state.tShift[startLine] = contentStart - state.bMarks[startLine];\n        state.sCount[startLine] = offset;\n        if (contentStart >= max2 && state.isEmpty(startLine + 1)) {\n          state.line = Math.min(state.line + 2, endLine);\n        } else {\n          state.md.block.tokenize(state, startLine, endLine, true);\n        }\n        if (!state.tight || prevEmptyEnd) {\n          tight = false;\n        }\n        prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);\n        state.blkIndent = state.listIndent;\n        state.listIndent = oldListIndent;\n        state.tShift[startLine] = oldTShift;\n        state.sCount[startLine] = oldSCount;\n        state.tight = oldTight;\n        token = state.push(\"list_item_close\", \"li\", -1);\n        token.markup = String.fromCharCode(markerCharCode);\n        nextLine = startLine = state.line;\n        itemLines[1] = nextLine;\n        contentStart = state.bMarks[startLine];\n        if (nextLine >= endLine) {\n          break;\n        }\n        if (state.sCount[nextLine] < state.blkIndent) {\n          break;\n        }\n        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n          break;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n        if (isOrdered) {\n          posAfterMarker = skipOrderedListMarker(state, nextLine);\n          if (posAfterMarker < 0) {\n            break;\n          }\n          start = state.bMarks[nextLine] + state.tShift[nextLine];\n        } else {\n          posAfterMarker = skipBulletListMarker(state, nextLine);\n          if (posAfterMarker < 0) {\n            break;\n          }\n        }\n        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n          break;\n        }\n      }\n      if (isOrdered) {\n        token = state.push(\"ordered_list_close\", \"ol\", -1);\n      } else {\n        token = state.push(\"bullet_list_close\", \"ul\", -1);\n      }\n      token.markup = String.fromCharCode(markerCharCode);\n      listLines[1] = nextLine;\n      state.line = nextLine;\n      state.parentType = oldParentType;\n      if (tight) {\n        markTightParagraphs(state, listTokIdx);\n      }\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/reference.js\nvar require_reference = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/reference.js\"(exports, module) {\n    \"use strict\";\n    var normalizeReference = require_utils().normalizeReference;\n    var isSpace = require_utils().isSpace;\n    module.exports = function reference(state, startLine, _endLine, silent) {\n      var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine], nextLine = startLine + 1;\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (state.src.charCodeAt(pos) !== 91) {\n        return false;\n      }\n      while (++pos < max2) {\n        if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {\n          if (pos + 1 === max2) {\n            return false;\n          }\n          if (state.src.charCodeAt(pos + 1) !== 58) {\n            return false;\n          }\n          break;\n        }\n      }\n      endLine = state.lineMax;\n      terminatorRules = state.md.block.ruler.getRules(\"reference\");\n      oldParentType = state.parentType;\n      state.parentType = \"reference\";\n      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n          continue;\n        }\n        if (state.sCount[nextLine] < 0) {\n          continue;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n      }\n      str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n      max2 = str.length;\n      for (pos = 1; pos < max2; pos++) {\n        ch = str.charCodeAt(pos);\n        if (ch === 91) {\n          return false;\n        } else if (ch === 93) {\n          labelEnd = pos;\n          break;\n        } else if (ch === 10) {\n          lines++;\n        } else if (ch === 92) {\n          pos++;\n          if (pos < max2 && str.charCodeAt(pos) === 10) {\n            lines++;\n          }\n        }\n      }\n      if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {\n        return false;\n      }\n      for (pos = labelEnd + 2; pos < max2; pos++) {\n        ch = str.charCodeAt(pos);\n        if (ch === 10) {\n          lines++;\n        } else if (isSpace(ch)) {\n        } else {\n          break;\n        }\n      }\n      res = state.md.helpers.parseLinkDestination(str, pos, max2);\n      if (!res.ok) {\n        return false;\n      }\n      href = state.md.normalizeLink(res.str);\n      if (!state.md.validateLink(href)) {\n        return false;\n      }\n      pos = res.pos;\n      lines += res.lines;\n      destEndPos = pos;\n      destEndLineNo = lines;\n      start = pos;\n      for (; pos < max2; pos++) {\n        ch = str.charCodeAt(pos);\n        if (ch === 10) {\n          lines++;\n        } else if (isSpace(ch)) {\n        } else {\n          break;\n        }\n      }\n      res = state.md.helpers.parseLinkTitle(str, pos, max2);\n      if (pos < max2 && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n        lines += res.lines;\n      } else {\n        title = \"\";\n        pos = destEndPos;\n        lines = destEndLineNo;\n      }\n      while (pos < max2) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          break;\n        }\n        pos++;\n      }\n      if (pos < max2 && str.charCodeAt(pos) !== 10) {\n        if (title) {\n          title = \"\";\n          pos = destEndPos;\n          lines = destEndLineNo;\n          while (pos < max2) {\n            ch = str.charCodeAt(pos);\n            if (!isSpace(ch)) {\n              break;\n            }\n            pos++;\n          }\n        }\n      }\n      if (pos < max2 && str.charCodeAt(pos) !== 10) {\n        return false;\n      }\n      label = normalizeReference(str.slice(1, labelEnd));\n      if (!label) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      if (typeof state.env.references === \"undefined\") {\n        state.env.references = {};\n      }\n      if (typeof state.env.references[label] === \"undefined\") {\n        state.env.references[label] = { title, href };\n      }\n      state.parentType = oldParentType;\n      state.line = startLine + lines + 1;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/common/html_blocks.js\nvar require_html_blocks = __commonJS({\n  \"node_modules/markdown-it/lib/common/html_blocks.js\"(exports, module) {\n    \"use strict\";\n    module.exports = [\n      \"address\",\n      \"article\",\n      \"aside\",\n      \"base\",\n      \"basefont\",\n      \"blockquote\",\n      \"body\",\n      \"caption\",\n      \"center\",\n      \"col\",\n      \"colgroup\",\n      \"dd\",\n      \"details\",\n      \"dialog\",\n      \"dir\",\n      \"div\",\n      \"dl\",\n      \"dt\",\n      \"fieldset\",\n      \"figcaption\",\n      \"figure\",\n      \"footer\",\n      \"form\",\n      \"frame\",\n      \"frameset\",\n      \"h1\",\n      \"h2\",\n      \"h3\",\n      \"h4\",\n      \"h5\",\n      \"h6\",\n      \"head\",\n      \"header\",\n      \"hr\",\n      \"html\",\n      \"iframe\",\n      \"legend\",\n      \"li\",\n      \"link\",\n      \"main\",\n      \"menu\",\n      \"menuitem\",\n      \"nav\",\n      \"noframes\",\n      \"ol\",\n      \"optgroup\",\n      \"option\",\n      \"p\",\n      \"param\",\n      \"section\",\n      \"source\",\n      \"summary\",\n      \"table\",\n      \"tbody\",\n      \"td\",\n      \"tfoot\",\n      \"th\",\n      \"thead\",\n      \"title\",\n      \"tr\",\n      \"track\",\n      \"ul\"\n    ];\n  }\n});\n\n// node_modules/markdown-it/lib/common/html_re.js\nvar require_html_re = __commonJS({\n  \"node_modules/markdown-it/lib/common/html_re.js\"(exports, module) {\n    \"use strict\";\n    var attr_name = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\";\n    var unquoted = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\n    var single_quoted = \"'[^']*'\";\n    var double_quoted = '\"[^\"]*\"';\n    var attr_value = \"(?:\" + unquoted + \"|\" + single_quoted + \"|\" + double_quoted + \")\";\n    var attribute = \"(?:\\\\s+\" + attr_name + \"(?:\\\\s*=\\\\s*\" + attr_value + \")?)\";\n    var open_tag = \"<[A-Za-z][A-Za-z0-9\\\\-]*\" + attribute + \"*\\\\s*\\\\/?>\";\n    var close_tag = \"<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>\";\n    var comment = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\n    var processing = \"<[?][\\\\s\\\\S]*?[?]>\";\n    var declaration = \"<![A-Z]+\\\\s+[^>]*>\";\n    var cdata = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\n    var HTML_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \"|\" + comment + \"|\" + processing + \"|\" + declaration + \"|\" + cdata + \")\");\n    var HTML_OPEN_CLOSE_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \")\");\n    module.exports.HTML_TAG_RE = HTML_TAG_RE;\n    module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/html_block.js\nvar require_html_block = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/html_block.js\"(exports, module) {\n    \"use strict\";\n    var block_names = require_html_blocks();\n    var HTML_OPEN_CLOSE_TAG_RE = require_html_re().HTML_OPEN_CLOSE_TAG_RE;\n    var HTML_SEQUENCES = [\n      [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n      [/^<!--/, /-->/, true],\n      [/^<\\?/, /\\?>/, true],\n      [/^<![A-Z]/, />/, true],\n      [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n      [new RegExp(\"^</?(\" + block_names.join(\"|\") + \")(?=(\\\\s|/?>|$))\", \"i\"), /^$/, true],\n      [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + \"\\\\s*$\"), /^$/, false]\n    ];\n    module.exports = function html_block(state, startLine, endLine, silent) {\n      var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      if (!state.md.options.html) {\n        return false;\n      }\n      if (state.src.charCodeAt(pos) !== 60) {\n        return false;\n      }\n      lineText = state.src.slice(pos, max2);\n      for (i = 0; i < HTML_SEQUENCES.length; i++) {\n        if (HTML_SEQUENCES[i][0].test(lineText)) {\n          break;\n        }\n      }\n      if (i === HTML_SEQUENCES.length) {\n        return false;\n      }\n      if (silent) {\n        return HTML_SEQUENCES[i][2];\n      }\n      nextLine = startLine + 1;\n      if (!HTML_SEQUENCES[i][1].test(lineText)) {\n        for (; nextLine < endLine; nextLine++) {\n          if (state.sCount[nextLine] < state.blkIndent) {\n            break;\n          }\n          pos = state.bMarks[nextLine] + state.tShift[nextLine];\n          max2 = state.eMarks[nextLine];\n          lineText = state.src.slice(pos, max2);\n          if (HTML_SEQUENCES[i][1].test(lineText)) {\n            if (lineText.length !== 0) {\n              nextLine++;\n            }\n            break;\n          }\n        }\n      }\n      state.line = nextLine;\n      token = state.push(\"html_block\", \"\", 0);\n      token.map = [startLine, nextLine];\n      token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/heading.js\nvar require_heading = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/heading.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    module.exports = function heading2(state, startLine, endLine, silent) {\n      var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      ch = state.src.charCodeAt(pos);\n      if (ch !== 35 || pos >= max2) {\n        return false;\n      }\n      level = 1;\n      ch = state.src.charCodeAt(++pos);\n      while (ch === 35 && pos < max2 && level <= 6) {\n        level++;\n        ch = state.src.charCodeAt(++pos);\n      }\n      if (level > 6 || pos < max2 && !isSpace(ch)) {\n        return false;\n      }\n      if (silent) {\n        return true;\n      }\n      max2 = state.skipSpacesBack(max2, pos);\n      tmp = state.skipCharsBack(max2, 35, pos);\n      if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n        max2 = tmp;\n      }\n      state.line = startLine + 1;\n      token = state.push(\"heading_open\", \"h\" + String(level), 1);\n      token.markup = \"########\".slice(0, level);\n      token.map = [startLine, state.line];\n      token = state.push(\"inline\", \"\", 0);\n      token.content = state.src.slice(pos, max2).trim();\n      token.map = [startLine, state.line];\n      token.children = [];\n      token = state.push(\"heading_close\", \"h\" + String(level), -1);\n      token.markup = \"########\".slice(0, level);\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/lheading.js\nvar require_lheading = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/lheading.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function lheading(state, startLine, endLine) {\n      var content, terminate, i, l, token, pos, max2, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules(\"paragraph\");\n      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n        return false;\n      }\n      oldParentType = state.parentType;\n      state.parentType = \"paragraph\";\n      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n          continue;\n        }\n        if (state.sCount[nextLine] >= state.blkIndent) {\n          pos = state.bMarks[nextLine] + state.tShift[nextLine];\n          max2 = state.eMarks[nextLine];\n          if (pos < max2) {\n            marker = state.src.charCodeAt(pos);\n            if (marker === 45 || marker === 61) {\n              pos = state.skipChars(pos, marker);\n              pos = state.skipSpaces(pos);\n              if (pos >= max2) {\n                level = marker === 61 ? 1 : 2;\n                break;\n              }\n            }\n          }\n        }\n        if (state.sCount[nextLine] < 0) {\n          continue;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n      }\n      if (!level) {\n        return false;\n      }\n      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n      state.line = nextLine + 1;\n      token = state.push(\"heading_open\", \"h\" + String(level), 1);\n      token.markup = String.fromCharCode(marker);\n      token.map = [startLine, state.line];\n      token = state.push(\"inline\", \"\", 0);\n      token.content = content;\n      token.map = [startLine, state.line - 1];\n      token.children = [];\n      token = state.push(\"heading_close\", \"h\" + String(level), -1);\n      token.markup = String.fromCharCode(marker);\n      state.parentType = oldParentType;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/paragraph.js\nvar require_paragraph = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/paragraph.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function paragraph2(state, startLine) {\n      var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules(\"paragraph\"), endLine = state.lineMax;\n      oldParentType = state.parentType;\n      state.parentType = \"paragraph\";\n      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n          continue;\n        }\n        if (state.sCount[nextLine] < 0) {\n          continue;\n        }\n        terminate = false;\n        for (i = 0, l = terminatorRules.length; i < l; i++) {\n          if (terminatorRules[i](state, nextLine, endLine, true)) {\n            terminate = true;\n            break;\n          }\n        }\n        if (terminate) {\n          break;\n        }\n      }\n      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n      state.line = nextLine;\n      token = state.push(\"paragraph_open\", \"p\", 1);\n      token.map = [startLine, state.line];\n      token = state.push(\"inline\", \"\", 0);\n      token.content = content;\n      token.map = [startLine, state.line];\n      token.children = [];\n      token = state.push(\"paragraph_close\", \"p\", -1);\n      state.parentType = oldParentType;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_block/state_block.js\nvar require_state_block = __commonJS({\n  \"node_modules/markdown-it/lib/rules_block/state_block.js\"(exports, module) {\n    \"use strict\";\n    var Token = require_token();\n    var isSpace = require_utils().isSpace;\n    function StateBlock(src, md, env, tokens) {\n      var ch, s2, start, pos, len, indent, offset, indent_found;\n      this.src = src;\n      this.md = md;\n      this.env = env;\n      this.tokens = tokens;\n      this.bMarks = [];\n      this.eMarks = [];\n      this.tShift = [];\n      this.sCount = [];\n      this.bsCount = [];\n      this.blkIndent = 0;\n      this.line = 0;\n      this.lineMax = 0;\n      this.tight = false;\n      this.ddIndent = -1;\n      this.listIndent = -1;\n      this.parentType = \"root\";\n      this.level = 0;\n      this.result = \"\";\n      s2 = this.src;\n      indent_found = false;\n      for (start = pos = indent = offset = 0, len = s2.length; pos < len; pos++) {\n        ch = s2.charCodeAt(pos);\n        if (!indent_found) {\n          if (isSpace(ch)) {\n            indent++;\n            if (ch === 9) {\n              offset += 4 - offset % 4;\n            } else {\n              offset++;\n            }\n            continue;\n          } else {\n            indent_found = true;\n          }\n        }\n        if (ch === 10 || pos === len - 1) {\n          if (ch !== 10) {\n            pos++;\n          }\n          this.bMarks.push(start);\n          this.eMarks.push(pos);\n          this.tShift.push(indent);\n          this.sCount.push(offset);\n          this.bsCount.push(0);\n          indent_found = false;\n          indent = 0;\n          offset = 0;\n          start = pos + 1;\n        }\n      }\n      this.bMarks.push(s2.length);\n      this.eMarks.push(s2.length);\n      this.tShift.push(0);\n      this.sCount.push(0);\n      this.bsCount.push(0);\n      this.lineMax = this.bMarks.length - 1;\n    }\n    StateBlock.prototype.push = function(type, tag, nesting) {\n      var token = new Token(type, tag, nesting);\n      token.block = true;\n      if (nesting < 0)\n        this.level--;\n      token.level = this.level;\n      if (nesting > 0)\n        this.level++;\n      this.tokens.push(token);\n      return token;\n    };\n    StateBlock.prototype.isEmpty = function isEmpty(line) {\n      return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n    };\n    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n      for (var max2 = this.lineMax; from < max2; from++) {\n        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n          break;\n        }\n      }\n      return from;\n    };\n    StateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n      var ch;\n      for (var max2 = this.src.length; pos < max2; pos++) {\n        ch = this.src.charCodeAt(pos);\n        if (!isSpace(ch)) {\n          break;\n        }\n      }\n      return pos;\n    };\n    StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n      if (pos <= min) {\n        return pos;\n      }\n      while (pos > min) {\n        if (!isSpace(this.src.charCodeAt(--pos))) {\n          return pos + 1;\n        }\n      }\n      return pos;\n    };\n    StateBlock.prototype.skipChars = function skipChars(pos, code2) {\n      for (var max2 = this.src.length; pos < max2; pos++) {\n        if (this.src.charCodeAt(pos) !== code2) {\n          break;\n        }\n      }\n      return pos;\n    };\n    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code2, min) {\n      if (pos <= min) {\n        return pos;\n      }\n      while (pos > min) {\n        if (code2 !== this.src.charCodeAt(--pos)) {\n          return pos + 1;\n        }\n      }\n      return pos;\n    };\n    StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n      var i, lineIndent, ch, first, last, queue, lineStart, line = begin;\n      if (begin >= end) {\n        return \"\";\n      }\n      queue = new Array(end - begin);\n      for (i = 0; line < end; line++, i++) {\n        lineIndent = 0;\n        lineStart = first = this.bMarks[line];\n        if (line + 1 < end || keepLastLF) {\n          last = this.eMarks[line] + 1;\n        } else {\n          last = this.eMarks[line];\n        }\n        while (first < last && lineIndent < indent) {\n          ch = this.src.charCodeAt(first);\n          if (isSpace(ch)) {\n            if (ch === 9) {\n              lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n            } else {\n              lineIndent++;\n            }\n          } else if (first - lineStart < this.tShift[line]) {\n            lineIndent++;\n          } else {\n            break;\n          }\n          first++;\n        }\n        if (lineIndent > indent) {\n          queue[i] = new Array(lineIndent - indent + 1).join(\" \") + this.src.slice(first, last);\n        } else {\n          queue[i] = this.src.slice(first, last);\n        }\n      }\n      return queue.join(\"\");\n    };\n    StateBlock.prototype.Token = Token;\n    module.exports = StateBlock;\n  }\n});\n\n// node_modules/markdown-it/lib/parser_block.js\nvar require_parser_block = __commonJS({\n  \"node_modules/markdown-it/lib/parser_block.js\"(exports, module) {\n    \"use strict\";\n    var Ruler = require_ruler();\n    var _rules = [\n      [\"table\", require_table(), [\"paragraph\", \"reference\"]],\n      [\"code\", require_code()],\n      [\"fence\", require_fence(), [\"paragraph\", \"reference\", \"blockquote\", \"list\"]],\n      [\"blockquote\", require_blockquote(), [\"paragraph\", \"reference\", \"blockquote\", \"list\"]],\n      [\"hr\", require_hr(), [\"paragraph\", \"reference\", \"blockquote\", \"list\"]],\n      [\"list\", require_list(), [\"paragraph\", \"reference\", \"blockquote\"]],\n      [\"reference\", require_reference()],\n      [\"html_block\", require_html_block(), [\"paragraph\", \"reference\", \"blockquote\"]],\n      [\"heading\", require_heading(), [\"paragraph\", \"reference\", \"blockquote\"]],\n      [\"lheading\", require_lheading()],\n      [\"paragraph\", require_paragraph()]\n    ];\n    function ParserBlock() {\n      this.ruler = new Ruler();\n      for (var i = 0; i < _rules.length; i++) {\n        this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n      }\n    }\n    ParserBlock.prototype.tokenize = function(state, startLine, endLine) {\n      var ok, i, rules = this.ruler.getRules(\"\"), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;\n      while (line < endLine) {\n        state.line = line = state.skipEmptyLines(line);\n        if (line >= endLine) {\n          break;\n        }\n        if (state.sCount[line] < state.blkIndent) {\n          break;\n        }\n        if (state.level >= maxNesting) {\n          state.line = endLine;\n          break;\n        }\n        for (i = 0; i < len; i++) {\n          ok = rules[i](state, line, endLine, false);\n          if (ok) {\n            break;\n          }\n        }\n        state.tight = !hasEmptyLines;\n        if (state.isEmpty(state.line - 1)) {\n          hasEmptyLines = true;\n        }\n        line = state.line;\n        if (line < endLine && state.isEmpty(line)) {\n          hasEmptyLines = true;\n          line++;\n          state.line = line;\n        }\n      }\n    };\n    ParserBlock.prototype.parse = function(src, md, env, outTokens) {\n      var state;\n      if (!src) {\n        return;\n      }\n      state = new this.State(src, md, env, outTokens);\n      this.tokenize(state, state.line, state.lineMax);\n    };\n    ParserBlock.prototype.State = require_state_block();\n    module.exports = ParserBlock;\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/text.js\nvar require_text = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/text.js\"(exports, module) {\n    \"use strict\";\n    function isTerminatorChar(ch) {\n      switch (ch) {\n        case 10:\n        case 33:\n        case 35:\n        case 36:\n        case 37:\n        case 38:\n        case 42:\n        case 43:\n        case 45:\n        case 58:\n        case 60:\n        case 61:\n        case 62:\n        case 64:\n        case 91:\n        case 92:\n        case 93:\n        case 94:\n        case 95:\n        case 96:\n        case 123:\n        case 125:\n        case 126:\n          return true;\n        default:\n          return false;\n      }\n    }\n    module.exports = function text2(state, silent) {\n      var pos = state.pos;\n      while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n        pos++;\n      }\n      if (pos === state.pos) {\n        return false;\n      }\n      if (!silent) {\n        state.pending += state.src.slice(state.pos, pos);\n      }\n      state.pos = pos;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/newline.js\nvar require_newline = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/newline.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    module.exports = function newline(state, silent) {\n      var pmax, max2, ws, pos = state.pos;\n      if (state.src.charCodeAt(pos) !== 10) {\n        return false;\n      }\n      pmax = state.pending.length - 1;\n      max2 = state.posMax;\n      if (!silent) {\n        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {\n          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {\n            ws = pmax - 1;\n            while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)\n              ws--;\n            state.pending = state.pending.slice(0, ws);\n            state.push(\"hardbreak\", \"br\", 0);\n          } else {\n            state.pending = state.pending.slice(0, -1);\n            state.push(\"softbreak\", \"br\", 0);\n          }\n        } else {\n          state.push(\"softbreak\", \"br\", 0);\n        }\n      }\n      pos++;\n      while (pos < max2 && isSpace(state.src.charCodeAt(pos))) {\n        pos++;\n      }\n      state.pos = pos;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/escape.js\nvar require_escape = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/escape.js\"(exports, module) {\n    \"use strict\";\n    var isSpace = require_utils().isSpace;\n    var ESCAPED = [];\n    for (i = 0; i < 256; i++) {\n      ESCAPED.push(0);\n    }\n    var i;\n    \"\\\\!\\\"#$%&'()*+,./:;<=>?@[]^_`{|}~-\".split(\"\").forEach(function(ch) {\n      ESCAPED[ch.charCodeAt(0)] = 1;\n    });\n    module.exports = function escape(state, silent) {\n      var ch, pos = state.pos, max2 = state.posMax;\n      if (state.src.charCodeAt(pos) !== 92) {\n        return false;\n      }\n      pos++;\n      if (pos < max2) {\n        ch = state.src.charCodeAt(pos);\n        if (ch < 256 && ESCAPED[ch] !== 0) {\n          if (!silent) {\n            state.pending += state.src[pos];\n          }\n          state.pos += 2;\n          return true;\n        }\n        if (ch === 10) {\n          if (!silent) {\n            state.push(\"hardbreak\", \"br\", 0);\n          }\n          pos++;\n          while (pos < max2) {\n            ch = state.src.charCodeAt(pos);\n            if (!isSpace(ch)) {\n              break;\n            }\n            pos++;\n          }\n          state.pos = pos;\n          return true;\n        }\n      }\n      if (!silent) {\n        state.pending += \"\\\\\";\n      }\n      state.pos++;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/backticks.js\nvar require_backticks = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/backticks.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function backtick(state, silent) {\n      var start, max2, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);\n      if (ch !== 96) {\n        return false;\n      }\n      start = pos;\n      pos++;\n      max2 = state.posMax;\n      while (pos < max2 && state.src.charCodeAt(pos) === 96) {\n        pos++;\n      }\n      marker = state.src.slice(start, pos);\n      openerLength = marker.length;\n      if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n        if (!silent)\n          state.pending += marker;\n        state.pos += openerLength;\n        return true;\n      }\n      matchStart = matchEnd = pos;\n      while ((matchStart = state.src.indexOf(\"`\", matchEnd)) !== -1) {\n        matchEnd = matchStart + 1;\n        while (matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96) {\n          matchEnd++;\n        }\n        closerLength = matchEnd - matchStart;\n        if (closerLength === openerLength) {\n          if (!silent) {\n            token = state.push(\"code_inline\", \"code\", 0);\n            token.markup = marker;\n            token.content = state.src.slice(pos, matchStart).replace(/\\n/g, \" \").replace(/^ (.+) $/, \"$1\");\n          }\n          state.pos = matchEnd;\n          return true;\n        }\n        state.backticks[closerLength] = matchStart;\n      }\n      state.backticksScanned = true;\n      if (!silent)\n        state.pending += marker;\n      state.pos += openerLength;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/strikethrough.js\nvar require_strikethrough = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/strikethrough.js\"(exports, module) {\n    \"use strict\";\n    module.exports.tokenize = function strikethrough(state, silent) {\n      var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);\n      if (silent) {\n        return false;\n      }\n      if (marker !== 126) {\n        return false;\n      }\n      scanned = state.scanDelims(state.pos, true);\n      len = scanned.length;\n      ch = String.fromCharCode(marker);\n      if (len < 2) {\n        return false;\n      }\n      if (len % 2) {\n        token = state.push(\"text\", \"\", 0);\n        token.content = ch;\n        len--;\n      }\n      for (i = 0; i < len; i += 2) {\n        token = state.push(\"text\", \"\", 0);\n        token.content = ch + ch;\n        state.delimiters.push({\n          marker,\n          length: 0,\n          token: state.tokens.length - 1,\n          end: -1,\n          open: scanned.can_open,\n          close: scanned.can_close\n        });\n      }\n      state.pos += scanned.length;\n      return true;\n    };\n    function postProcess(state, delimiters) {\n      var i, j, startDelim, endDelim, token, loneMarkers = [], max2 = delimiters.length;\n      for (i = 0; i < max2; i++) {\n        startDelim = delimiters[i];\n        if (startDelim.marker !== 126) {\n          continue;\n        }\n        if (startDelim.end === -1) {\n          continue;\n        }\n        endDelim = delimiters[startDelim.end];\n        token = state.tokens[startDelim.token];\n        token.type = \"s_open\";\n        token.tag = \"s\";\n        token.nesting = 1;\n        token.markup = \"~~\";\n        token.content = \"\";\n        token = state.tokens[endDelim.token];\n        token.type = \"s_close\";\n        token.tag = \"s\";\n        token.nesting = -1;\n        token.markup = \"~~\";\n        token.content = \"\";\n        if (state.tokens[endDelim.token - 1].type === \"text\" && state.tokens[endDelim.token - 1].content === \"~\") {\n          loneMarkers.push(endDelim.token - 1);\n        }\n      }\n      while (loneMarkers.length) {\n        i = loneMarkers.pop();\n        j = i + 1;\n        while (j < state.tokens.length && state.tokens[j].type === \"s_close\") {\n          j++;\n        }\n        j--;\n        if (i !== j) {\n          token = state.tokens[j];\n          state.tokens[j] = state.tokens[i];\n          state.tokens[i] = token;\n        }\n      }\n    }\n    module.exports.postProcess = function strikethrough(state) {\n      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n      postProcess(state, state.delimiters);\n      for (curr = 0; curr < max2; curr++) {\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n          postProcess(state, tokens_meta[curr].delimiters);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/emphasis.js\nvar require_emphasis = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/emphasis.js\"(exports, module) {\n    \"use strict\";\n    module.exports.tokenize = function emphasis(state, silent) {\n      var i, scanned, token, start = state.pos, marker = state.src.charCodeAt(start);\n      if (silent) {\n        return false;\n      }\n      if (marker !== 95 && marker !== 42) {\n        return false;\n      }\n      scanned = state.scanDelims(state.pos, marker === 42);\n      for (i = 0; i < scanned.length; i++) {\n        token = state.push(\"text\", \"\", 0);\n        token.content = String.fromCharCode(marker);\n        state.delimiters.push({\n          marker,\n          length: scanned.length,\n          token: state.tokens.length - 1,\n          end: -1,\n          open: scanned.can_open,\n          close: scanned.can_close\n        });\n      }\n      state.pos += scanned.length;\n      return true;\n    };\n    function postProcess(state, delimiters) {\n      var i, startDelim, endDelim, token, ch, isStrong, max2 = delimiters.length;\n      for (i = max2 - 1; i >= 0; i--) {\n        startDelim = delimiters[i];\n        if (startDelim.marker !== 95 && startDelim.marker !== 42) {\n          continue;\n        }\n        if (startDelim.end === -1) {\n          continue;\n        }\n        endDelim = delimiters[startDelim.end];\n        isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;\n        ch = String.fromCharCode(startDelim.marker);\n        token = state.tokens[startDelim.token];\n        token.type = isStrong ? \"strong_open\" : \"em_open\";\n        token.tag = isStrong ? \"strong\" : \"em\";\n        token.nesting = 1;\n        token.markup = isStrong ? ch + ch : ch;\n        token.content = \"\";\n        token = state.tokens[endDelim.token];\n        token.type = isStrong ? \"strong_close\" : \"em_close\";\n        token.tag = isStrong ? \"strong\" : \"em\";\n        token.nesting = -1;\n        token.markup = isStrong ? ch + ch : ch;\n        token.content = \"\";\n        if (isStrong) {\n          state.tokens[delimiters[i - 1].token].content = \"\";\n          state.tokens[delimiters[startDelim.end + 1].token].content = \"\";\n          i--;\n        }\n      }\n    }\n    module.exports.postProcess = function emphasis(state) {\n      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n      postProcess(state, state.delimiters);\n      for (curr = 0; curr < max2; curr++) {\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n          postProcess(state, tokens_meta[curr].delimiters);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/link.js\nvar require_link = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/link.js\"(exports, module) {\n    \"use strict\";\n    var normalizeReference = require_utils().normalizeReference;\n    var isSpace = require_utils().isSpace;\n    module.exports = function link2(state, silent) {\n      var attrs, code2, label, labelEnd, labelStart, pos, res, ref, token, href = \"\", title = \"\", oldPos = state.pos, max2 = state.posMax, start = state.pos, parseReference = true;\n      if (state.src.charCodeAt(state.pos) !== 91) {\n        return false;\n      }\n      labelStart = state.pos + 1;\n      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n      if (labelEnd < 0) {\n        return false;\n      }\n      pos = labelEnd + 1;\n      if (pos < max2 && state.src.charCodeAt(pos) === 40) {\n        parseReference = false;\n        pos++;\n        for (; pos < max2; pos++) {\n          code2 = state.src.charCodeAt(pos);\n          if (!isSpace(code2) && code2 !== 10) {\n            break;\n          }\n        }\n        if (pos >= max2) {\n          return false;\n        }\n        start = pos;\n        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n        if (res.ok) {\n          href = state.md.normalizeLink(res.str);\n          if (state.md.validateLink(href)) {\n            pos = res.pos;\n          } else {\n            href = \"\";\n          }\n          start = pos;\n          for (; pos < max2; pos++) {\n            code2 = state.src.charCodeAt(pos);\n            if (!isSpace(code2) && code2 !== 10) {\n              break;\n            }\n          }\n          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n          if (pos < max2 && start !== pos && res.ok) {\n            title = res.str;\n            pos = res.pos;\n            for (; pos < max2; pos++) {\n              code2 = state.src.charCodeAt(pos);\n              if (!isSpace(code2) && code2 !== 10) {\n                break;\n              }\n            }\n          }\n        }\n        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {\n          parseReference = true;\n        }\n        pos++;\n      }\n      if (parseReference) {\n        if (typeof state.env.references === \"undefined\") {\n          return false;\n        }\n        if (pos < max2 && state.src.charCodeAt(pos) === 91) {\n          start = pos + 1;\n          pos = state.md.helpers.parseLinkLabel(state, pos);\n          if (pos >= 0) {\n            label = state.src.slice(start, pos++);\n          } else {\n            pos = labelEnd + 1;\n          }\n        } else {\n          pos = labelEnd + 1;\n        }\n        if (!label) {\n          label = state.src.slice(labelStart, labelEnd);\n        }\n        ref = state.env.references[normalizeReference(label)];\n        if (!ref) {\n          state.pos = oldPos;\n          return false;\n        }\n        href = ref.href;\n        title = ref.title;\n      }\n      if (!silent) {\n        state.pos = labelStart;\n        state.posMax = labelEnd;\n        token = state.push(\"link_open\", \"a\", 1);\n        token.attrs = attrs = [[\"href\", href]];\n        if (title) {\n          attrs.push([\"title\", title]);\n        }\n        state.md.inline.tokenize(state);\n        token = state.push(\"link_close\", \"a\", -1);\n      }\n      state.pos = pos;\n      state.posMax = max2;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/image.js\nvar require_image = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/image.js\"(exports, module) {\n    \"use strict\";\n    var normalizeReference = require_utils().normalizeReference;\n    var isSpace = require_utils().isSpace;\n    module.exports = function image2(state, silent) {\n      var attrs, code2, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens, start, href = \"\", oldPos = state.pos, max2 = state.posMax;\n      if (state.src.charCodeAt(state.pos) !== 33) {\n        return false;\n      }\n      if (state.src.charCodeAt(state.pos + 1) !== 91) {\n        return false;\n      }\n      labelStart = state.pos + 2;\n      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n      if (labelEnd < 0) {\n        return false;\n      }\n      pos = labelEnd + 1;\n      if (pos < max2 && state.src.charCodeAt(pos) === 40) {\n        pos++;\n        for (; pos < max2; pos++) {\n          code2 = state.src.charCodeAt(pos);\n          if (!isSpace(code2) && code2 !== 10) {\n            break;\n          }\n        }\n        if (pos >= max2) {\n          return false;\n        }\n        start = pos;\n        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n        if (res.ok) {\n          href = state.md.normalizeLink(res.str);\n          if (state.md.validateLink(href)) {\n            pos = res.pos;\n          } else {\n            href = \"\";\n          }\n        }\n        start = pos;\n        for (; pos < max2; pos++) {\n          code2 = state.src.charCodeAt(pos);\n          if (!isSpace(code2) && code2 !== 10) {\n            break;\n          }\n        }\n        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n        if (pos < max2 && start !== pos && res.ok) {\n          title = res.str;\n          pos = res.pos;\n          for (; pos < max2; pos++) {\n            code2 = state.src.charCodeAt(pos);\n            if (!isSpace(code2) && code2 !== 10) {\n              break;\n            }\n          }\n        } else {\n          title = \"\";\n        }\n        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {\n          state.pos = oldPos;\n          return false;\n        }\n        pos++;\n      } else {\n        if (typeof state.env.references === \"undefined\") {\n          return false;\n        }\n        if (pos < max2 && state.src.charCodeAt(pos) === 91) {\n          start = pos + 1;\n          pos = state.md.helpers.parseLinkLabel(state, pos);\n          if (pos >= 0) {\n            label = state.src.slice(start, pos++);\n          } else {\n            pos = labelEnd + 1;\n          }\n        } else {\n          pos = labelEnd + 1;\n        }\n        if (!label) {\n          label = state.src.slice(labelStart, labelEnd);\n        }\n        ref = state.env.references[normalizeReference(label)];\n        if (!ref) {\n          state.pos = oldPos;\n          return false;\n        }\n        href = ref.href;\n        title = ref.title;\n      }\n      if (!silent) {\n        content = state.src.slice(labelStart, labelEnd);\n        state.md.inline.parse(content, state.md, state.env, tokens = []);\n        token = state.push(\"image\", \"img\", 0);\n        token.attrs = attrs = [[\"src\", href], [\"alt\", \"\"]];\n        token.children = tokens;\n        token.content = content;\n        if (title) {\n          attrs.push([\"title\", title]);\n        }\n      }\n      state.pos = pos;\n      state.posMax = max2;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/autolink.js\nvar require_autolink = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/autolink.js\"(exports, module) {\n    \"use strict\";\n    var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n    var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n    module.exports = function autolink(state, silent) {\n      var url, fullUrl, token, ch, start, max2, pos = state.pos;\n      if (state.src.charCodeAt(pos) !== 60) {\n        return false;\n      }\n      start = state.pos;\n      max2 = state.posMax;\n      for (; ; ) {\n        if (++pos >= max2)\n          return false;\n        ch = state.src.charCodeAt(pos);\n        if (ch === 60)\n          return false;\n        if (ch === 62)\n          break;\n      }\n      url = state.src.slice(start + 1, pos);\n      if (AUTOLINK_RE.test(url)) {\n        fullUrl = state.md.normalizeLink(url);\n        if (!state.md.validateLink(fullUrl)) {\n          return false;\n        }\n        if (!silent) {\n          token = state.push(\"link_open\", \"a\", 1);\n          token.attrs = [[\"href\", fullUrl]];\n          token.markup = \"autolink\";\n          token.info = \"auto\";\n          token = state.push(\"text\", \"\", 0);\n          token.content = state.md.normalizeLinkText(url);\n          token = state.push(\"link_close\", \"a\", -1);\n          token.markup = \"autolink\";\n          token.info = \"auto\";\n        }\n        state.pos += url.length + 2;\n        return true;\n      }\n      if (EMAIL_RE.test(url)) {\n        fullUrl = state.md.normalizeLink(\"mailto:\" + url);\n        if (!state.md.validateLink(fullUrl)) {\n          return false;\n        }\n        if (!silent) {\n          token = state.push(\"link_open\", \"a\", 1);\n          token.attrs = [[\"href\", fullUrl]];\n          token.markup = \"autolink\";\n          token.info = \"auto\";\n          token = state.push(\"text\", \"\", 0);\n          token.content = state.md.normalizeLinkText(url);\n          token = state.push(\"link_close\", \"a\", -1);\n          token.markup = \"autolink\";\n          token.info = \"auto\";\n        }\n        state.pos += url.length + 2;\n        return true;\n      }\n      return false;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/html_inline.js\nvar require_html_inline = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/html_inline.js\"(exports, module) {\n    \"use strict\";\n    var HTML_TAG_RE = require_html_re().HTML_TAG_RE;\n    function isLetter(ch) {\n      var lc = ch | 32;\n      return lc >= 97 && lc <= 122;\n    }\n    module.exports = function html_inline(state, silent) {\n      var ch, match, max2, token, pos = state.pos;\n      if (!state.md.options.html) {\n        return false;\n      }\n      max2 = state.posMax;\n      if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {\n        return false;\n      }\n      ch = state.src.charCodeAt(pos + 1);\n      if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {\n        return false;\n      }\n      match = state.src.slice(pos).match(HTML_TAG_RE);\n      if (!match) {\n        return false;\n      }\n      if (!silent) {\n        token = state.push(\"html_inline\", \"\", 0);\n        token.content = state.src.slice(pos, pos + match[0].length);\n      }\n      state.pos += match[0].length;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/entity.js\nvar require_entity = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/entity.js\"(exports, module) {\n    \"use strict\";\n    var entities = require_entities2();\n    var has = require_utils().has;\n    var isValidEntityCode = require_utils().isValidEntityCode;\n    var fromCodePoint = require_utils().fromCodePoint;\n    var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\n    var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\n    module.exports = function entity(state, silent) {\n      var ch, code2, match, pos = state.pos, max2 = state.posMax;\n      if (state.src.charCodeAt(pos) !== 38) {\n        return false;\n      }\n      if (pos + 1 < max2) {\n        ch = state.src.charCodeAt(pos + 1);\n        if (ch === 35) {\n          match = state.src.slice(pos).match(DIGITAL_RE);\n          if (match) {\n            if (!silent) {\n              code2 = match[1][0].toLowerCase() === \"x\" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n              state.pending += isValidEntityCode(code2) ? fromCodePoint(code2) : fromCodePoint(65533);\n            }\n            state.pos += match[0].length;\n            return true;\n          }\n        } else {\n          match = state.src.slice(pos).match(NAMED_RE);\n          if (match) {\n            if (has(entities, match[1])) {\n              if (!silent) {\n                state.pending += entities[match[1]];\n              }\n              state.pos += match[0].length;\n              return true;\n            }\n          }\n        }\n      }\n      if (!silent) {\n        state.pending += \"&\";\n      }\n      state.pos++;\n      return true;\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/balance_pairs.js\nvar require_balance_pairs = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/balance_pairs.js\"(exports, module) {\n    \"use strict\";\n    function processDelimiters(state, delimiters) {\n      var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max2 = delimiters.length;\n      if (!max2)\n        return;\n      var headerIdx = 0;\n      var lastTokenIdx = -2;\n      var jumps = [];\n      for (closerIdx = 0; closerIdx < max2; closerIdx++) {\n        closer = delimiters[closerIdx];\n        jumps.push(0);\n        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n          headerIdx = closerIdx;\n        }\n        lastTokenIdx = closer.token;\n        closer.length = closer.length || 0;\n        if (!closer.close)\n          continue;\n        if (!openersBottom.hasOwnProperty(closer.marker)) {\n          openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];\n        }\n        minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n        openerIdx = headerIdx - jumps[headerIdx] - 1;\n        newMinOpenerIdx = openerIdx;\n        for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n          opener = delimiters[openerIdx];\n          if (opener.marker !== closer.marker)\n            continue;\n          if (opener.open && opener.end < 0) {\n            isOddMatch = false;\n            if (opener.close || closer.open) {\n              if ((opener.length + closer.length) % 3 === 0) {\n                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n                  isOddMatch = true;\n                }\n              }\n            }\n            if (!isOddMatch) {\n              lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n              jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n              jumps[openerIdx] = lastJump;\n              closer.open = false;\n              opener.end = closerIdx;\n              opener.close = false;\n              newMinOpenerIdx = -1;\n              lastTokenIdx = -2;\n              break;\n            }\n          }\n        }\n        if (newMinOpenerIdx !== -1) {\n          openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n        }\n      }\n    }\n    module.exports = function link_pairs(state) {\n      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n      processDelimiters(state, state.delimiters);\n      for (curr = 0; curr < max2; curr++) {\n        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n          processDelimiters(state, tokens_meta[curr].delimiters);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/text_collapse.js\nvar require_text_collapse = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/text_collapse.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function text_collapse(state) {\n      var curr, last, level = 0, tokens = state.tokens, max2 = state.tokens.length;\n      for (curr = last = 0; curr < max2; curr++) {\n        if (tokens[curr].nesting < 0)\n          level--;\n        tokens[curr].level = level;\n        if (tokens[curr].nesting > 0)\n          level++;\n        if (tokens[curr].type === \"text\" && curr + 1 < max2 && tokens[curr + 1].type === \"text\") {\n          tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n        } else {\n          if (curr !== last) {\n            tokens[last] = tokens[curr];\n          }\n          last++;\n        }\n      }\n      if (curr !== last) {\n        tokens.length = last;\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/rules_inline/state_inline.js\nvar require_state_inline = __commonJS({\n  \"node_modules/markdown-it/lib/rules_inline/state_inline.js\"(exports, module) {\n    \"use strict\";\n    var Token = require_token();\n    var isWhiteSpace = require_utils().isWhiteSpace;\n    var isPunctChar = require_utils().isPunctChar;\n    var isMdAsciiPunct = require_utils().isMdAsciiPunct;\n    function StateInline(src, md, env, outTokens) {\n      this.src = src;\n      this.env = env;\n      this.md = md;\n      this.tokens = outTokens;\n      this.tokens_meta = Array(outTokens.length);\n      this.pos = 0;\n      this.posMax = this.src.length;\n      this.level = 0;\n      this.pending = \"\";\n      this.pendingLevel = 0;\n      this.cache = {};\n      this.delimiters = [];\n      this._prev_delimiters = [];\n      this.backticks = {};\n      this.backticksScanned = false;\n    }\n    StateInline.prototype.pushPending = function() {\n      var token = new Token(\"text\", \"\", 0);\n      token.content = this.pending;\n      token.level = this.pendingLevel;\n      this.tokens.push(token);\n      this.pending = \"\";\n      return token;\n    };\n    StateInline.prototype.push = function(type, tag, nesting) {\n      if (this.pending) {\n        this.pushPending();\n      }\n      var token = new Token(type, tag, nesting);\n      var token_meta = null;\n      if (nesting < 0) {\n        this.level--;\n        this.delimiters = this._prev_delimiters.pop();\n      }\n      token.level = this.level;\n      if (nesting > 0) {\n        this.level++;\n        this._prev_delimiters.push(this.delimiters);\n        this.delimiters = [];\n        token_meta = { delimiters: this.delimiters };\n      }\n      this.pendingLevel = this.level;\n      this.tokens.push(token);\n      this.tokens_meta.push(token_meta);\n      return token;\n    };\n    StateInline.prototype.scanDelims = function(start, canSplitWord) {\n      var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max2 = this.posMax, marker = this.src.charCodeAt(start);\n      lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;\n      while (pos < max2 && this.src.charCodeAt(pos) === marker) {\n        pos++;\n      }\n      count = pos - start;\n      nextChar = pos < max2 ? this.src.charCodeAt(pos) : 32;\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n      if (isNextWhiteSpace) {\n        left_flanking = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          left_flanking = false;\n        }\n      }\n      if (isLastWhiteSpace) {\n        right_flanking = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          right_flanking = false;\n        }\n      }\n      if (!canSplitWord) {\n        can_open = left_flanking && (!right_flanking || isLastPunctChar);\n        can_close = right_flanking && (!left_flanking || isNextPunctChar);\n      } else {\n        can_open = left_flanking;\n        can_close = right_flanking;\n      }\n      return {\n        can_open,\n        can_close,\n        length: count\n      };\n    };\n    StateInline.prototype.Token = Token;\n    module.exports = StateInline;\n  }\n});\n\n// node_modules/markdown-it/lib/parser_inline.js\nvar require_parser_inline = __commonJS({\n  \"node_modules/markdown-it/lib/parser_inline.js\"(exports, module) {\n    \"use strict\";\n    var Ruler = require_ruler();\n    var _rules = [\n      [\"text\", require_text()],\n      [\"newline\", require_newline()],\n      [\"escape\", require_escape()],\n      [\"backticks\", require_backticks()],\n      [\"strikethrough\", require_strikethrough().tokenize],\n      [\"emphasis\", require_emphasis().tokenize],\n      [\"link\", require_link()],\n      [\"image\", require_image()],\n      [\"autolink\", require_autolink()],\n      [\"html_inline\", require_html_inline()],\n      [\"entity\", require_entity()]\n    ];\n    var _rules2 = [\n      [\"balance_pairs\", require_balance_pairs()],\n      [\"strikethrough\", require_strikethrough().postProcess],\n      [\"emphasis\", require_emphasis().postProcess],\n      [\"text_collapse\", require_text_collapse()]\n    ];\n    function ParserInline() {\n      var i;\n      this.ruler = new Ruler();\n      for (i = 0; i < _rules.length; i++) {\n        this.ruler.push(_rules[i][0], _rules[i][1]);\n      }\n      this.ruler2 = new Ruler();\n      for (i = 0; i < _rules2.length; i++) {\n        this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n      }\n    }\n    ParserInline.prototype.skipToken = function(state) {\n      var ok, i, pos = state.pos, rules = this.ruler.getRules(\"\"), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;\n      if (typeof cache[pos] !== \"undefined\") {\n        state.pos = cache[pos];\n        return;\n      }\n      if (state.level < maxNesting) {\n        for (i = 0; i < len; i++) {\n          state.level++;\n          ok = rules[i](state, true);\n          state.level--;\n          if (ok) {\n            break;\n          }\n        }\n      } else {\n        state.pos = state.posMax;\n      }\n      if (!ok) {\n        state.pos++;\n      }\n      cache[pos] = state.pos;\n    };\n    ParserInline.prototype.tokenize = function(state) {\n      var ok, i, rules = this.ruler.getRules(\"\"), len = rules.length, end = state.posMax, maxNesting = state.md.options.maxNesting;\n      while (state.pos < end) {\n        if (state.level < maxNesting) {\n          for (i = 0; i < len; i++) {\n            ok = rules[i](state, false);\n            if (ok) {\n              break;\n            }\n          }\n        }\n        if (ok) {\n          if (state.pos >= end) {\n            break;\n          }\n          continue;\n        }\n        state.pending += state.src[state.pos++];\n      }\n      if (state.pending) {\n        state.pushPending();\n      }\n    };\n    ParserInline.prototype.parse = function(str, md, env, outTokens) {\n      var i, rules, len;\n      var state = new this.State(str, md, env, outTokens);\n      this.tokenize(state);\n      rules = this.ruler2.getRules(\"\");\n      len = rules.length;\n      for (i = 0; i < len; i++) {\n        rules[i](state);\n      }\n    };\n    ParserInline.prototype.State = require_state_inline();\n    module.exports = ParserInline;\n  }\n});\n\n// node_modules/linkify-it/lib/re.js\nvar require_re = __commonJS({\n  \"node_modules/linkify-it/lib/re.js\"(exports, module) {\n    \"use strict\";\n    module.exports = function(opts) {\n      var re = {};\n      re.src_Any = require_regex2().source;\n      re.src_Cc = require_regex3().source;\n      re.src_Z = require_regex5().source;\n      re.src_P = require_regex().source;\n      re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join(\"|\");\n      re.src_ZCc = [re.src_Z, re.src_Cc].join(\"|\");\n      var text_separators = \"[><\\uFF5C]\";\n      re.src_pseudo_letter = \"(?:(?!\" + text_separators + \"|\" + re.src_ZPCc + \")\" + re.src_Any + \")\";\n      re.src_ip4 = \"(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\";\n      re.src_auth = \"(?:(?:(?!\" + re.src_ZCc + \"|[@/\\\\[\\\\]()]).)+@)?\";\n      re.src_port = \"(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?\";\n      re.src_host_terminator = \"(?=$|\" + text_separators + \"|\" + re.src_ZPCc + \")(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|\" + re.src_ZPCc + \"))\";\n      re.src_path = \"(?:[/?#](?:(?!\" + re.src_ZCc + \"|\" + text_separators + `|[()[\\\\]{}.,\"'?!\\\\-;]).|\\\\[(?:(?!` + re.src_ZCc + \"|\\\\]).)*\\\\]|\\\\((?:(?!\" + re.src_ZCc + \"|[)]).)*\\\\)|\\\\{(?:(?!\" + re.src_ZCc + '|[}]).)*\\\\}|\\\\\"(?:(?!' + re.src_ZCc + `|[\"]).)+\\\\\"|\\\\'(?:(?!` + re.src_ZCc + \"|[']).)+\\\\'|\\\\'(?=\" + re.src_pseudo_letter + \"|[-]).|\\\\.{2,}[a-zA-Z0-9%/&]|\\\\.(?!\" + re.src_ZCc + \"|[.]).|\" + (opts && opts[\"---\"] ? \"\\\\-(?!--(?:[^-]|$))(?:-*)|\" : \"\\\\-+|\") + \",(?!\" + re.src_ZCc + \").|;(?!\" + re.src_ZCc + \").|\\\\!+(?!\" + re.src_ZCc + \"|[!]).|\\\\?(?!\" + re.src_ZCc + \"|[?]).)+|\\\\/)?\";\n      re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n      re.src_xn = \"xn--[a-z0-9\\\\-]{1,59}\";\n      re.src_domain_root = \"(?:\" + re.src_xn + \"|\" + re.src_pseudo_letter + \"{1,63})\";\n      re.src_domain = \"(?:\" + re.src_xn + \"|(?:\" + re.src_pseudo_letter + \")|(?:\" + re.src_pseudo_letter + \"(?:-|\" + re.src_pseudo_letter + \"){0,61}\" + re.src_pseudo_letter + \"))\";\n      re.src_host = \"(?:(?:(?:(?:\" + re.src_domain + \")\\\\.)*\" + re.src_domain + \"))\";\n      re.tpl_host_fuzzy = \"(?:\" + re.src_ip4 + \"|(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%)))\";\n      re.tpl_host_no_ip_fuzzy = \"(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%))\";\n      re.src_host_strict = re.src_host + re.src_host_terminator;\n      re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n      re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n      re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n      re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n      re.tpl_host_fuzzy_test = \"localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:\" + re.src_ZPCc + \"|>|$))\";\n      re.tpl_email_fuzzy = \"(^|\" + text_separators + '|\"|\\\\(|' + re.src_ZCc + \")(\" + re.src_email_name + \"@\" + re.tpl_host_fuzzy_strict + \")\";\n      re.tpl_link_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uFF5C]|\" + re.src_ZPCc + \"))((?![$+<=>^`|\\uFF5C])\" + re.tpl_host_port_fuzzy_strict + re.src_path + \")\";\n      re.tpl_link_no_ip_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uFF5C]|\" + re.src_ZPCc + \"))((?![$+<=>^`|\\uFF5C])\" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + \")\";\n      return re;\n    };\n  }\n});\n\n// node_modules/linkify-it/index.js\nvar require_linkify_it = __commonJS({\n  \"node_modules/linkify-it/index.js\"(exports, module) {\n    \"use strict\";\n    function assign(obj) {\n      var sources = Array.prototype.slice.call(arguments, 1);\n      sources.forEach(function(source) {\n        if (!source) {\n          return;\n        }\n        Object.keys(source).forEach(function(key) {\n          obj[key] = source[key];\n        });\n      });\n      return obj;\n    }\n    function _class(obj) {\n      return Object.prototype.toString.call(obj);\n    }\n    function isString(obj) {\n      return _class(obj) === \"[object String]\";\n    }\n    function isObject(obj) {\n      return _class(obj) === \"[object Object]\";\n    }\n    function isRegExp(obj) {\n      return _class(obj) === \"[object RegExp]\";\n    }\n    function isFunction2(obj) {\n      return _class(obj) === \"[object Function]\";\n    }\n    function escapeRE(str) {\n      return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n    }\n    var defaultOptions = {\n      fuzzyLink: true,\n      fuzzyEmail: true,\n      fuzzyIP: false\n    };\n    function isOptionsObj(obj) {\n      return Object.keys(obj || {}).reduce(function(acc, k) {\n        return acc || defaultOptions.hasOwnProperty(k);\n      }, false);\n    }\n    var defaultSchemas = {\n      \"http:\": {\n        validate: function(text2, pos, self) {\n          var tail = text2.slice(pos);\n          if (!self.re.http) {\n            self.re.http = new RegExp(\"^\\\\/\\\\/\" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, \"i\");\n          }\n          if (self.re.http.test(tail)) {\n            return tail.match(self.re.http)[0].length;\n          }\n          return 0;\n        }\n      },\n      \"https:\": \"http:\",\n      \"ftp:\": \"http:\",\n      \"//\": {\n        validate: function(text2, pos, self) {\n          var tail = text2.slice(pos);\n          if (!self.re.no_http) {\n            self.re.no_http = new RegExp(\"^\" + self.re.src_auth + \"(?:localhost|(?:(?:\" + self.re.src_domain + \")\\\\.)+\" + self.re.src_domain_root + \")\" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, \"i\");\n          }\n          if (self.re.no_http.test(tail)) {\n            if (pos >= 3 && text2[pos - 3] === \":\") {\n              return 0;\n            }\n            if (pos >= 3 && text2[pos - 3] === \"/\") {\n              return 0;\n            }\n            return tail.match(self.re.no_http)[0].length;\n          }\n          return 0;\n        }\n      },\n      \"mailto:\": {\n        validate: function(text2, pos, self) {\n          var tail = text2.slice(pos);\n          if (!self.re.mailto) {\n            self.re.mailto = new RegExp(\"^\" + self.re.src_email_name + \"@\" + self.re.src_host_strict, \"i\");\n          }\n          if (self.re.mailto.test(tail)) {\n            return tail.match(self.re.mailto)[0].length;\n          }\n          return 0;\n        }\n      }\n    };\n    var tlds_2ch_src_re = \"a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]\";\n    var tlds_default = \"biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\\u0440\\u0444\".split(\"|\");\n    function resetScanCache(self) {\n      self.__index__ = -1;\n      self.__text_cache__ = \"\";\n    }\n    function createValidator(re) {\n      return function(text2, pos) {\n        var tail = text2.slice(pos);\n        if (re.test(tail)) {\n          return tail.match(re)[0].length;\n        }\n        return 0;\n      };\n    }\n    function createNormalizer() {\n      return function(match, self) {\n        self.normalize(match);\n      };\n    }\n    function compile(self) {\n      var re = self.re = require_re()(self.__opts__);\n      var tlds = self.__tlds__.slice();\n      self.onCompile();\n      if (!self.__tlds_replaced__) {\n        tlds.push(tlds_2ch_src_re);\n      }\n      tlds.push(re.src_xn);\n      re.src_tlds = tlds.join(\"|\");\n      function untpl(tpl) {\n        return tpl.replace(\"%TLDS%\", re.src_tlds);\n      }\n      re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), \"i\");\n      re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), \"i\");\n      re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), \"i\");\n      re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), \"i\");\n      var aliases = [];\n      self.__compiled__ = {};\n      function schemaError(name, val) {\n        throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n      }\n      Object.keys(self.__schemas__).forEach(function(name) {\n        var val = self.__schemas__[name];\n        if (val === null) {\n          return;\n        }\n        var compiled = { validate: null, link: null };\n        self.__compiled__[name] = compiled;\n        if (isObject(val)) {\n          if (isRegExp(val.validate)) {\n            compiled.validate = createValidator(val.validate);\n          } else if (isFunction2(val.validate)) {\n            compiled.validate = val.validate;\n          } else {\n            schemaError(name, val);\n          }\n          if (isFunction2(val.normalize)) {\n            compiled.normalize = val.normalize;\n          } else if (!val.normalize) {\n            compiled.normalize = createNormalizer();\n          } else {\n            schemaError(name, val);\n          }\n          return;\n        }\n        if (isString(val)) {\n          aliases.push(name);\n          return;\n        }\n        schemaError(name, val);\n      });\n      aliases.forEach(function(alias) {\n        if (!self.__compiled__[self.__schemas__[alias]]) {\n          return;\n        }\n        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n      });\n      self.__compiled__[\"\"] = { validate: null, normalize: createNormalizer() };\n      var slist = Object.keys(self.__compiled__).filter(function(name) {\n        return name.length > 0 && self.__compiled__[name];\n      }).map(escapeRE).join(\"|\");\n      self.re.schema_test = RegExp(\"(^|(?!_)(?:[><\\uFF5C]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"i\");\n      self.re.schema_search = RegExp(\"(^|(?!_)(?:[><\\uFF5C]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"ig\");\n      self.re.pretest = RegExp(\"(\" + self.re.schema_test.source + \")|(\" + self.re.host_fuzzy_test.source + \")|@\", \"i\");\n      resetScanCache(self);\n    }\n    function Match(self, shift) {\n      var start = self.__index__, end = self.__last_index__, text2 = self.__text_cache__.slice(start, end);\n      this.schema = self.__schema__.toLowerCase();\n      this.index = start + shift;\n      this.lastIndex = end + shift;\n      this.raw = text2;\n      this.text = text2;\n      this.url = text2;\n    }\n    function createMatch(self, shift) {\n      var match = new Match(self, shift);\n      self.__compiled__[match.schema].normalize(match, self);\n      return match;\n    }\n    function LinkifyIt(schemas, options) {\n      if (!(this instanceof LinkifyIt)) {\n        return new LinkifyIt(schemas, options);\n      }\n      if (!options) {\n        if (isOptionsObj(schemas)) {\n          options = schemas;\n          schemas = {};\n        }\n      }\n      this.__opts__ = assign({}, defaultOptions, options);\n      this.__index__ = -1;\n      this.__last_index__ = -1;\n      this.__schema__ = \"\";\n      this.__text_cache__ = \"\";\n      this.__schemas__ = assign({}, defaultSchemas, schemas);\n      this.__compiled__ = {};\n      this.__tlds__ = tlds_default;\n      this.__tlds_replaced__ = false;\n      this.re = {};\n      compile(this);\n    }\n    LinkifyIt.prototype.add = function add(schema, definition) {\n      this.__schemas__[schema] = definition;\n      compile(this);\n      return this;\n    };\n    LinkifyIt.prototype.set = function set(options) {\n      this.__opts__ = assign(this.__opts__, options);\n      return this;\n    };\n    LinkifyIt.prototype.test = function test(text2) {\n      this.__text_cache__ = text2;\n      this.__index__ = -1;\n      if (!text2.length) {\n        return false;\n      }\n      var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n      if (this.re.schema_test.test(text2)) {\n        re = this.re.schema_search;\n        re.lastIndex = 0;\n        while ((m = re.exec(text2)) !== null) {\n          len = this.testSchemaAt(text2, m[2], re.lastIndex);\n          if (len) {\n            this.__schema__ = m[2];\n            this.__index__ = m.index + m[1].length;\n            this.__last_index__ = m.index + m[0].length + len;\n            break;\n          }\n        }\n      }\n      if (this.__opts__.fuzzyLink && this.__compiled__[\"http:\"]) {\n        tld_pos = text2.search(this.re.host_fuzzy_test);\n        if (tld_pos >= 0) {\n          if (this.__index__ < 0 || tld_pos < this.__index__) {\n            if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n              shift = ml.index + ml[1].length;\n              if (this.__index__ < 0 || shift < this.__index__) {\n                this.__schema__ = \"\";\n                this.__index__ = shift;\n                this.__last_index__ = ml.index + ml[0].length;\n              }\n            }\n          }\n        }\n      }\n      if (this.__opts__.fuzzyEmail && this.__compiled__[\"mailto:\"]) {\n        at_pos = text2.indexOf(\"@\");\n        if (at_pos >= 0) {\n          if ((me = text2.match(this.re.email_fuzzy)) !== null) {\n            shift = me.index + me[1].length;\n            next = me.index + me[0].length;\n            if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n              this.__schema__ = \"mailto:\";\n              this.__index__ = shift;\n              this.__last_index__ = next;\n            }\n          }\n        }\n      }\n      return this.__index__ >= 0;\n    };\n    LinkifyIt.prototype.pretest = function pretest(text2) {\n      return this.re.pretest.test(text2);\n    };\n    LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos) {\n      if (!this.__compiled__[schema.toLowerCase()]) {\n        return 0;\n      }\n      return this.__compiled__[schema.toLowerCase()].validate(text2, pos, this);\n    };\n    LinkifyIt.prototype.match = function match(text2) {\n      var shift = 0, result = [];\n      if (this.__index__ >= 0 && this.__text_cache__ === text2) {\n        result.push(createMatch(this, shift));\n        shift = this.__last_index__;\n      }\n      var tail = shift ? text2.slice(shift) : text2;\n      while (this.test(tail)) {\n        result.push(createMatch(this, shift));\n        tail = tail.slice(this.__last_index__);\n        shift += this.__last_index__;\n      }\n      if (result.length) {\n        return result;\n      }\n      return null;\n    };\n    LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {\n      list2 = Array.isArray(list2) ? list2 : [list2];\n      if (!keepOld) {\n        this.__tlds__ = list2.slice();\n        this.__tlds_replaced__ = true;\n        compile(this);\n        return this;\n      }\n      this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function(el, idx, arr) {\n        return el !== arr[idx - 1];\n      }).reverse();\n      compile(this);\n      return this;\n    };\n    LinkifyIt.prototype.normalize = function normalize(match) {\n      if (!match.schema) {\n        match.url = \"http://\" + match.url;\n      }\n      if (match.schema === \"mailto:\" && !/^mailto:/i.test(match.url)) {\n        match.url = \"mailto:\" + match.url;\n      }\n    };\n    LinkifyIt.prototype.onCompile = function onCompile() {\n    };\n    module.exports = LinkifyIt;\n  }\n});\n\n// node_modules/punycode/punycode.js\nvar require_punycode = __commonJS({\n  \"node_modules/punycode/punycode.js\"(exports, module) {\n    \"use strict\";\n    var maxInt = 2147483647;\n    var base = 36;\n    var tMin = 1;\n    var tMax = 26;\n    var skew = 38;\n    var damp = 700;\n    var initialBias = 72;\n    var initialN = 128;\n    var delimiter = \"-\";\n    var regexPunycode = /^xn--/;\n    var regexNonASCII = /[^\\0-\\x7E]/;\n    var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\n    var errors = {\n      \"overflow\": \"Overflow: input needs wider integers to process\",\n      \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n      \"invalid-input\": \"Invalid input\"\n    };\n    var baseMinusTMin = base - tMin;\n    var floor = Math.floor;\n    var stringFromCharCode = String.fromCharCode;\n    function error2(type) {\n      throw new RangeError(errors[type]);\n    }\n    function map(array, fn) {\n      const result = [];\n      let length = array.length;\n      while (length--) {\n        result[length] = fn(array[length]);\n      }\n      return result;\n    }\n    function mapDomain(string, fn) {\n      const parts = string.split(\"@\");\n      let result = \"\";\n      if (parts.length > 1) {\n        result = parts[0] + \"@\";\n        string = parts[1];\n      }\n      string = string.replace(regexSeparators, \".\");\n      const labels = string.split(\".\");\n      const encoded = map(labels, fn).join(\".\");\n      return result + encoded;\n    }\n    function ucs2decode(string) {\n      const output = [];\n      let counter = 0;\n      const length = string.length;\n      while (counter < length) {\n        const value = string.charCodeAt(counter++);\n        if (value >= 55296 && value <= 56319 && counter < length) {\n          const extra = string.charCodeAt(counter++);\n          if ((extra & 64512) == 56320) {\n            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);\n          } else {\n            output.push(value);\n            counter--;\n          }\n        } else {\n          output.push(value);\n        }\n      }\n      return output;\n    }\n    var ucs2encode = (array) => String.fromCodePoint(...array);\n    var basicToDigit = function(codePoint) {\n      if (codePoint - 48 < 10) {\n        return codePoint - 22;\n      }\n      if (codePoint - 65 < 26) {\n        return codePoint - 65;\n      }\n      if (codePoint - 97 < 26) {\n        return codePoint - 97;\n      }\n      return base;\n    };\n    var digitToBasic = function(digit, flag) {\n      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n    };\n    var adapt = function(delta, numPoints, firstTime) {\n      let k = 0;\n      delta = firstTime ? floor(delta / damp) : delta >> 1;\n      delta += floor(delta / numPoints);\n      for (; delta > baseMinusTMin * tMax >> 1; k += base) {\n        delta = floor(delta / baseMinusTMin);\n      }\n      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n    };\n    var decode = function(input) {\n      const output = [];\n      const inputLength = input.length;\n      let i = 0;\n      let n = initialN;\n      let bias = initialBias;\n      let basic = input.lastIndexOf(delimiter);\n      if (basic < 0) {\n        basic = 0;\n      }\n      for (let j = 0; j < basic; ++j) {\n        if (input.charCodeAt(j) >= 128) {\n          error2(\"not-basic\");\n        }\n        output.push(input.charCodeAt(j));\n      }\n      for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {\n        let oldi = i;\n        for (let w = 1, k = base; ; k += base) {\n          if (index >= inputLength) {\n            error2(\"invalid-input\");\n          }\n          const digit = basicToDigit(input.charCodeAt(index++));\n          if (digit >= base || digit > floor((maxInt - i) / w)) {\n            error2(\"overflow\");\n          }\n          i += digit * w;\n          const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n          if (digit < t) {\n            break;\n          }\n          const baseMinusT = base - t;\n          if (w > floor(maxInt / baseMinusT)) {\n            error2(\"overflow\");\n          }\n          w *= baseMinusT;\n        }\n        const out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0);\n        if (floor(i / out) > maxInt - n) {\n          error2(\"overflow\");\n        }\n        n += floor(i / out);\n        i %= out;\n        output.splice(i++, 0, n);\n      }\n      return String.fromCodePoint(...output);\n    };\n    var encode = function(input) {\n      const output = [];\n      input = ucs2decode(input);\n      let inputLength = input.length;\n      let n = initialN;\n      let delta = 0;\n      let bias = initialBias;\n      for (const currentValue of input) {\n        if (currentValue < 128) {\n          output.push(stringFromCharCode(currentValue));\n        }\n      }\n      let basicLength = output.length;\n      let handledCPCount = basicLength;\n      if (basicLength) {\n        output.push(delimiter);\n      }\n      while (handledCPCount < inputLength) {\n        let m = maxInt;\n        for (const currentValue of input) {\n          if (currentValue >= n && currentValue < m) {\n            m = currentValue;\n          }\n        }\n        const handledCPCountPlusOne = handledCPCount + 1;\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n          error2(\"overflow\");\n        }\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n        for (const currentValue of input) {\n          if (currentValue < n && ++delta > maxInt) {\n            error2(\"overflow\");\n          }\n          if (currentValue == n) {\n            let q = delta;\n            for (let k = base; ; k += base) {\n              const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n              if (q < t) {\n                break;\n              }\n              const qMinusT = q - t;\n              const baseMinusT = base - t;\n              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n              q = floor(qMinusT / baseMinusT);\n            }\n            output.push(stringFromCharCode(digitToBasic(q, 0)));\n            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n            delta = 0;\n            ++handledCPCount;\n          }\n        }\n        ++delta;\n        ++n;\n      }\n      return output.join(\"\");\n    };\n    var toUnicode = function(input) {\n      return mapDomain(input, function(string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n      });\n    };\n    var toASCII = function(input) {\n      return mapDomain(input, function(string) {\n        return regexNonASCII.test(string) ? \"xn--\" + encode(string) : string;\n      });\n    };\n    var punycode = {\n      \"version\": \"2.1.0\",\n      \"ucs2\": {\n        \"decode\": ucs2decode,\n        \"encode\": ucs2encode\n      },\n      \"decode\": decode,\n      \"encode\": encode,\n      \"toASCII\": toASCII,\n      \"toUnicode\": toUnicode\n    };\n    module.exports = punycode;\n  }\n});\n\n// node_modules/markdown-it/lib/presets/default.js\nvar require_default = __commonJS({\n  \"node_modules/markdown-it/lib/presets/default.js\"(exports, module) {\n    \"use strict\";\n    module.exports = {\n      options: {\n        html: false,\n        xhtmlOut: false,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        typographer: false,\n        quotes: \"\\u201C\\u201D\\u2018\\u2019\",\n        highlight: null,\n        maxNesting: 100\n      },\n      components: {\n        core: {},\n        block: {},\n        inline: {}\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/presets/zero.js\nvar require_zero = __commonJS({\n  \"node_modules/markdown-it/lib/presets/zero.js\"(exports, module) {\n    \"use strict\";\n    module.exports = {\n      options: {\n        html: false,\n        xhtmlOut: false,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        typographer: false,\n        quotes: \"\\u201C\\u201D\\u2018\\u2019\",\n        highlight: null,\n        maxNesting: 20\n      },\n      components: {\n        core: {\n          rules: [\n            \"normalize\",\n            \"block\",\n            \"inline\"\n          ]\n        },\n        block: {\n          rules: [\n            \"paragraph\"\n          ]\n        },\n        inline: {\n          rules: [\n            \"text\"\n          ],\n          rules2: [\n            \"balance_pairs\",\n            \"text_collapse\"\n          ]\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/presets/commonmark.js\nvar require_commonmark = __commonJS({\n  \"node_modules/markdown-it/lib/presets/commonmark.js\"(exports, module) {\n    \"use strict\";\n    module.exports = {\n      options: {\n        html: true,\n        xhtmlOut: true,\n        breaks: false,\n        langPrefix: \"language-\",\n        linkify: false,\n        typographer: false,\n        quotes: \"\\u201C\\u201D\\u2018\\u2019\",\n        highlight: null,\n        maxNesting: 20\n      },\n      components: {\n        core: {\n          rules: [\n            \"normalize\",\n            \"block\",\n            \"inline\"\n          ]\n        },\n        block: {\n          rules: [\n            \"blockquote\",\n            \"code\",\n            \"fence\",\n            \"heading\",\n            \"hr\",\n            \"html_block\",\n            \"lheading\",\n            \"list\",\n            \"reference\",\n            \"paragraph\"\n          ]\n        },\n        inline: {\n          rules: [\n            \"autolink\",\n            \"backticks\",\n            \"emphasis\",\n            \"entity\",\n            \"escape\",\n            \"html_inline\",\n            \"image\",\n            \"link\",\n            \"newline\",\n            \"text\"\n          ],\n          rules2: [\n            \"balance_pairs\",\n            \"emphasis\",\n            \"text_collapse\"\n          ]\n        }\n      }\n    };\n  }\n});\n\n// node_modules/markdown-it/lib/index.js\nvar require_lib = __commonJS({\n  \"node_modules/markdown-it/lib/index.js\"(exports, module) {\n    \"use strict\";\n    var utils = require_utils();\n    var helpers = require_helpers();\n    var Renderer = require_renderer();\n    var ParserCore = require_parser_core();\n    var ParserBlock = require_parser_block();\n    var ParserInline = require_parser_inline();\n    var LinkifyIt = require_linkify_it();\n    var mdurl = require_mdurl();\n    var punycode = require_punycode();\n    var config = {\n      default: require_default(),\n      zero: require_zero(),\n      commonmark: require_commonmark()\n    };\n    var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\n    var GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n    function validateLink(url) {\n      var str = url.trim().toLowerCase();\n      return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;\n    }\n    var RECODE_HOSTNAME_FOR = [\"http:\", \"https:\", \"mailto:\"];\n    function normalizeLink(url) {\n      var parsed = mdurl.parse(url, true);\n      if (parsed.hostname) {\n        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n          try {\n            parsed.hostname = punycode.toASCII(parsed.hostname);\n          } catch (er) {\n          }\n        }\n      }\n      return mdurl.encode(mdurl.format(parsed));\n    }\n    function normalizeLinkText(url) {\n      var parsed = mdurl.parse(url, true);\n      if (parsed.hostname) {\n        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n          try {\n            parsed.hostname = punycode.toUnicode(parsed.hostname);\n          } catch (er) {\n          }\n        }\n      }\n      return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + \"%\");\n    }\n    function MarkdownIt3(presetName, options) {\n      if (!(this instanceof MarkdownIt3)) {\n        return new MarkdownIt3(presetName, options);\n      }\n      if (!options) {\n        if (!utils.isString(presetName)) {\n          options = presetName || {};\n          presetName = \"default\";\n        }\n      }\n      this.inline = new ParserInline();\n      this.block = new ParserBlock();\n      this.core = new ParserCore();\n      this.renderer = new Renderer();\n      this.linkify = new LinkifyIt();\n      this.validateLink = validateLink;\n      this.normalizeLink = normalizeLink;\n      this.normalizeLinkText = normalizeLinkText;\n      this.utils = utils;\n      this.helpers = utils.assign({}, helpers);\n      this.options = {};\n      this.configure(presetName);\n      if (options) {\n        this.set(options);\n      }\n    }\n    MarkdownIt3.prototype.set = function(options) {\n      utils.assign(this.options, options);\n      return this;\n    };\n    MarkdownIt3.prototype.configure = function(presets) {\n      var self = this, presetName;\n      if (utils.isString(presets)) {\n        presetName = presets;\n        presets = config[presetName];\n        if (!presets) {\n          throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n        }\n      }\n      if (!presets) {\n        throw new Error(\"Wrong `markdown-it` preset, can't be empty\");\n      }\n      if (presets.options) {\n        self.set(presets.options);\n      }\n      if (presets.components) {\n        Object.keys(presets.components).forEach(function(name) {\n          if (presets.components[name].rules) {\n            self[name].ruler.enableOnly(presets.components[name].rules);\n          }\n          if (presets.components[name].rules2) {\n            self[name].ruler2.enableOnly(presets.components[name].rules2);\n          }\n        });\n      }\n      return this;\n    };\n    MarkdownIt3.prototype.enable = function(list2, ignoreInvalid) {\n      var result = [];\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      [\"core\", \"block\", \"inline\"].forEach(function(chain) {\n        result = result.concat(this[chain].ruler.enable(list2, true));\n      }, this);\n      result = result.concat(this.inline.ruler2.enable(list2, true));\n      var missed = list2.filter(function(name) {\n        return result.indexOf(name) < 0;\n      });\n      if (missed.length && !ignoreInvalid) {\n        throw new Error(\"MarkdownIt. Failed to enable unknown rule(s): \" + missed);\n      }\n      return this;\n    };\n    MarkdownIt3.prototype.disable = function(list2, ignoreInvalid) {\n      var result = [];\n      if (!Array.isArray(list2)) {\n        list2 = [list2];\n      }\n      [\"core\", \"block\", \"inline\"].forEach(function(chain) {\n        result = result.concat(this[chain].ruler.disable(list2, true));\n      }, this);\n      result = result.concat(this.inline.ruler2.disable(list2, true));\n      var missed = list2.filter(function(name) {\n        return result.indexOf(name) < 0;\n      });\n      if (missed.length && !ignoreInvalid) {\n        throw new Error(\"MarkdownIt. Failed to disable unknown rule(s): \" + missed);\n      }\n      return this;\n    };\n    MarkdownIt3.prototype.use = function(plugin3) {\n      var args = [this].concat(Array.prototype.slice.call(arguments, 1));\n      plugin3.apply(plugin3, args);\n      return this;\n    };\n    MarkdownIt3.prototype.parse = function(src, env) {\n      if (typeof src !== \"string\") {\n        throw new Error(\"Input data should be a String\");\n      }\n      var state = new this.core.State(src, this, env);\n      this.core.process(state);\n      return state.tokens;\n    };\n    MarkdownIt3.prototype.render = function(src, env) {\n      env = env || {};\n      return this.renderer.render(this.parse(src, env), this.options, env);\n    };\n    MarkdownIt3.prototype.parseInline = function(src, env) {\n      var state = new this.core.State(src, this, env);\n      state.inlineMode = true;\n      this.core.process(state);\n      return state.tokens;\n    };\n    MarkdownIt3.prototype.renderInline = function(src, env) {\n      env = env || {};\n      return this.renderer.render(this.parseInline(src, env), this.options, env);\n    };\n    module.exports = MarkdownIt3;\n  }\n});\n\n// node_modules/markdown-it/index.js\nvar require_markdown_it = __commonJS({\n  \"node_modules/markdown-it/index.js\"(exports, module) {\n    \"use strict\";\n    module.exports = require_lib();\n  }\n});\n\n// src/ast/base.ts\nvar base_exports = {};\n__export(base_exports, {\n  getAstValues: () => getAstValues,\n  isAst: () => isAst,\n  isFunction: () => isFunction,\n  isVariable: () => isVariable,\n  resolve: () => resolve\n});\nfunction isAst(value) {\n  return !!value?.$$mdtype;\n}\nfunction isFunction(value) {\n  return !!(value?.$$mdtype === \"Function\");\n}\nfunction isVariable(value) {\n  return !!(value?.$$mdtype === \"Variable\");\n}\nfunction* getAstValues(value) {\n  if (value == null || typeof value !== \"object\")\n    return;\n  if (Array.isArray(value))\n    for (const v of value)\n      yield* getAstValues(v);\n  if (isAst(value))\n    yield value;\n  if (Object.getPrototypeOf(value) !== Object.prototype)\n    return;\n  for (const v of Object.values(value))\n    yield* getAstValues(v);\n}\nfunction resolve(value, config = {}) {\n  if (value == null || typeof value !== \"object\")\n    return value;\n  if (Array.isArray(value))\n    return value.map((item2) => resolve(item2, config));\n  if (isAst(value) && value?.resolve instanceof Function)\n    return value.resolve(config);\n  if (Object.getPrototypeOf(value) !== Object.prototype)\n    return value;\n  const output = {};\n  for (const [k, v] of Object.entries(value))\n    output[k] = resolve(v, config);\n  return output;\n}\n\n// src/tag.ts\nvar Tag = class {\n  constructor(name = \"div\", attributes = {}, children = []) {\n    this.$$mdtype = \"Tag\";\n    this.name = name;\n    this.attributes = attributes;\n    this.children = children;\n  }\n};\n\n// src/schema-types/class.ts\nvar Class = class {\n  validate(value) {\n    if (typeof value === \"string\" || typeof value === \"object\")\n      return [];\n    return [\n      {\n        id: \"attribute-type-invalid\",\n        level: \"error\",\n        message: `Attribute 'class' must be type 'string | object'`\n      }\n    ];\n  }\n  transform(value) {\n    if (!value || typeof value === \"string\")\n      return value;\n    const classes = [];\n    for (const [k, v] of Object.entries(value ?? {}))\n      if (v)\n        classes.push(k);\n    return classes.join(\" \");\n  }\n};\n\n// src/utils.ts\nvar import_tag = __toModule(require_tag());\n\n// src/ast/variable.ts\nvar Variable = class {\n  constructor(path = []) {\n    this.$$mdtype = \"Variable\";\n    this.path = path;\n  }\n  resolve({ variables } = {}) {\n    return variables instanceof Function ? variables(this.path) : this.path.reduce((obj = {}, key) => obj[key], variables);\n  }\n};\n\n// src/ast/function.ts\nvar Function2 = class {\n  constructor(name, parameters) {\n    this.$$mdtype = \"Function\";\n    this.name = name;\n    this.parameters = parameters;\n  }\n  resolve(config = {}) {\n    const fn = config?.functions?.[this.name];\n    if (!fn)\n      return null;\n    const parameters = resolve(this.parameters, config);\n    return fn.transform?.(parameters, config);\n  }\n};\n\n// src/utils.ts\nvar STATES;\n(function(STATES2) {\n  STATES2[STATES2[\"normal\"] = 0] = \"normal\";\n  STATES2[STATES2[\"string\"] = 1] = \"string\";\n  STATES2[STATES2[\"escape\"] = 2] = \"escape\";\n})(STATES || (STATES = {}));\nvar OPEN = \"{%\";\nvar CLOSE = \"%}\";\nfunction isPromise(a) {\n  return a && typeof a === \"object\" && typeof a.then === \"function\";\n}\nfunction findTagEnd(content, start = 0) {\n  let state = 0;\n  for (let pos = start; pos < content.length; pos++) {\n    const char = content[pos];\n    switch (state) {\n      case 1:\n        switch (char) {\n          case '\"':\n            state = 0;\n            break;\n          case \"\\\\\":\n            state = 2;\n            break;\n        }\n        break;\n      case 2:\n        state = 1;\n        break;\n      case 0:\n        if (char === '\"')\n          state = 1;\n        else if (content.startsWith(CLOSE, pos))\n          return pos;\n    }\n  }\n  return null;\n}\nfunction parseTag(content, line, contentStart) {\n  try {\n    return (0, import_tag.parse)(content, { Variable, Function: Function2 });\n  } catch (error2) {\n    if (!(error2 instanceof import_tag.SyntaxError))\n      throw error2;\n    const {\n      message,\n      location: { start, end }\n    } = error2;\n    const location = {\n      start: { line, character: start.offset + contentStart },\n      end: { line: line + 1, character: end.offset + contentStart }\n    };\n    return { type: \"error\", meta: { error: { message, location } } };\n  }\n}\nfunction parseTags(content, firstLine = 0) {\n  let line = firstLine + 1;\n  const output = [];\n  let start = 0;\n  for (let pos = 0; pos < content.length; pos++) {\n    if (content[pos] === \"\\n\") {\n      line++;\n      continue;\n    }\n    if (!content.startsWith(OPEN, pos))\n      continue;\n    const end = findTagEnd(content, pos);\n    if (end == null) {\n      pos = pos + OPEN.length;\n      continue;\n    }\n    const text2 = content.slice(pos, end + CLOSE.length);\n    const inner = content.slice(pos + OPEN.length, end);\n    const lineStart = content.lastIndexOf(\"\\n\", pos);\n    const lineEnd = content.indexOf(\"\\n\", end);\n    const lineContent = content.slice(lineStart, lineEnd);\n    const tag = parseTag(inner.trim(), line, pos - lineStart);\n    const precedingTextEnd = lineContent.trim() === text2 ? lineStart : pos;\n    const precedingText = content.slice(start, precedingTextEnd);\n    output.push({\n      type: \"text\",\n      start,\n      end: pos - 1,\n      content: precedingText\n    });\n    output.push({\n      map: [line, line + 1],\n      position: {\n        start: pos - lineStart,\n        end: pos - lineStart + text2.length\n      },\n      start: pos,\n      end: pos + text2.length - 1,\n      info: text2,\n      ...tag\n    });\n    start = end + CLOSE.length;\n    pos = start - 1;\n  }\n  output.push({\n    type: \"text\",\n    start,\n    end: content.length - 1,\n    content: content.slice(start)\n  });\n  return output;\n}\n\n// src/transformer.ts\nvar globalAttributes = {\n  class: { type: Class, render: true },\n  id: { type: String, render: true }\n};\nvar transformer_default = {\n  findSchema(node2, { nodes = {}, tags = {} } = {}) {\n    return node2.tag ? tags[node2.tag] : nodes[node2.type];\n  },\n  attributes(node2, config = {}) {\n    const schema = this.findSchema(node2, config) ?? {};\n    const output = {};\n    const attrs = { ...globalAttributes, ...schema.attributes };\n    for (const [key, attr] of Object.entries(attrs)) {\n      if (attr.render == false)\n        continue;\n      const name = typeof attr.render === \"string\" ? attr.render : key;\n      let value = node2.attributes[key];\n      if (typeof attr.type === \"function\") {\n        const instance = new attr.type();\n        if (instance.transform) {\n          value = instance.transform(value, config);\n        }\n      }\n      value = value === void 0 ? attr.default : value;\n      if (value === void 0)\n        continue;\n      output[name] = value;\n    }\n    return output;\n  },\n  children(node2, config = {}) {\n    const children = node2.children.flatMap((child) => this.node(child, config));\n    if (children.some(isPromise)) {\n      return Promise.all(children);\n    }\n    return children;\n  },\n  node(node2, config = {}) {\n    const schema = this.findSchema(node2, config) ?? {};\n    if (schema && schema.transform instanceof Function)\n      return schema.transform(node2, config);\n    const children = this.children(node2, config);\n    if (!schema || !schema.render)\n      return children;\n    const attributes = this.attributes(node2, config);\n    if (isPromise(attributes) || isPromise(children)) {\n      return Promise.all([attributes, children]).then((values) => new Tag(schema.render, ...values));\n    }\n    return new Tag(schema.render, attributes, children);\n  }\n};\n\n// src/ast/node.ts\nvar Node = class {\n  constructor(type = \"node\", attributes = {}, children = [], tag) {\n    this.$$mdtype = \"Node\";\n    this.errors = [];\n    this.lines = [];\n    this.inline = false;\n    this.attributes = attributes;\n    this.children = children;\n    this.type = type;\n    this.tag = tag;\n    this.annotations = [];\n  }\n  *walk() {\n    for (const child of this.children) {\n      yield child;\n      yield* child.walk();\n    }\n  }\n  push(node2) {\n    this.children.push(node2);\n  }\n  resolve(config = {}) {\n    return Object.assign(new Node(), this, {\n      children: this.children.map((child) => child.resolve(config)),\n      attributes: resolve(this.attributes, config)\n    });\n  }\n  findSchema(config = {}) {\n    return transformer_default.findSchema(this, config);\n  }\n  transformAttributes(config = {}) {\n    return transformer_default.attributes(this, config);\n  }\n  transformChildren(config) {\n    return transformer_default.children(this, config);\n  }\n  transform(config) {\n    return transformer_default.node(this, config);\n  }\n};\n\n// src/ast/index.ts\nvar AstTypes = {\n  Function: Function2,\n  Node,\n  Variable\n};\nfunction reviver(_, value) {\n  if (!value)\n    return value;\n  const klass = AstTypes[value.$$mdtype];\n  return klass ? Object.assign(new klass(), value) : value;\n}\nfunction fromJSON(text2) {\n  return JSON.parse(text2, reviver);\n}\nvar ast_default = {\n  ...AstTypes,\n  ...base_exports,\n  fromJSON\n};\n\n// src/formatter.ts\nvar SPACE = \" \";\nvar SEP = \", \";\nvar NL = \"\\n\";\nvar OL = \"1. \";\nvar UL = \"- \";\nvar MAX_TAG_OPENING_WIDTH = 80;\nvar max = (a, b) => Math.max(a, b);\nvar increment = (o, n = 2) => ({\n  ...o,\n  indent: (o.indent || 0) + n\n});\nfunction* formatChildren(a, options) {\n  for (const child of a.children) {\n    yield* formatValue(child, options);\n  }\n}\nfunction* formatTableRow(items) {\n  yield `| ${items.join(\" | \")} |`;\n}\nfunction formatScalar(v) {\n  if (ast_default.isAst(v)) {\n    return format(v);\n  }\n  if (v === null) {\n    return \"\";\n  }\n  if (Array.isArray(v)) {\n    return \"[\" + v.map(formatScalar).join(SEP) + \"]\";\n  }\n  if (typeof v === \"object\") {\n    return \"{\" + Object.entries(v).map(([key, value]) => `${key}: ${formatScalar(value)}`).join(SEP) + \"}\";\n  }\n  return JSON.stringify(v);\n}\nfunction formatAnnotationValue(a) {\n  if (a.name === \"primary\")\n    return formatScalar(a.value);\n  if (a.name === \"id\" && typeof a.value === \"string\")\n    return \"#\" + a.value;\n  if (a.type === \"class\")\n    return \".\" + a.name;\n  return `${a.name}=${formatScalar(a.value)}`;\n}\nfunction* formatAttributes(n) {\n  for (const [key, value] of Object.entries(n.attributes)) {\n    if (key === \"class\" && !ast_default.isAst(value))\n      for (const name of Object.keys(value)) {\n        yield formatAnnotationValue({ type: \"class\", name, value });\n      }\n    else\n      yield formatAnnotationValue({ type: \"attribute\", name: key, value });\n  }\n}\nfunction* formatAnnotations(n) {\n  if (n.annotations.length) {\n    yield OPEN + SPACE;\n    yield n.annotations.map(formatAnnotationValue).join(SPACE);\n    yield SPACE + CLOSE;\n  }\n}\nfunction* formatVariable(v) {\n  yield \"$\";\n  yield v.path.join(\".\");\n}\nfunction* formatFunction(f) {\n  yield f.name;\n  yield \"(\";\n  yield Object.values(f.parameters).map(formatScalar).join(SEP);\n  yield \")\";\n}\nfunction* trimStart(g) {\n  let n;\n  do {\n    n = g.next().value.trimStart();\n  } while (!n.length);\n  yield n;\n  yield* g;\n}\nfunction* formatNode(n, o = {}) {\n  const no = { ...o, parent: n };\n  const indent = SPACE.repeat(no.indent || 0);\n  switch (n.type) {\n    case \"document\": {\n      if (n.attributes.frontmatter && n.attributes.frontmatter.length) {\n        yield \"---\" + NL + n.attributes.frontmatter + NL + \"---\" + NL + NL;\n      }\n      yield* trimStart(formatChildren(n, no));\n      break;\n    }\n    case \"heading\": {\n      yield NL;\n      yield indent;\n      yield \"#\".repeat(n.attributes.level || 1);\n      yield SPACE;\n      yield* formatChildren(n, no);\n      yield* formatAnnotations(n);\n      yield NL;\n      break;\n    }\n    case \"paragraph\": {\n      yield NL;\n      yield indent;\n      yield* formatChildren(n, no);\n      yield* formatAnnotations(n);\n      yield NL;\n      break;\n    }\n    case \"inline\": {\n      yield* formatChildren(n, no);\n      break;\n    }\n    case \"link\": {\n      yield \"[\";\n      yield* formatChildren(n, no);\n      yield \"]\";\n      yield \"(\";\n      yield* formatValue(n.attributes.href, no);\n      yield \")\";\n      break;\n    }\n    case \"text\": {\n      if (ast_default.isAst(n.attributes.content))\n        yield OPEN + SPACE;\n      yield* formatValue(n.attributes.content, no);\n      if (ast_default.isAst(n.attributes.content))\n        yield SPACE + CLOSE;\n      break;\n    }\n    case \"blockquote\": {\n      yield NL;\n      yield indent;\n      yield \"> \";\n      yield* trimStart(formatChildren(n, no));\n      break;\n    }\n    case \"hr\": {\n      yield NL;\n      yield indent;\n      yield \"---\";\n      yield NL;\n      break;\n    }\n    case \"image\": {\n      yield \"!\";\n      yield \"[\";\n      yield* formatValue(n.attributes.alt, no);\n      yield \"]\";\n      yield \"(\";\n      yield* formatValue(n.attributes.src, no);\n      yield \")\";\n      break;\n    }\n    case \"fence\": {\n      yield NL;\n      yield indent;\n      yield \"```\";\n      yield (n.attributes.language || \"\").toLowerCase();\n      if (n.annotations.length)\n        yield SPACE;\n      yield* formatAnnotations(n);\n      yield NL;\n      yield indent;\n      yield* formatChildren(n, no);\n      yield indent;\n      yield \"```\";\n      yield NL;\n      break;\n    }\n    case \"tag\": {\n      if (!n.inline) {\n        yield NL;\n        yield indent;\n      }\n      const open = OPEN + SPACE;\n      const tag = [open + n.tag, ...formatAttributes(n)];\n      const inlineTag = tag.join(SPACE);\n      const isLongTagOpening = inlineTag.length + open.length * 2 > (o.maxTagOpeningWidth || MAX_TAG_OPENING_WIDTH);\n      yield (isLongTagOpening ? tag.join(NL + SPACE.repeat(open.length) + indent) : inlineTag) + SPACE + (n.children.length ? \"\" : \"/\") + CLOSE;\n      if (n.children.length) {\n        yield* formatChildren(n, no.allowIndentation ? increment(no) : no);\n        if (!n.inline) {\n          yield indent;\n        }\n        yield OPEN + SPACE + \"/\" + n.tag + SPACE + CLOSE;\n      }\n      if (!n.inline) {\n        yield NL;\n      }\n      break;\n    }\n    case \"list\": {\n      const prefix = n.attributes.ordered ? OL : UL;\n      yield NL;\n      for (const child of n.children) {\n        const d = format(child, increment(no, prefix.length)).trim();\n        yield indent + prefix + d;\n        yield NL;\n      }\n      break;\n    }\n    case \"item\": {\n      yield* formatChildren(n, no);\n      yield* formatAnnotations(n);\n      break;\n    }\n    case \"strong\": {\n      yield \"**\";\n      yield* formatChildren(n, no);\n      yield \"**\";\n      break;\n    }\n    case \"em\": {\n      yield \"_\";\n      yield* formatChildren(n, no);\n      yield \"_\";\n      break;\n    }\n    case \"code\": {\n      yield \"`\";\n      yield* formatValue(n.attributes.content, no);\n      yield \"`\";\n      break;\n    }\n    case \"s\": {\n      yield \"~~\";\n      yield* formatChildren(n, no);\n      yield \"~~\";\n      break;\n    }\n    case \"hardbreak\": {\n      yield \"\\\\\" + NL;\n      yield indent;\n      break;\n    }\n    case \"softbreak\": {\n      yield NL;\n      yield indent;\n      break;\n    }\n    case \"table\": {\n      const table3 = [...formatChildren(n, increment(no))];\n      if (o.parent && o.parent.type === \"tag\" && o.parent.tag === \"table\") {\n        for (let i = 0; i < table3.length; i++) {\n          const row = table3[i];\n          if (typeof row === \"string\") {\n            if (row.trim().length) {\n              yield NL;\n              yield row;\n            }\n          } else {\n            if (i !== 0) {\n              yield NL;\n              yield indent + \"---\";\n            }\n            for (let j = 0; j < row.length; j++) {\n              const d = row[j];\n              yield NL;\n              yield indent + UL + d.trim();\n            }\n          }\n        }\n        yield NL;\n      } else {\n        yield NL;\n        const [head, ...rows] = table3;\n        const ml = table3.map((arr) => arr.map((s2) => s2.length).reduce(max)).reduce(max);\n        yield* formatTableRow(head.map((h) => h + SPACE.repeat(ml - h.length)));\n        yield NL;\n        yield* formatTableRow(head.map(() => \"-\".repeat(ml)));\n        yield NL;\n        for (const row of rows) {\n          yield* formatTableRow(row.map((r) => r + SPACE.repeat(ml - r.length)));\n          yield NL;\n        }\n      }\n      break;\n    }\n    case \"thead\": {\n      const [head] = [...formatChildren(n, no)];\n      yield head || [];\n      break;\n    }\n    case \"tr\": {\n      yield [...formatChildren(n, no)];\n      break;\n    }\n    case \"td\":\n    case \"th\": {\n      yield [...formatChildren(n, no), ...formatAnnotations(n)].join(\"\");\n      break;\n    }\n    case \"tbody\": {\n      yield* formatChildren(n, no);\n      break;\n    }\n    case \"error\": {\n      console.error(n);\n      break;\n    }\n    case \"node\":\n      break;\n  }\n}\nfunction* formatValue(v, o = {}) {\n  switch (typeof v) {\n    case \"undefined\":\n      break;\n    case \"boolean\":\n    case \"number\":\n    case \"string\": {\n      yield v.toString();\n      break;\n    }\n    case \"object\": {\n      if (v === null)\n        break;\n      if (Array.isArray(v)) {\n        for (const n of v)\n          yield* formatValue(n, o);\n        break;\n      }\n      switch (v.$$mdtype) {\n        case \"Function\": {\n          yield* formatFunction(v);\n          break;\n        }\n        case \"Node\":\n          yield* formatNode(v, o);\n          break;\n        case \"Variable\": {\n          yield* formatVariable(v);\n          break;\n        }\n        default:\n          throw new Error(`Unimplemented: \"${v.$$mdtype}\"`);\n      }\n      break;\n    }\n  }\n}\nfunction format(v, options) {\n  let doc = \"\";\n  for (const s2 of formatValue(v, options))\n    doc += s2;\n  return doc.trimStart();\n}\n\n// src/tags/conditional.ts\nfunction truthy(value) {\n  return value !== false && value !== void 0 && value !== null;\n}\nfunction renderConditions(node2) {\n  const conditions = [\n    { condition: node2.attributes.primary, children: [] }\n  ];\n  for (const child of node2.children) {\n    if (child.type === \"tag\" && child.tag === \"else\")\n      conditions.push({\n        condition: \"primary\" in child.attributes ? child.attributes.primary : true,\n        children: []\n      });\n    else\n      conditions[conditions.length - 1].children.push(child);\n  }\n  return conditions;\n}\nvar tagIf = {\n  attributes: {\n    primary: { type: Object, render: false }\n  },\n  transform(node2, config) {\n    const conditions = renderConditions(node2);\n    for (const { condition, children } of conditions)\n      if (truthy(condition)) {\n        const nodes = children.flatMap((child) => child.transform(config));\n        if (nodes.some(isPromise)) {\n          return Promise.all(nodes).then((nodes2) => nodes2.flat());\n        }\n        return nodes;\n      }\n    return [];\n  }\n};\nvar tagElse = {\n  selfClosing: true,\n  attributes: {\n    primary: { type: Object, render: false }\n  }\n};\n\n// src/functions/index.ts\nvar and = {\n  transform(parameters) {\n    return Object.values(parameters).every((x) => truthy(x));\n  }\n};\nvar or = {\n  transform(parameters) {\n    return Object.values(parameters).find((x) => truthy(x)) !== void 0;\n  }\n};\nvar not = {\n  parameters: {\n    0: { required: true }\n  },\n  transform(parameters) {\n    return !truthy(parameters[0]);\n  }\n};\nvar equals = {\n  transform(parameters) {\n    const values = Object.values(parameters);\n    return values.every((v) => v === values[0]);\n  }\n};\nvar debug = {\n  transform(parameters) {\n    return JSON.stringify(parameters[0], null, 2);\n  }\n};\nvar defaultFn = {\n  transform(parameters) {\n    return parameters[0] === void 0 ? parameters[1] : parameters[0];\n  }\n};\nvar functions_default = { and, or, not, equals, default: defaultFn, debug };\n\n// src/transforms/table.ts\nfunction convertToRow(node2, cellType = \"td\") {\n  node2.type = \"tr\";\n  node2.attributes = {};\n  for (const cell of node2.children)\n    cell.type = cellType;\n  return node2;\n}\nfunction transform(document2) {\n  for (const node2 of document2.walk()) {\n    if (node2.type !== \"tag\" || node2.tag !== \"table\")\n      continue;\n    const [first, ...rest] = node2.children;\n    if (!first || first.type === \"table\")\n      continue;\n    const table3 = new ast_default.Node(\"table\", node2.attributes, [\n      new ast_default.Node(\"thead\"),\n      new ast_default.Node(\"tbody\")\n    ]);\n    const [thead2, tbody2] = table3.children;\n    if (first.type === \"list\")\n      thead2.push(convertToRow(first, \"th\"));\n    for (const row of rest) {\n      if (row.type === \"list\")\n        convertToRow(row);\n      else if (row.type === \"tag\" && row.tag === \"if\") {\n        const children = [];\n        for (const child of row.children) {\n          if (child.type === \"hr\")\n            continue;\n          if (child.type === \"list\")\n            convertToRow(child);\n          children.push(child);\n        }\n        row.children = children;\n      } else\n        continue;\n      tbody2.push(row);\n    }\n    node2.children = [table3];\n  }\n}\n\n// src/transforms/index.ts\nvar transforms_default = [transform];\n\n// src/parser.ts\nvar mappings = {\n  ordered_list: \"list\",\n  bullet_list: \"list\",\n  code_inline: \"code\",\n  list_item: \"item\",\n  variable: \"text\"\n};\nfunction annotate(node2, attributes) {\n  for (const attribute of attributes) {\n    node2.annotations.push(attribute);\n    const { name, value, type } = attribute;\n    if (type === \"attribute\")\n      node2.attributes[name] = value;\n    else if (type === \"class\")\n      if (node2.attributes.class)\n        node2.attributes.class[name] = value;\n      else\n        node2.attributes.class = { [name]: value };\n  }\n}\nfunction handleAttrs(token, type) {\n  switch (type) {\n    case \"heading\":\n      return { level: Number(token.tag.replace(\"h\", \"\")) };\n    case \"list\":\n      return { ordered: token.type.startsWith(\"ordered\") };\n    case \"link\": {\n      const attrs = Object.fromEntries(token.attrs);\n      return attrs.title ? { href: attrs.href, title: attrs.title } : { href: attrs.href };\n    }\n    case \"image\": {\n      const attrs = Object.fromEntries(token.attrs);\n      return attrs.title ? { alt: token.content, src: attrs.src, title: attrs.title } : { alt: token.content, src: attrs.src };\n    }\n    case \"text\":\n    case \"code\":\n      return { content: (token.meta || {}).variable || token.content };\n    case \"fence\": {\n      const [language] = token.info.split(\" \", 1);\n      return language === \"\" ? { content: token.content } : { content: token.content, language };\n    }\n    case \"td\":\n    case \"th\": {\n      if (token.attrs) {\n        const attrs = Object.fromEntries(token.attrs);\n        let align;\n        if (attrs.style) {\n          if (attrs.style.includes(\"left\")) {\n            align = \"left\";\n          } else if (attrs.style.includes(\"center\")) {\n            align = \"center\";\n          } else if (attrs.style.includes(\"right\")) {\n            align = \"right\";\n          }\n        }\n        if (align) {\n          return { align };\n        }\n      }\n      return {};\n    }\n    default:\n      return {};\n  }\n}\nfunction handleToken(token, nodes, file, inlineParent) {\n  if (token.type === \"frontmatter\") {\n    nodes[0].attributes.frontmatter = token.content;\n    return;\n  }\n  if (token.hidden || token.type === \"text\" && token.content === \"\")\n    return;\n  const errors = token.errors || [];\n  const parent = nodes[nodes.length - 1];\n  const { tag, attributes, error: error2 } = token.meta || {};\n  if (token.type === \"annotation\") {\n    if (inlineParent)\n      return annotate(inlineParent, attributes);\n    return parent.errors.push({\n      id: \"no-inline-annotations\",\n      level: \"error\",\n      message: `Can't apply inline annotations to '${parent.type}'`\n    });\n  }\n  let typeName = token.type.replace(/_(open|close)$/, \"\");\n  if (mappings[typeName])\n    typeName = mappings[typeName];\n  if (typeName === \"error\") {\n    const { message, location } = error2;\n    errors.push({ id: \"parse-error\", level: \"critical\", message, location });\n  }\n  if (token.nesting < 0) {\n    if (parent.type === typeName) {\n      if (parent.lines && token.map)\n        parent.lines.push(...token.map);\n      return nodes.pop();\n    }\n    errors.push({\n      id: \"missing-opening\",\n      level: \"critical\",\n      message: `Node '${typeName}' is missing opening`\n    });\n  }\n  const attrs = handleAttrs(token, typeName);\n  const node2 = new Node(typeName, attrs, void 0, tag || void 0);\n  const { position = {} } = token;\n  node2.errors = errors;\n  node2.lines = token.map || parent.lines || [];\n  node2.location = {\n    file,\n    start: {\n      line: node2.lines[0],\n      character: position.start\n    },\n    end: {\n      line: node2.lines[1],\n      character: position.end\n    }\n  };\n  if (inlineParent)\n    node2.inline = true;\n  if (attributes && [\"tag\", \"fence\", \"image\"].includes(typeName))\n    annotate(node2, attributes);\n  parent.push(node2);\n  if (token.nesting > 0)\n    nodes.push(node2);\n  if (!Array.isArray(token.children))\n    return;\n  inlineParent = parent;\n  nodes.push(node2);\n  const isLeafNode = typeName === \"image\";\n  if (!isLeafNode) {\n    for (const child of token.children)\n      handleToken(child, nodes, file, inlineParent);\n  }\n  nodes.pop();\n}\nfunction parser(tokens, file) {\n  const doc = new Node(\"document\");\n  const nodes = [doc];\n  for (const token of tokens)\n    handleToken(token, nodes, file);\n  if (nodes.length > 1)\n    for (const node2 of nodes.slice(1))\n      node2.errors.push({\n        id: \"missing-closing\",\n        level: \"critical\",\n        message: `Node '${node2.tag || node2.type}' is missing closing`\n      });\n  for (const transform3 of transforms_default)\n    transform3(doc);\n  return doc;\n}\n\n// src/schema.ts\nvar schema_exports = {};\n__export(schema_exports, {\n  blockquote: () => blockquote,\n  code: () => code,\n  document: () => document,\n  em: () => em,\n  error: () => error,\n  fence: () => fence,\n  hardbreak: () => hardbreak,\n  heading: () => heading,\n  hr: () => hr,\n  image: () => image,\n  inline: () => inline,\n  item: () => item,\n  link: () => link,\n  list: () => list,\n  node: () => node,\n  paragraph: () => paragraph,\n  s: () => s,\n  softbreak: () => softbreak,\n  strong: () => strong,\n  table: () => table,\n  tbody: () => tbody,\n  td: () => td,\n  text: () => text,\n  th: () => th,\n  thead: () => thead,\n  tr: () => tr\n});\nvar document = {\n  render: \"article\",\n  children: [\n    \"heading\",\n    \"paragraph\",\n    \"image\",\n    \"table\",\n    \"tag\",\n    \"fence\",\n    \"blockquote\",\n    \"list\",\n    \"hr\"\n  ],\n  attributes: {\n    frontmatter: { render: false }\n  }\n};\nvar heading = {\n  children: [\"inline\"],\n  attributes: {\n    level: { type: Number, render: false, required: true }\n  },\n  transform(node2, config) {\n    return new Tag(`h${node2.attributes[\"level\"]}`, node2.transformAttributes(config), node2.transformChildren(config));\n  }\n};\nvar paragraph = {\n  render: \"p\",\n  children: [\"inline\"]\n};\nvar image = {\n  render: \"img\",\n  attributes: {\n    src: { type: String, required: true },\n    alt: { type: String },\n    title: { type: String }\n  }\n};\nvar fence = {\n  render: \"pre\",\n  attributes: {\n    content: { type: String, render: false, required: true },\n    language: { type: String, render: \"data-language\" },\n    process: { type: Boolean, render: false, default: true }\n  },\n  transform(node2, config) {\n    const attributes = node2.transformAttributes(config);\n    const children = node2.children.length ? node2.transformChildren(config) : [node2.attributes.content];\n    return new Tag(\"pre\", attributes, children);\n  }\n};\nvar blockquote = {\n  render: \"blockquote\",\n  children: [\n    \"heading\",\n    \"paragraph\",\n    \"image\",\n    \"table\",\n    \"tag\",\n    \"fence\",\n    \"blockquote\",\n    \"list\",\n    \"hr\"\n  ]\n};\nvar item = {\n  render: \"li\",\n  children: [\n    \"inline\",\n    \"heading\",\n    \"paragraph\",\n    \"image\",\n    \"table\",\n    \"tag\",\n    \"fence\",\n    \"blockquote\",\n    \"list\",\n    \"hr\"\n  ]\n};\nvar list = {\n  children: [\"item\"],\n  attributes: {\n    ordered: { type: Boolean, render: false, required: true }\n  },\n  transform(node2, config) {\n    return new Tag(node2.attributes.ordered ? \"ol\" : \"ul\", node2.transformAttributes(config), node2.transformChildren(config));\n  }\n};\nvar hr = {\n  render: \"hr\"\n};\nvar table = {\n  render: \"table\"\n};\nvar td = {\n  render: \"td\",\n  children: [\n    \"inline\",\n    \"heading\",\n    \"paragraph\",\n    \"image\",\n    \"table\",\n    \"tag\",\n    \"fence\",\n    \"blockquote\",\n    \"list\",\n    \"hr\"\n  ],\n  attributes: {\n    colspan: { type: Number },\n    rowspan: { type: Number },\n    align: { type: String }\n  }\n};\nvar th = {\n  render: \"th\",\n  attributes: {\n    width: { type: Number },\n    align: { type: String }\n  }\n};\nvar tr = {\n  render: \"tr\",\n  children: [\"th\", \"td\"]\n};\nvar tbody = {\n  render: \"tbody\",\n  children: [\"tr\", \"tag\"]\n};\nvar thead = {\n  render: \"thead\",\n  children: [\"tr\"]\n};\nvar strong = {\n  render: \"strong\",\n  children: [\"em\", \"s\", \"link\", \"code\", \"text\", \"tag\"]\n};\nvar em = {\n  render: \"em\",\n  children: [\"strong\", \"s\", \"link\", \"code\", \"text\", \"tag\"]\n};\nvar s = {\n  render: \"s\",\n  children: [\"strong\", \"em\", \"link\", \"code\", \"text\", \"tag\"]\n};\nvar inline = {\n  children: [\n    \"strong\",\n    \"em\",\n    \"s\",\n    \"code\",\n    \"text\",\n    \"tag\",\n    \"link\",\n    \"image\",\n    \"hardbreak\",\n    \"softbreak\"\n  ]\n};\nvar link = {\n  render: \"a\",\n  children: [\"strong\", \"em\", \"s\", \"code\", \"text\", \"tag\"],\n  attributes: {\n    href: { type: String, required: true },\n    title: { type: String }\n  }\n};\nvar code = {\n  render: \"code\",\n  attributes: {\n    content: { type: String, render: false, required: true }\n  },\n  transform(node2, config) {\n    const attributes = node2.transformAttributes(config);\n    return new Tag(\"code\", attributes, [node2.attributes.content]);\n  }\n};\nvar text = {\n  attributes: {\n    content: { type: String, required: true }\n  },\n  transform(node2) {\n    return node2.attributes.content;\n  }\n};\nvar hardbreak = {\n  render: \"br\"\n};\nvar softbreak = {\n  transform() {\n    return \" \";\n  }\n};\nvar error = {};\nvar node = {};\n\n// src/renderers/html.ts\nvar import_markdown_it = __toModule(require_markdown_it());\nvar { escapeHtml } = (0, import_markdown_it.default)().utils;\nvar voidElements = new Set([\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"link\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\"\n]);\nfunction render(node2) {\n  if (typeof node2 === \"string\")\n    return escapeHtml(node2);\n  if (Array.isArray(node2))\n    return node2.map(render).join(\"\");\n  if (node2 === null || typeof node2 !== \"object\")\n    return \"\";\n  const { name, attributes, children = [] } = node2;\n  if (!name)\n    return render(children);\n  let output = `<${name}`;\n  for (const [k, v] of Object.entries(attributes ?? {}))\n    output += ` ${k}=\"${escapeHtml(String(v))}\"`;\n  output += \">\";\n  if (voidElements.has(name))\n    return output;\n  if (children.length)\n    output += render(children);\n  output += `</${name}>`;\n  return output;\n}\n\n// src/renderers/react/shared.ts\nfunction tagName(name, components) {\n  return typeof name !== \"string\" ? \"Fragment\" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];\n}\n\n// src/renderers/react/react.ts\nfunction dynamic(node2, React, { components = {} } = {}) {\n  function deepRender2(value) {\n    if (value == null || typeof value !== \"object\")\n      return value;\n    if (Array.isArray(value))\n      return value.map((item2) => deepRender2(item2));\n    if (value.$$mdtype === \"Tag\")\n      return render3(value);\n    if (typeof value !== \"object\")\n      return value;\n    const output = {};\n    for (const [k, v] of Object.entries(value))\n      output[k] = deepRender2(v);\n    return output;\n  }\n  function render3(node3) {\n    if (Array.isArray(node3))\n      return React.createElement(React.Fragment, null, ...node3.map(render3));\n    if (node3 === null || typeof node3 !== \"object\")\n      return node3;\n    const {\n      name,\n      attributes: { class: className, ...attrs } = {},\n      children = []\n    } = node3;\n    if (className)\n      attrs.className = className;\n    return React.createElement(tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender2(attrs), ...children.map(render3));\n  }\n  return render3(node2);\n}\n\n// src/renderers/react/static.ts\nfunction renderArray(children) {\n  return children.map(render2).join(\", \");\n}\nfunction deepRender(value) {\n  if (value == null || typeof value !== \"object\")\n    return JSON.stringify(value);\n  if (Array.isArray(value))\n    return `[${value.map((item2) => deepRender(item2)).join(\", \")}]`;\n  if (value.$$mdtype === \"Tag\")\n    return render2(value);\n  if (typeof value !== \"object\")\n    return JSON.stringify(value);\n  const object = Object.entries(value).map(([k, v]) => [JSON.stringify(k), deepRender(v)].join(\": \")).join(\", \");\n  return `{${object}}`;\n}\nfunction render2(node2) {\n  if (Array.isArray(node2))\n    return `React.createElement(React.Fragment, null, ${renderArray(node2)})`;\n  if (node2 === null || typeof node2 !== \"object\")\n    return JSON.stringify(node2);\n  const {\n    name,\n    attributes: { class: className, ...attrs } = {},\n    children = []\n  } = node2;\n  if (className)\n    attrs.className = className;\n  return `React.createElement(\n    tagName(${JSON.stringify(name)}, components),\n    ${Object.keys(attrs).length == 0 ? \"null\" : deepRender(attrs)},\n    ${renderArray(children)})`;\n}\nfunction reactStatic(node2) {\n  return `\n  (({components = {}} = {}) => {\n    ${tagName}\n    return ${render2(node2)};\n  })\n`;\n}\n\n// src/renderers/index.ts\nvar renderers_default = { html: render, react: dynamic, reactStatic };\n\n// src/tags/partial.ts\nvar PartialFile = class {\n  validate(file, config) {\n    const { partials = {} } = config;\n    const partial2 = partials[file];\n    if (!partial2)\n      return [\n        {\n          id: \"attribute-value-invalid\",\n          level: \"error\",\n          message: `Partial \\`${file}\\` not found. The 'file' attribute must be set in \\`config.partials\\``\n        }\n      ];\n    return [];\n  }\n};\nvar partial = {\n  selfClosing: true,\n  attributes: {\n    file: { type: PartialFile, render: false, required: true },\n    variables: { type: Object, render: false }\n  },\n  transform(node2, config) {\n    const { partials = {} } = config;\n    const { file, variables } = node2.attributes;\n    const partial2 = partials[file];\n    if (!partial2)\n      return null;\n    const scopedConfig = {\n      ...config,\n      variables: {\n        ...config.variables,\n        ...variables,\n        [\"$$partial:filename\"]: file\n      }\n    };\n    const transformChildren = (part) => part.resolve(scopedConfig).transformChildren(scopedConfig);\n    return Array.isArray(partial2) ? partial2.flatMap(transformChildren) : transformChildren(partial2);\n  }\n};\n\n// src/tags/table.ts\nvar table2 = {\n  children: [\"table\"]\n};\n\n// src/tags/index.ts\nvar tags_default = {\n  if: tagIf,\n  else: tagElse,\n  partial,\n  table: table2\n};\n\n// src/tokenizer/index.ts\nvar import_lib = __toModule(require_lib());\n\n// src/tokenizer/plugins/annotations.ts\nvar import_tag4 = __toModule(require_tag());\nfunction createToken(state, content, contentStart) {\n  try {\n    const { type, meta, nesting = 0 } = (0, import_tag4.parse)(content, { Variable, Function: Function2 });\n    const token = state.push(type, \"\", nesting);\n    token.info = content;\n    token.meta = meta;\n    if (!state.delimiters) {\n      state.delimiters = [];\n    }\n    return token;\n  } catch (error2) {\n    if (!(error2 instanceof import_tag4.SyntaxError))\n      throw error2;\n    const {\n      message,\n      location: { start, end }\n    } = error2;\n    const location = contentStart ? {\n      start: { offset: start.offset + contentStart },\n      end: { offset: end.offset + contentStart }\n    } : null;\n    const token = state.push(\"error\", \"\", 0);\n    token.meta = { error: { message, location } };\n    return token;\n  }\n}\nfunction block(state, startLine, endLine, silent) {\n  const start = state.bMarks[startLine] + state.tShift[startLine];\n  const finish = state.eMarks[startLine];\n  if (!state.src.startsWith(OPEN, start))\n    return false;\n  const tagEnd = findTagEnd(state.src, start);\n  const lastPossible = state.src.slice(0, finish).trim().length;\n  if (!tagEnd || tagEnd < lastPossible - CLOSE.length)\n    return false;\n  const contentStart = start + OPEN.length;\n  const content = state.src.slice(contentStart, tagEnd).trim();\n  const lines = content.split(\"\\n\").length;\n  if (content[0] === \"$\")\n    return false;\n  if (silent)\n    return true;\n  const token = createToken(state, content, contentStart);\n  token.map = [startLine, startLine + lines];\n  state.line += lines;\n  return true;\n}\nfunction inline2(state, silent) {\n  if (!state.src.startsWith(OPEN, state.pos))\n    return false;\n  const tagEnd = findTagEnd(state.src, state.pos);\n  if (!tagEnd)\n    return false;\n  const content = state.src.slice(state.pos + OPEN.length, tagEnd);\n  if (!silent)\n    createToken(state, content.trim());\n  state.pos = tagEnd + CLOSE.length;\n  return true;\n}\nfunction core(state) {\n  let token;\n  for (token of state.tokens) {\n    if (token.type !== \"fence\")\n      continue;\n    if (token.info.includes(OPEN)) {\n      const start = token.info.indexOf(OPEN);\n      const end = findTagEnd(token.info, start);\n      const content = token.info.slice(start + OPEN.length, end);\n      try {\n        const { meta } = (0, import_tag4.parse)(content.trim(), { Variable, Function: Function2 });\n        token.meta = meta;\n      } catch (error2) {\n        if (!(error2 instanceof import_tag4.SyntaxError))\n          throw error2;\n        if (!token.errors)\n          token.errors = [];\n        token.errors.push({\n          id: \"fence-tag-error\",\n          level: \"error\",\n          message: `Syntax error in fence tag: ${error2.message}`\n        });\n      }\n    }\n    if (token?.meta?.attributes?.find((attr) => attr.name === \"process\" && !attr.value))\n      continue;\n    token.children = parseTags(token.content, token.map[0]);\n  }\n}\nfunction plugin(md) {\n  md.block.ruler.before(\"paragraph\", \"annotations\", block, {\n    alt: [\"paragraph\", \"blockquote\"]\n  });\n  md.inline.ruler.push(\"containers\", inline2);\n  md.core.ruler.push(\"annotations\", core);\n}\n\n// src/tokenizer/plugins/frontmatter.ts\nvar fence2 = \"---\";\nfunction getLine(state, n) {\n  return state.src.slice(state.bMarks[n], state.eMarks[n]).trim();\n}\nfunction findClose(state, endLine) {\n  for (let line = 1; line < endLine; line++)\n    if (getLine(state, line) === fence2)\n      return line;\n}\nfunction block2(state, startLine, endLine, silent) {\n  if (startLine != 0 || getLine(state, 0) != fence2)\n    return false;\n  const close = findClose(state, endLine);\n  if (!close)\n    return false;\n  if (silent)\n    return true;\n  const token = state.push(\"frontmatter\", \"\", 0);\n  token.content = state.src.slice(state.eMarks[0], state.bMarks[close]).trim();\n  token.map = [0, close];\n  token.hidden = true;\n  state.line = close + 1;\n  return true;\n}\nfunction plugin2(md) {\n  md.block.ruler.before(\"hr\", \"frontmatter\", block2);\n}\n\n// src/tokenizer/index.ts\nvar Tokenizer = class {\n  constructor(config = {}) {\n    this.parser = new import_lib.default(config);\n    this.parser.use(plugin, \"annotations\", {});\n    this.parser.use(plugin2, \"frontmatter\", {});\n    this.parser.disable([\n      \"lheading\",\n      \"code\"\n    ]);\n  }\n  tokenize(content) {\n    return this.parser.parse(content.toString(), {});\n  }\n};\n\n// src/validator.ts\nvar TypeMappings = {\n  String,\n  Number,\n  Array,\n  Object,\n  Boolean\n};\nfunction validateType(type, value, config) {\n  if (!type)\n    return true;\n  if (ast_default.isFunction(value) && config.validation?.validateFunctions) {\n    const schema = config.functions?.[value.name];\n    return !schema?.returns ? true : Array.isArray(schema.returns) ? schema.returns.find((t) => t === type) !== void 0 : schema.returns === type;\n  }\n  if (ast_default.isAst(value))\n    return true;\n  if (Array.isArray(type))\n    return type.some((t) => validateType(t, value, config));\n  if (typeof type === \"string\")\n    type = TypeMappings[type];\n  if (typeof type === \"function\") {\n    const instance = new type();\n    if (instance.validate) {\n      return instance.validate(value, config);\n    }\n  }\n  return value != null && value.constructor === type;\n}\nfunction typeToString(type) {\n  if (typeof type === \"string\")\n    return type;\n  if (Array.isArray(type))\n    return type.map(typeToString).join(\" | \");\n  return type.name;\n}\nfunction validateFunction(fn, config) {\n  const schema = config.functions?.[fn.name];\n  const errors = [];\n  if (!schema)\n    return [\n      {\n        id: \"function-undefined\",\n        level: \"critical\",\n        message: `Undefined function: '${fn.name}'`\n      }\n    ];\n  if (schema.validate)\n    errors.push(...schema.validate(fn, config));\n  if (schema.parameters) {\n    for (const [key, value] of Object.entries(fn.parameters)) {\n      const param = schema.parameters?.[key];\n      if (!param) {\n        errors.push({\n          id: \"parameter-undefined\",\n          level: \"error\",\n          message: `Invalid parameter: '${key}'`\n        });\n        continue;\n      }\n      if (ast_default.isAst(value) && !ast_default.isFunction(value))\n        continue;\n      if (param.type) {\n        const valid = validateType(param.type, value, config);\n        if (valid === false) {\n          errors.push({\n            id: \"parameter-type-invalid\",\n            level: \"error\",\n            message: `Parameter '${key}' of '${fn.name}' must be type of '${typeToString(param.type)}'`\n          });\n        } else if (Array.isArray(valid)) {\n          errors.push(...valid);\n        }\n      }\n    }\n  }\n  for (const [key, { required }] of Object.entries(schema.parameters ?? {}))\n    if (required && fn.parameters[key] === void 0)\n      errors.push({\n        id: \"parameter-missing-required\",\n        level: \"error\",\n        message: `Missing required parameter: '${key}'`\n      });\n  return errors;\n}\nfunction validate(node2, config) {\n  const schema = node2.findSchema(config);\n  const errors = [...node2.errors || []];\n  if (!schema) {\n    errors.push({\n      id: node2.tag ? \"tag-undefined\" : \"node-undefined\",\n      level: \"critical\",\n      message: node2.tag ? `Undefined tag: '${node2.tag}'` : `Undefined node: '${node2.type}'`\n    });\n    return errors;\n  }\n  if (schema.selfClosing && node2.children.length > 0)\n    errors.push({\n      id: \"tag-selfclosing-has-children\",\n      level: \"critical\",\n      message: `'${node2.tag}' tag should be self-closing`\n    });\n  const attributes = {\n    ...globalAttributes,\n    ...schema.attributes\n  };\n  if (schema.validate)\n    errors.push(...schema.validate(node2, config));\n  for (let [key, value] of Object.entries(node2.attributes)) {\n    const attrib = attributes[key];\n    if (!attrib) {\n      errors.push({\n        id: \"attribute-undefined\",\n        level: \"error\",\n        message: `Invalid attribute: '${key}'`\n      });\n      continue;\n    }\n    let { type, matches, errorLevel } = attrib;\n    if (ast_default.isAst(value)) {\n      if (ast_default.isFunction(value) && config.validation?.validateFunctions)\n        errors.push(...validateFunction(value, config));\n      else if (ast_default.isVariable(value) && config.variables) {\n        let missing = false;\n        let variables = config.variables;\n        for (const key2 of value.path) {\n          if (!Object.prototype.hasOwnProperty.call(variables, key2)) {\n            missing = true;\n            break;\n          }\n          variables = variables[key2];\n        }\n        if (missing) {\n          errors.push({\n            id: \"variable-undefined\",\n            level: \"error\",\n            message: `Undefined variable: '${value.path.join(\".\")}'`\n          });\n        }\n      } else\n        continue;\n    }\n    value = value;\n    if (key === \"id\" && value.match(/^[0-9]/))\n      errors.push({\n        id: \"attribute-value-invalid\",\n        level: \"error\",\n        message: \"The id attribute must not start with a number\"\n      });\n    if (type) {\n      const valid = validateType(type, value, config);\n      if (valid === false) {\n        errors.push({\n          id: \"attribute-type-invalid\",\n          level: errorLevel || \"error\",\n          message: `Attribute '${key}' must be type of '${typeToString(type)}'`\n        });\n      }\n      if (Array.isArray(valid)) {\n        errors.push(...valid);\n      }\n    }\n    if (typeof matches === \"function\")\n      matches = matches(config);\n    if (Array.isArray(matches) && !matches.includes(value))\n      errors.push({\n        id: \"attribute-value-invalid\",\n        level: errorLevel || \"error\",\n        message: `Attribute '${key}' must match one of ${JSON.stringify(matches)}. Got '${value}' instead.`\n      });\n    if (matches instanceof RegExp && !matches.test(value))\n      errors.push({\n        id: \"attribute-value-invalid\",\n        level: errorLevel || \"error\",\n        message: `Attribute '${key}' must match ${matches}. Got '${value}' instead.`\n      });\n  }\n  for (const [key, { required }] of Object.entries(attributes))\n    if (required && node2.attributes[key] === void 0)\n      errors.push({\n        id: \"attribute-missing-required\",\n        level: \"error\",\n        message: `Missing required attribute: '${key}'`\n      });\n  for (const { type } of node2.children) {\n    if (schema.children && type !== \"error\" && !schema.children.includes(type))\n      errors.push({\n        id: \"child-invalid\",\n        level: \"warning\",\n        message: `Can't nest '${type}' in '${node2.tag || node2.type}'`\n      });\n  }\n  return errors;\n}\n\n// index.ts\nvar tokenizer = new Tokenizer();\nfunction mergeConfig(config = {}) {\n  return {\n    ...config,\n    tags: {\n      ...tags_default,\n      ...config.tags\n    },\n    nodes: {\n      ...schema_exports,\n      ...config.nodes\n    },\n    functions: {\n      ...functions_default,\n      ...config.functions\n    }\n  };\n}\nfunction parse3(content, file) {\n  if (typeof content === \"string\")\n    content = tokenizer.tokenize(content);\n  return parser(content, file);\n}\nfunction resolve2(content, config) {\n  if (Array.isArray(content))\n    return content.flatMap((child) => child.resolve(config));\n  return content.resolve(config);\n}\nfunction transform2(nodes, options) {\n  const config = mergeConfig(options);\n  const content = resolve2(nodes, config);\n  if (Array.isArray(content))\n    return content.flatMap((child) => child.transform(config));\n  return content.transform(config);\n}\nfunction validate2(content, options) {\n  const config = mergeConfig(options);\n  const output = [];\n  for (const node2 of [content, ...content.walk()]) {\n    const { type, lines, location } = node2;\n    const errors = validate(node2, config);\n    for (const error2 of errors)\n      output.push({ type, lines, location, error: error2 });\n  }\n  return output;\n}\nfunction createElement(name, attributes = {}, ...children) {\n  return { name, attributes, children };\n}\nvar Markdoc = class {\n  constructor(config) {\n    this.parse = parse3;\n    this.resolve = (content) => resolve2(content, this.config);\n    this.transform = (content) => transform2(content, this.config);\n    this.validate = (content) => validate2(content, this.config);\n    this.config = config;\n  }\n};\nMarkdoc.nodes = schema_exports;\nMarkdoc.tags = tags_default;\nMarkdoc.functions = functions_default;\nMarkdoc.globalAttributes = globalAttributes;\nMarkdoc.renderers = renderers_default;\nMarkdoc.transforms = transforms_default;\nMarkdoc.Ast = ast_default;\nMarkdoc.Tag = Tag;\nMarkdoc.Tokenizer = Tokenizer;\nMarkdoc.parseTags = parseTags;\nMarkdoc.transformer = transformer_default;\nMarkdoc.validator = validate;\nMarkdoc.parse = parse3;\nMarkdoc.transform = transform2;\nMarkdoc.validate = validate2;\nMarkdoc.createElement = createElement;\nMarkdoc.truthy = truthy;\nMarkdoc.__EXPERIMENTAL__format = format;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@markdoc/markdoc/dist/index.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Fboetter%2FDocuments%2FGitHub%2Fdata-spaces-rapport%2Fsrc%2Fpages%2Fcentrale-aktorer-og-teknologiske-komponenter%2Findex.md&page=%2Fcentrale-aktorer-og-teknologiske-komponenter!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);