"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/hvad-er-data-spaces/data-space-designprincipper",{

/***/ "./src/pages/hvad-er-data-spaces/data-space-designprincipper.md":
/*!**********************************************************************!*\
  !*** ./src/pages/hvad-er-data-spaces/data-space-designprincipper.md ***!
  \**********************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__N_SSG\": function() { return /* binding */ __N_SSG; },\n/* harmony export */   \"default\": function() { return /* binding */ MarkdocComponent; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @markdoc/markdoc */ \"./node_modules/@markdoc/markdoc/dist/index.mjs\");\n/* harmony import */ var _Users_boetter_Documents_GitHub_data_spaces_rapport_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@markdoc/next.js/src/runtime.js */ \"./node_modules/@markdoc/next.js/src/runtime.js\");\n/* harmony import */ var _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./markdoc/tags.js */ \"./markdoc/tags.js\");\n/* harmony import */ var _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./markdoc/nodes.js */ \"./markdoc/nodes.js\");\n\n\n// renderers is imported separately so Markdoc isn't sent to the client\n\n\n/**\n * Schema is imported like this so end-user's code is compiled using build-in babel/webpack configs.\n * This enables typescript/ESnext support\n */ var config = {};\n\n\nvar functions = {};\nvar schema = (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n    tags: _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ ? _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] || _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_tags_js__WEBPACK_IMPORTED_MODULE_2__ : {},\n    nodes: _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ ? _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] || _Users_boetter_Documents_GitHub_data_spaces_rapport_markdoc_nodes_js__WEBPACK_IMPORTED_MODULE_3__ : {},\n    functions: functions ? functions.default || functions : {}\n}, config ? config.default || config : {});\nvar components = (0,_Users_boetter_Documents_GitHub_data_spaces_rapport_node_modules_markdoc_next_js_src_runtime_js__WEBPACK_IMPORTED_MODULE_1__.getSchema)(schema).components;\nvar __N_SSG = true;\nfunction MarkdocComponent(props) {\n    // Only execute HMR code in development\n    return _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_5__.renderers.react(props.markdoc.content, (react__WEBPACK_IMPORTED_MODULE_0___default()), {\n        components: (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({}, components, props.components)\n    });\n};\n_c = MarkdocComponent;\nvar _c;\n$RefreshReg$(_c, \"MarkdocComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvaHZhZC1lci1kYXRhLXNwYWNlcy9kYXRhLXNwYWNlLWRlc2lnbnByaW5jaXBwZXIubWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFBMEI7QUFFMUIsdUVBQXVFO0FBQ3BCO0FBRXdFO0FBQzNIOzs7Q0FHQyxHQUNELElBQU1HLE1BQU0sR0FBRyxFQUFFO0FBQzBFO0FBQ0U7QUFDN0YsSUFBTUcsU0FBUyxHQUFHLEVBQUU7QUFDcEIsSUFBTUMsTUFBTSxHQUFHO0lBQ2ZILElBQUksRUFBRUEsZ0dBQUksR0FBSUEsMkdBQVksSUFBSUEsZ0dBQUksR0FBSSxFQUFFO0lBQ3hDQyxLQUFLLEVBQUVBLGlHQUFLLEdBQUlBLDRHQUFhLElBQUlBLGlHQUFLLEdBQUksRUFBRTtJQUM1Q0MsU0FBUyxFQUFFQSxTQUFTLEdBQUlBLFNBQVMsQ0FBQ0UsT0FBTyxJQUFJRixTQUFTLEdBQUksRUFBRTtHQUN4REgsTUFBTSxHQUFJQSxNQUFNLENBQUNLLE9BQU8sSUFBSUwsTUFBTSxHQUFJLEVBQUUsQ0FDM0M7QUFpQkQsSUFBTSxVQUFXLEdBQWFELDBJQUFTLENBQUNLLE1BQU0sQ0FBQyxDQUF4Q0UsVUFBVTs7QUE2Q0YsU0FBU0MsZ0JBQWdCLENBQUNDLEtBQUssRUFBRTtJQUM5Qyx1Q0FBdUM7SUFDdkMsT0FBT1YsNkRBQWUsQ0FBQ1UsS0FBSyxDQUFDRSxPQUFPLENBQUNDLE9BQU8sRUFBRWQsOENBQUssRUFBRTtRQUNuRFMsVUFBVSxFQUFFLG1GQUNQQSxVQUFVLEVBRVZFLEtBQUssQ0FBQ0YsVUFBVSxDQUNwQjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFUdUJDLEtBQUFBLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvcGFnZXMvaHZhZC1lci1kYXRhLXNwYWNlcy9kYXRhLXNwYWNlLWRlc2lnbnByaW5jaXBwZXIubWQ/YWNiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG4vLyByZW5kZXJlcnMgaXMgaW1wb3J0ZWQgc2VwYXJhdGVseSBzbyBNYXJrZG9jIGlzbid0IHNlbnQgdG8gdGhlIGNsaWVudFxuaW1wb3J0IE1hcmtkb2MsIHtyZW5kZXJlcnN9IGZyb20gJ0BtYXJrZG9jL21hcmtkb2MnXG5cbmltcG9ydCB7Z2V0U2NoZW1hfSBmcm9tICcvVXNlcnMvYm9ldHRlci9Eb2N1bWVudHMvR2l0SHViL2RhdGEtc3BhY2VzLXJhcHBvcnQvbm9kZV9tb2R1bGVzL0BtYXJrZG9jL25leHQuanMvc3JjL3J1bnRpbWUuanMnO1xuLyoqXG4gKiBTY2hlbWEgaXMgaW1wb3J0ZWQgbGlrZSB0aGlzIHNvIGVuZC11c2VyJ3MgY29kZSBpcyBjb21waWxlZCB1c2luZyBidWlsZC1pbiBiYWJlbC93ZWJwYWNrIGNvbmZpZ3MuXG4gKiBUaGlzIGVuYWJsZXMgdHlwZXNjcmlwdC9FU25leHQgc3VwcG9ydFxuICovXG5jb25zdCBjb25maWcgPSB7fTtcbmltcG9ydCAqIGFzIHRhZ3MgZnJvbSAnL1VzZXJzL2JvZXR0ZXIvRG9jdW1lbnRzL0dpdEh1Yi9kYXRhLXNwYWNlcy1yYXBwb3J0L21hcmtkb2MvdGFncy5qcydcbmltcG9ydCAqIGFzIG5vZGVzIGZyb20gJy9Vc2Vycy9ib2V0dGVyL0RvY3VtZW50cy9HaXRIdWIvZGF0YS1zcGFjZXMtcmFwcG9ydC9tYXJrZG9jL25vZGVzLmpzJ1xuY29uc3QgZnVuY3Rpb25zID0ge307XG5jb25zdCBzY2hlbWEgPSB7XG50YWdzOiB0YWdzID8gKHRhZ3MuZGVmYXVsdCB8fCB0YWdzKSA6IHt9LFxubm9kZXM6IG5vZGVzID8gKG5vZGVzLmRlZmF1bHQgfHwgbm9kZXMpIDoge30sXG5mdW5jdGlvbnM6IGZ1bmN0aW9ucyA/IChmdW5jdGlvbnMuZGVmYXVsdCB8fCBmdW5jdGlvbnMpIDoge30sXG4uLi4oY29uZmlnID8gKGNvbmZpZy5kZWZhdWx0IHx8IGNvbmZpZykgOiB7fSksXG59O1xuXG4vKipcbiAqIFNvdXJjZSB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lLCBzbyBwYXJzZSBoYXBwZW5zIGF0IHRoZSBmaWxlIHJvb3RcbiAqL1xuY29uc3Qgc291cmNlID0gXCItLS1cXG50aXRsZTogRGF0YSBzcGFjZSBkZXNpZ25wcmluY2lwcGVyXFxuZGVzY3JpcHRpb246IEh2YWQgZXIgZGF0YSBzcGFjZXM/XFxuLS0tXFxuXFxuUHVibGlrYXRpb25lbiBbRGVzaWduIFByaW5jaXBsZXMgZm9yIERhdGEgU3BhY2VzXShodHRwczovL2Rlc2lnbi1wcmluY2lwbGVzLWZvci1kYXRhLXNwYWNlcy5vcmcvKSBlciBmb3JmYXR0ZXQgYWYgZW4gcsOma2tlIGFmIGRlIHN0w7hyc3RlIGFrdMO4cmVyIGluZGVuZm9yIGRhdGEgc3BhY2VzIChzZSBrYXBpdGVsIDQpIG9nIGVyIGV0IHJlc3VsdGF0IGFmIEVVLXByb2pla3RldCBPUEVOIERFSSAoc2UgYWZzbml0IDMuNC4xKS4gSGVyIGJlc2tyaXZlcyBmaXJlIHByaW3DpnJlIGRlc2lnbnByaW5jaXBwZXIgZm9yIGRhdGEgc3BhY2VzLCBzb20gZXIgZGUgZGVzaWducHJpbmNpcHBlciwgc29tIGRlIGZsZXN0ZSBsw6ZnZ2VyIHNpZyBvcGFkOlxcblxcbiFbRmlndXIgMl0oL2ZpZ3VyLTIucG5nKVxcblxcbl9GaWd1ciAyOiBEZXNpZ24gUHJpbmNpcGxlcyBmb3IgRGF0YSBTcGFjZXMsIHNpZGUgMTYuX1xcblxcbi0tLVxcblxcbiMjIERhdGFzdXZlcsOmbml0ZXRcXG5cXG5HZW5uZW0gZGF0YSBzcGFjZXMgc2thbCBkZXIgc2thYmVzIG1lcmUgdHJhbnNwYXJlbnMgb2cgZGF0YXN1dmVyw6ZuaXRldCBmb3IgZGF0YWVqZXJlOyBkZXR0ZSBnw6ZsZGVyIGLDpWRlIHByaXZhdHBlcnNvbmVyLCBvcmdhbmlzYXRpb25lciwgbXluZGlnaGVkZXIgb2cgdmlya3NvbWhlZGVyLlxcblxcbkRhdGFlamVyZSBza2FsIHNpa3JlcyBhZGdhbmcgdGlsIGRlIGRhdGEsIGRlciBwcm9kdWNlcmVzIGdlbm5lbSBkZXJlcyBicnVnIGFmIHPDpXZlbCBvbmxpbmUgc2VydmljZXMgb2cgZ2VubmVtIGJydWcgYWYgSW9UIChJbnRlcm5ldCBvZiBUaGluZ3MpLXByb2R1a3RlciAoc2UgRGF0YSBBY3QsIGFmc25pdCAzLjIuMSkuXFxuXFxuRGlzc2UgZGF0YSBza2FsIGfDuHJlcyB0aWxnw6ZuZ2VsaWdlIGZvciBkYXRhZWplcmUgaSBzdGFuZGFyZGlzZXJlZGUgZm9ybWF0ZXIsIHPDpSBkZSBrYW4gYW52ZW5kZXMgcMOlIHR2w6ZycyBhZiBzeXN0ZW1lciwgb2cgc8OlIHNsdXRicnVnZXJlbiBrYW4gdGFnZSBzaW5lIGRhdGEgbWVkIHNpZywgaHZpcyBkZW5uZSDDuG5za2VyIGF0IHNraWZ0ZSB1ZGJ5ZGVyLiBFdCBhbmRldCB2aWd0aWd0IGVsZW1lbnQgdmVkIGRhdGFzdXZlcsOmbml0ZXQgZXIsIGF0IGRhdGFlamVyZW4gKGlnZW4gYsOlZGUgcHJpdmF0cGVyc29uZXIgb2cgdmlya3NvbWhlZGVyL29yZ2FuaXNhdGlvbmVyKSBza2FsIGhhdmUgcmV0IHRpbCBzZWx2IGF0IGJlc3RlbW1lLCBodmVtIGRlciBza2FsIGhhdmUgYWRnYW5nIHRpbCBodmlsa2UgZGF0YSAob2dzw6Uga3VuIGRlbGUgYWYgZGF0YXPDpnQpLCBvZyB0aWwgaHZpbGtldCBmb3J1ZGJlc3RlbXQgZm9ybcOlbCBkYXRhIG3DpSBiZW55dHRlcyBvZyBpIGh2aWxrZW4gZGVmaW5lcmV0IHRpZHNwZXJpb2RlLiBEYXRhZWplcmUgc2thbCBzw6VsZWRlcyBoYXZlIG11bGlnaGVkIGZvciBww6UgZW4gbGV0IG9nIGdlbm5lbXNpZ3RpZyBtw6VkZSBhdCBnaXZlIHRyZWRqZXBhcnRlciBhZGdhbmcgdGlsIGRlcmVzIGRhdGEsIGVudGVuIGdyYXRpcyBlbGxlciB2ZWQgYXQgc8OmbGdlIGRhdGEgZ2VubmVtIGtvbW1lcmNpZWxsZSBkYXRhbWFya2Vkc3BsYXRmb3JtZS4gRGV0IHNrYWwgZGVzdWRlbiB2w6ZyZSBsZXQgZm9yIGVuIGRhdGFlamVyIGF0IHRpbGJhZ2V0csOma2tlIHNhbXR5a2tlLlxcblxcbkVrc2VtcGVsXFxuXFxuRGV0IGt1bm5lIHbDpnJlIGVuIGxhbmRtYW5kLCBkZXIgc2thbCBoYXZlIHJldCB0aWwgZGVuIGRhdGEsIGRlciBwcm9kdWNlcmVzIGdlbm5lbSBicnVnZW4gYWYgaGFucy9oZW5kZXMgaW50ZWxsaWdlbnRlIGxhbmRicnVnc21hc2tpbmVyLiBEYXRhIHNrYWwgZ8O4cmVzIHRpbGfDpm5nZWxpZyBww6UgZW4gbcOlZGUsIHPDpSBoYW4gc2VsdiBrYW4gc2Fta8O4cmUgZGF0YSBtZWQgZGF0YSBmcmEgYW5kcmUgbWFza2luZXIuIExhbmRtYW5kZW4gc2thbCBkZXN1ZGVuIHNlbHYga3VubmUgZ2l2ZSBhZGdhbmcgdGlsIGRlbm5lIGRhdGEsIHPDpSBla3NlbXBlbHZpcyBlbiB1ZGJ5ZGVyIGFmIGVuIGRpZ2l0YWwgc2VydmljZSB0aWwgb3B0aW1lcmluZyBhZiBsYW5kYnJ1ZyBlbGxlciBlbmVyZ2lvcHRpbWVyaW5nIGthbiBicnVnZSBkYXRhZW5lIHRpbCBiZXN0ZW10ZSBiZWhvdi4gTGlnZWxlZGVzIHNrYWwgbGFuZG1hbmRlbiBrdW5uZSBzw6ZsZ2Ugc2luIGRhdGEgdmlkZXJlIHRpbCBiZXN0ZW10ZSBmb3Jtw6VsLlxcblxcbiFbU2hhcGUyXShSYWNrTXVsdGlwYXJ0MjAyMzAyMDMtMS1uZHQydXdfaHRtbF85ZjE1NDhhYWQzMDkzNWY4LmdpZilcXG5cXG5EYXRhc3V2ZXLDpm5pdGV0IHNrYWwgc2thYmUgbWVyZSB0cmFuc3BhcmVucyBvZyBkaXN0cmlidWVyZXQgZGlnaXRhbCB0cm92w6ZyZGlnaGVkLCBzaWtrZXJoZWQsIHNpa3JpbmcgYWYgcHJpdmF0bGl2cy0gb2cgdmlya3NvbWhlZHNkYXRhLlxcblxcbkRldHRlIHByaW5jaXAgYnlnZ2VyIHZpZGVyZSBww6UgZWtzaXN0ZXJlbmRlIGxvdmdpdm5pbmcgb2cgb3JnYW5pc2F0aW9uZXIgc29tIGYuZWtzLiBbR0RQUl0oaHR0cHM6Ly9nZHByLmRrLykgKEdlbmVyYWwgRGF0YSBQcm90ZWN0aW9uIFJlZ3VsYXRpb24pLCBbZVBSXShodHRwczovL2V1ci1sZXguZXVyb3BhLmV1L2xlZ2FsLWNvbnRlbnQvRU4vVFhULz91cmk9Q0VMRVglM0E1MjAxN1BDMDAxMCkgKGVQcml2YWN5IERpcmVrdGl2ZXQpLCBJUFIgKEludGVsbGVjdHVhbCBQcm9wZXJ0eSBSaWdodHMpIG9nIGkgZWtzZW1wZWx2aXMgW015RGF0YV0oaHR0cHM6Ly93d3cubXlkYXRhLm9yZy8pLWJldsOmZ2Vsc2VuLiBEZXQgZXIgaMOlYmV0LCBhdCBkYXRhc3V2ZXLDpm5pbnRldCBvZyB0cmFuc3BhcmVucyB2aWwgYmV0eWRlLCBhdCBmbGVyZSBkYXRhZWplcmUgdmlsIGbDuGxlIHNpZyB0cnlnZ2Ugbm9rIHRpbCBhdCBkZWxlIGRhdGEuXFxuXFxuIyMjIDIuMy4yRW4gcmV0ZsOmcmRpZyBvZyBsaWdldsOmcmRpZyBzcGlsbGVwbGFkZVxcblxcbkRldCBhbmRldCBwcmluY2lwIGZvcnPDuGdlciBhdCByZWR1Y2VyZSBkZW4gc3RpZ2VuZGUgZGF0YW1vbm9wb2xpc2VyaW5nLCBodm9yIHN0b3JlIHRlY2gtZ2lnYW50ZXIgaGFyIGV0IGZvcnNwcmluZywgZm9yZGkgZGUgZXIgaW5kZWhhdmVyZSBhZiBzdG9yZSBtw6ZuZ2RlciBhZiBkYXRhLCBvZyBmb3JkaSBkZXQgaSBkYWcgZXIgc3bDpnJ0IGF0IHNraWZ0ZSB1ZGJ5ZGVyLlxcblxcbkRhdGEgc3BhY2VzIHNrYWwgZ8O4cmUgZGV0IGxldHRlcmUgYXQgc2tpZnRlIHNlcnZpY2V1ZGJ5ZGVyLCBvZyBtYW4gc2thbCBrdW5uZSB0YWdlIHNpbiBkYXRhIG1lZCBzaWcgZnJhIMOpbiB1ZGJ5ZGVyIHRpbCBlbiBhbmRlbiAocmVndWxlcmV0IGkgRGF0YSBBY3QsIHNlIGFmc25pdCAzLjIuMSkuIERldHRlIHNrYWwgZ8O4cmUgZGV0IGxldHRlcmUgZm9yIG55ZSBzZXJ2aWNldWRieWRlcmUgYXQga29tbWUgcMOlIGJhbmVuIG9nIGRlcnZlZCBzaWtyZSwgYXQgc2VydmljZXVkYnlkZXJlIGkgaMO4amVyZSBncmFkIGtvbmt1cnJlcmVyIHDDpSBrdmFsaXRldCBmcmVtZm9yIGt2YW50aXRldCBhZiBkYXRhLiBNZWQgZGF0YSBzcGFjZXMgdmlsIG1hbiBtb2R2aXJrZSBkZW4gbG9jay1pbi1zaXR1YXRpb24sIHNvbSB2aSBvcGxldmVyIGkgZGFnLiBEZXQgZXIgZm9ydmVudG5pbmdlbiwgYXQgc3TDuHJyZSB0cmFuc3BhcmVucyBvbWtyaW5nLCBodm9ybsOlciBtYW4gc29tIGZvcmJydWdlciBhZiBldCBwcm9kdWt0IChiw6VkZSBwcml2YXRwZXJzb24gb2cgdmlya3NvbWhlZCkgJ2JldGFsZXInIG1lZCBzaW4gZGF0YSwgb2dzw6UgdmlsIGfDuHJlIGRldCBsZXR0ZXJlIGZvciBmb3JicnVnZXJlIGF0IGthcGl0YWxpc2VyZSBww6UgZGF0YSB2ZWQgYXQgc8OmbGdlIGRlbiBnZW5uZW0gbWFya2Vkc3BsYXRmb3JtZS4gTGlnZWxlZGVzIHNrYWwgZGF0YSBzcGFjZXMgZ8O4cmUgZGV0IGxldHRlcmUgYXQgc2Fta8O4cmUgZGF0YSBmcmEgZm9yc2tlbGxpZ2UgdWRieWRlcmUgb2cgYXQgZ2l2ZSB0cmVkamVwYXJ0ZXIgYWRnYW5nIHRpbCBkYXRhLCBodmlsa2V0IHNrYWwgc2lrcmUsIGF0IGRldCBpa2tlIGt1biBlciBkZSBzdG9yZSB0ZWNoLWdpZ2FudGVyIG1lZCBhZGdhbmcgdGlsIHN0b3JlIG3Dpm5nZGVyIGRhdGEsIGRlciBoYXIgbXVsaWdoZWQgZm9yIGF0IHVkdmlrbGUgZGF0YS1kcmV2bmUgc2VydmljZXMuIE7DpXIgZGV0IGJsaXZlciBtdWxpZ3QgYXQgdHLDpmtrZSBkYXRhIGZyYSBtYW5nZSBmb3Jza2VsbGlnZSBha3TDuHJlciwgdmlsIGRlciBvZ3PDpSBza2FiZXMgZW4gbWVyZSByZXRmw6ZyZGlnIG9nIGxpZ2V2w6ZyZGlnIHNwaWxsZXBsYWRlLiBEZXR0ZSBza2FsIG1pbmltZXJlIGJhcnJpZXJlciBmb3IsIGF0IG55ZSB2aXJrc29taGVkZXIgb2cgc2VydmljZXMga2FuIGtvbW1lIHDDpSBiYW5lbiBvZyBrb25rdXJyZXJlIG1lZCBkZSBla3Npc3RlcmVuZGUuIE1hbiBow6ViZXIgZGVydmVkLCBhdCBueWUgaW5ub3ZhdGl2ZSBzZXJ2aWNlcyBrYW4gb3BzdMOlLCBzYW10aWRpZyBtZWQgYXQgZGV0IHNrYWwgc2thYmUgZ3JvYnVuZCBmb3IgbnllIGZvcnJldG5pbmdzbW9kZWxsZXIgdmVkIGF0IGRlbGUgZGF0YSBww6UgdHbDpnJzIGFmIHZpcmtzb21oZWRlci5cXG5cXG4jIyMgMi4zLjNFbiBkZWNlbnRyYWxpc2VyZXQsIGJsw7hkIGluZnJhc3RydWt0dXJcXG5cXG5FbiBibMO4ZCBpbmZyYXN0cnVrdHVyIGVyIGRlIHJlZ2xlciBvZyByZXRuaW5nc2xpbmplciwgZGVyIHN1cHBsZXJlciBkZW4gaMOlcmRlIGluZnJhc3RydWt0dXIgb2cgZsOlciBkZW4gdGlsIGF0IGZ1bmdlcmUuIERldHRlIGRlc2lnbnByaW5jaXAgZXIga2xhcnQgZGV0IG1lc3Qga29tcGxla3NlIGFmIGRlIGZpcmUsIGRhIGRldCBpbmRlaG9sZGVyIGFsbGUgZGUgZsOmbGxlcyBzdGFuZGFyZGVyLCBhZnRhbGVyLCB0ZWtub2xvZ2llciBvZyBwb2xpdGlra2VyLCBzb20gc2thbCBnw6UgcMOlIHR2w6ZycyBhZiBkYXRhIHNwYWNlcyBvZyBkYXRhIHNwYWNlcy1ha3TDuHJlciwgb2cgc29tIHNrYWwgZnVuZ2VyZSBzb20gbGltZW4sIGRlciBmw6VyIGRldCBoZWxlIHRpbCBhdCBow6ZuZ2Ugc2FtbWVuLiBEZW4gYmzDuGRlIGluZnJhc3RydWt0dXIgc2thbCBza2FiZSBpbnRlcm9wZXJhYmlsaXRldCBvZyBzYW1tZW5ow6ZuZyBpbWVsbGVtIGRlY2VudHJhbGUgb2cgZnJhZ21lbnRlcmVkZSBkYXRhw7hrb3N5c3RlbWVyIHDDpSB0dsOmcnMgYWYgYWt0w7hyZXIsIHRla25vbG9naWVyLCBzZWt0b3JlciBvZyBsYW5kZS5cXG5cXG5FdCBnb2R0IG9nIG9mdGUgYmVueXR0ZXQgZWtzZW1wZWwgZXIgZGVuIGVrc2lzdGVyZW5kZSBHU00taW5mcmFzdHJ1a3R1ciwgaHZvciBtb2JpbG9wZXJhdMO4cmVyIGFsbGUga2FuIGJydWdlIGRlIHNhbW1lIG1hc3RlciB0aWwgYXQgc2VuZGUgc3RhbmRhcmRpc2VyZWRlIHNpZ25hbGVyLCBvZyBhbGxlIGJlbnl0dGVyIGRlbiBzYW1tZSB0eXBlIGlkZW50aWZpa2F0aW9uIGZvciBicnVnZXJlIGdlbm5lbSB0ZWxlZm9ubnVtcmUuIERlbiBow6VyZGUgaW5mcmFzdHJ1a3R1ciAoa2FibGVyIG9nIG1hc3Rlcikgc3VwcGxlcmVzIGFmIGRlbiBibMO4ZGUgaW5mcmFzdHJ1a3R1ciwgZGVyIHPDpnR0ZXIgc3RhbmRhcmRlciBmb3Igc2lnbmFsdHlwZXIgb2cgYmVzdGVtbWVyIGRlIG92ZXJvcmRuZWRlIHJldG5pbmdzbGluamVyIGZvciwgaHZvcmRhbiB2aSBrb21tZXIgaSBrb250YWt0IG1lZCBoaW5hbmRlbiwgb2cgaHZvcmRhbiB2aSBhZnJlZ25lciBtZWQgbW9iaWxvcGVyYXTDuHJlbi4gTsOlciBkZXQga29tbWVyIHRpbCBkYXRhIHNwYWNlcywgaGFuZGxlciBkZW4gYmzDuGRlIGluZnJhc3RydWt0dXIgb20gYXQgYmxpdmUgZW5pZ2Ugb20gZW4gb3Zlcm9yZG5ldCByZWZlcmVuY2VhcmtpdGVrdHVyLCBkdnMuIGh2aWxrZSBrb21wb25lbnRlciBvZyBha3TDuHJyb2xsZXIsIGRlciBza2FsIHbDpnJlIGkgZXQgZGF0YSBzcGFjZSBvZyBza2FiZSBub2dsZSBvdmVyb3JkbmVkZSByZWdsZXIgZm9yLCBodm9yZGFuIGRpc3NlIHNrYWwgaW50ZXJhZ2VyZSBtZWQgaGluYW5kZW4uIERlbiBibMO4ZGUgaW5mcmFzdHJ1a3R1ciBzw6Z0dGVyIHJhbW1lcm5lIGZvciwgaHZvcmRhbiBkZW4gaMOlcmRlIGluZnJhc3RydWt0dXIgc2thbCB1ZHZpa2xlcywgb2cgcmVnbGVybmUgZm9yLCBodm9yZGFuIGRlbiBza2FsIGJydWdlczpcXG5cXG5fQXMgYWxsIHBhcnRpY2lwYW50cyBpbXBsZW1lbnQgdGhlIHNhbWUgbWluaW1hbCBzZXQgb2YgZnVuY3Rpb25hbCwgbGVnYWwsIHRlY2huaWNhbCBhbmQgb3BlcmF0aW9uYWwgYWdyZWVtZW50cyBhbmQgc3RhbmRhcmRzLCB0aGV5IGNhbiBpbnRlcmFjdCBpbiB0aGUgc2FtZSBtYW5uZXIsIG5vIG1hdHRlciB3aGF0IGRhdGEgc3BhY2UgdGhleSBhcmUgb3BlcmF0aW5nIGluLiBJbnRlZ3JhbCBkZXNpZ24gb2YgdGhlc2UgYWdyZWVtZW50cyBhbmQgc3RhbmRhcmRzIGZyb20gdGhlIHN0YXJ0IHdpbGwgcHJvdmlkZSBjb2hlc2lvbiwgYXMgdGhlc2UgZWxlbWVudHMgYXJlIGNvbXBsZW1lbnRhcnkgcmF0aGVyIHRoYW4gZm9sbG93aW5nIHVwIG9uIGVhY2ggb3RoZXIuIChEZXNpZ24gUHJpbmNpcGxlcyBmb3IgRGF0YSBTcGFjZXMsIHNpZGUgMTUpLl9cXG5cXG5EZW4gYmzDuGRlIGluZnJhc3RydWt0dXIgb21mYXR0ZXIgcmV0bmluZ3NsaW5qZXIgZm9yIHVkdmlrbGluZ2VuIGFmIGRlIHRla25pc2tlIGJ5Z2dla2xvZHNlcjsgZGVuIGjDpXJkZSBpbmZyYXN0cnVrdHVyLCBzw6Ugc29tIHN0YW5kYXJkZXIgZm9yIEFQSSdlciwgbWlkZGxld2FyZS1wbGF0Zm9ybXNlbGVtZW50ZXIsIHN0YW5kYXJkZXIgZm9yIGF0IHN0cnVrdHVyZXJlIG9nIGJlc2tyaXZlIGRhdGEgb2cgbWV0YWRhdGEuIERhdGEgc3BhY2VzIHNrYWwgZmF2b3Jpc2VyZSDDpWJuZSBkYXRhIG9nIGRhdGEsIGRlciBlZnRlcmxldmVyIFtGQUlSLXByaW5jaXBwZXJuZV0oaHR0cHM6Ly93d3cuZ28tZmFpci5vcmcvKSwgc8OlIGRhdGEgZ8O4cmVzICdGaW5kYWJsZSwgQWNjZXNzaWJsZSwgSW50ZXJvcGVyYWJsZSBhbmQgUmV1c2FibGUnXFxuXFxuIyAxN1xcbi4gRGV0IGVyIGFic29sdXQgZXNzZW50aWVsdCwgYXQgZGVubmUgZGVsIGVyIHRla25vbG9naS1hZ25vc3Rpc2ssIHPDpSBkYXRhIGthbiBkZWxlcyBww6UgdHbDpnJzIGFmIGZvcnNrZWxsaWdlIHNlbnNvcmVyLCBuZXR2w6Zya3N0ZWtub2xvZ2llciBvZyBmb3Jza2VsbGlnZSB0eXBlciBhZiBwbGF0Zm9ybXN0ZWtub2xvZ2llci5cXG5cXG5FbiB2w6ZzZW50bGlnIGRlbCBhZiBkZW4gYmzDuGRlIGluZnJhc3RydWt0dXIgb21oYW5kbGVyIHN0eXJpbmcgYWYgZGF0YSBzcGFjZXMgb2cgc2FtYXJiZWpkc3JldG5pbmdzbGluamVyIOKAkyBkZW5uZSBkZWwga2FsZGVzICdnb3Zlcm5hbmNlJy1kZWxlbiDigJMgb2cgb21mYXR0ZXIgZsOmbGxlcyBhZnRhbGVyIG9nIHN0YW5kYXJkZXIgaW5kZW5mb3IgZGF0YXBvbGl0aWtrZXIsIHJldG5pbmdzbGluamVyIGZvciBzaWtrZXJoZWQgb2cgZGlzdHJpYnVlcmV0IGRpZ2l0YWwgdHJvdsOmcmRpZ2hlZCwgaWRlbnRpdGV0c29wcmluZGVsc2UsIG9nIGRhdGFpbmZvcm1hdGlvbnNtb2RlbGxlci4gRGVydWRvdmVyIGVyIGVuIHZpZ3RpZyBkZWwgYWYgZ292ZXJuYW5jZS1zdHJ1a3R1cmVuLCBhdCBkZXIgc2thbCB1ZGFyYmVqZGVzIHN0YW5kYXJkIFNlcnZpY2UgTGV2ZWwgQWdyZWVtZW50cywgU21hcnQgQ29udHJhY3RzIChzw6UgbWFuIGxldCBrYW4gaW5kZ8OlIGtvbnRyYWt0ZXIgbWVkIG55ZSBwYXJ0bmVyZSk7IGhlciBza2FsIGZvcm11bGVyZXMgbWFya2Vkc3ZpbGvDpXIgb2cgZm9ycmV0bmluZ3Ntb2RlbGxlciBvZyBpa2tlIG1pbmRzdCBkZSBvdmVyb3JkbmVkZSBzYW1hcmJlamRza3JpdGVyaWVyLlxcblxcbkRpc3NlIGFmdGFsZXIgb2cgc3RhbmRhcmRlciBza2FsIG5hdHVybGlndmlzIGVmdGVybGV2ZSBla3Npc3RlcmVuZGUsIGhvcmlzb250YWxlIGJlc3RlbW1lbHNlciBvZyBqdXJpZGlza2UgcmFtbWVyIG9ta3JpbmcgR0RQUiwgRnJlZSBGbG93IG9mIE5vbi1QZXJzb25hbCBEYXRhIFJlZ3VsYXRpb24sIGVQcml2YWN5IERpcmVjdGl2ZSwgSVBSLCBEYXRhYmFzZWRpcmVrdGl2ZXQsIElOU1BJUkUgRGlyZWt0aXZldCwgRGlyZWt0aXZldCBvbSDDhWJuZSBEYXRhLCBpbml0aWF0aXZldCBFdCBJbnRlcm9wZXJhYmVsdCBFdXJvcGEsIFBsYXRmb3JtIHRvIEJ1c2luZXNzIFJlZ3VsYXRpb24sIFdUTydzIEdlbmVyYWwgQWdyZWVtZW50IG9uIFRyYWRlIGluIFNlcnZpY2VzIG0ubS4gT2cgZGUgZW5rZWx0ZSBkYXRhIHNwYWNlcyBza2FsIG92ZXJob2xkZSBzZWt0b3JzcGVjaWZpa2tlIHJlZ3VsZXJpbmdlciBzb20gZi5la3MuIEVsZWN0cmljaXR5IFJlZ3VsYXRpb24gb2cgSW50ZWxsaWdlbnQgVHJhbnNwb3J0IFN5c3RlbSBEaXJlY3RpdmUgKGRldHRlIHVkZHliZXMgaSBGb3JzbGFnIHRpbCBEYXRhIEFjdCBzaWRlIDUtNykuIERlc3VkZW4gYmVza3JpdmVyIEtvbW1pc3Npb25lbiwgYXQgZGUgdGVrbm9sb2dpc2tlIGtvbXBvbmVudGVyIHNrYWwgZWZ0ZXJsZXZlICdjeWJlcnNlY3VyaXR5IGJ5IGRlc2lnbi1wcmluY2lwcGV0JyBvZyAnZGF0YSBwcm90ZWN0aW9uIGJ5IGRlc2lnbicgb2cgc2VsdmbDuGxnZWxpZyBvdmVyaG9sZGUgR0RQUi5cXG5cXG5EZSBmbGVzdGUgZGF0YSBzcGFjZS1ha3TDuHJlciBlciBlbmlnZSBvbSwgYXQgZGUgc3bDpnJlc3RlIGRlbGUgYWYgZGVuIGJsw7hkZSBpbmZyYXN0cnVrdHVyIGJsaXZlciBnb3Zlcm5hbmNlLWRlbGVuLCBvZyBzb20gZGV0IGJsaXZlciB0eWRlbGlndCBpIGthcGl0ZWwgNCwgaHZvciB2aSBiZXNrcml2ZXIgZGUgc3RvcmUgYWt0w7hyZXIgaW5kZW5mb3IgZGF0YSBzcGFjZXMsIHPDpSBlciBkZXQgb2dzw6UgcMOlIGdvdmVybmFuY2UtIG9nIHJlZmVyZW5jZWFya2l0ZWt0dXJlbiwgYXQgZGV0IHN0w7hyc3RlIGFyYmVqZGUgZm9yZXRhZ2VzIHAudC4gRGV0IGVyIGVuIHZpZ3RpZyBvcGdhdmUgYXQgZmluZGUgdWQgYWYsIGh2b3IgbWVnZXQgYWYgZGVubmUgYmzDuGRlIGluZnJhc3RydWt0dXIgZGVyIGthbiBnw6UgcMOlIHR2w6ZycyBhZiBhbGxlIGRhdGEgc3BhY2VzLCBvZyBodm9yIGRlciBza2FsIGxhdmVzIHNwZWNpZmlra2UgcmVnbGVyIG9nIHN0YW5kYXJkZXIgdGlsIGRlIGZvcnNrZWxsaWdlIHNla3RvcnNwZWNpZmlra2UgZGF0YW9tcsOlZGVyLiBEZXQgZXIgdmlndGlndCwgYXQgc8OlIG1lZ2V0IHNvbSBtdWxpZ3QgZ8OlciBww6UgdHbDpnJzLCBkYSBkZXQgZXIgZm9ydWRzw6Z0bmluZ2VuIGZvciBlbiBuZW0gZGF0YXVkdmVrc2xpbmcgcMOlIHR2w6ZycyBhZiBzZWt0b3Jlci4gU2FtdGlkaWcgYW5lcmtlbmRlcyBkZXQsIGF0IGRlciBlciBzZWt0b3JzcGVjaWZpa2tlIHJlZ2xlciBvZyByZWd1bGVyaW5nZXIsIHNvbSBtYW4gbcOlIHRhZ2UgaMO4amRlIGZvci4gU3VuZGhlZHNkYXRhIHNrYWwgbmF0dXJsaWd2aXMgYmVoYW5kbGVzIG1lZ2V0IGFuZGVybGVkZXMgZW5kIGYuZWtzLiBtaWxqw7hkYXRhIG9nIHRyYW5zcG9ydGRhdGEuXFxuXFxuIyMjIDIuMy40T2ZmZW50bGlnLXByaXZhdCBzdHlyaW5nXFxuXFxuRGV0IGZqZXJkZSBvZyBzaWRzdGUgcHJpbmNpcCBoYW5kbGVyIG9tIGF0IHNrYWJlIGVuIGdvZCBiYWxhbmNlIG1lbGxlbSBvZmZlbnRsaWcgb2cgcHJpdmF0IHN0eXJpbmcuIERldHRlIHByaW5jaXAgdGFnZXIgdWRnYW5nc3B1bmt0IGkgZGVuIGhpc3Rvcmlza2Ugc2l0dWF0aW9uLCBodm9yIGludGVybmV0dGV0IG9nIGRhdGFtYXJrZWRlciBwcmltw6ZydCBoYXIgdsOmcmV0IGtvbnRyb2xsZXJldCBvZyBkcmV2ZXQgYWYgcHJpdmF0ZSB2aXJrc29taGVkZXJzIG9nIHN0b3JlIHRlY2gtZ2lnYW50ZXJzIGludGVyZXNzZXIuIE1lZCByZWd1bGVyaW5nZW4gYWYgZGF0YSBzcGFjZXMgw7huc2tlciBtYW4gYXQgc2thYmUgZXQgZGF0YW1hcmtlZCBvZyBlbiBkYXRhw7hrb25vbWksIGh2b3IgbGFuZ3QgZmxlcmUgYWt0w7hyZXJzIGludGVyZXNzZXIgdmFyZXRhZ2VzLlxcblxcbioqRGV0IHVuZGVyc3RyZWdlcyBkZXJmb3IsIGF0IGFyYmVqZGV0IG1lZCBhdCBkZXNpZ25lIG9nIGltcGxlbWVudGVyZSBkYXRhIHNwYWNlcyBrcsOmdmVyIGVuIGRlbW9rcmF0aXNrIHByb2NlcywgaHZvciBiw6VkZSBwcml2YXRwZXJzb25lciwgc23DpSBvZyBzdG9yZSB2aXJrc29taGVkZXIsIE5HTydlciwga29tbXVuZXIsIHN0YXRlciBtLm0uIGluZGRyYWdlcy4qKlxcblxcbkxvdmdpdm5pbmcsIHJlZ3VsZXJpbmcgb2cgZGVzaWduIGFmIGRhdGEgc3BhY2VzIHNrYWwgc2tlIHDDpSBlbiBtw6VkZSwgZGVyIHPDuHJnZXIgZm9yLCBhdCBkYXRhIGthbiBiZW55dHRlcyB0aWwgZm9ybcOlbCBww6UgdHbDpnJzIGFmIG9mZmVudGxpZ2Ugb2cgcHJpdmF0ZSBteW5kaWdoZWRlci4gRGV0IGVyIHZpZ3RpZ3QsIGF0IGRlciB0YWdlcyBoZW5zeW4gdGlsIHZpcmtzb21oZWRlcnMgbXVsaWdoZWRlciBmb3IgZm9ycmV0bmluZ3N1ZHZpa2xpbmcgb2cgSVBSLCBzYW10aWRpZyBtZWQgYXQgZGF0YSBhbnZlbmRlcyB0aWwgc3TDuHJyZSBzYW1mdW5kc2tyaXRpc2tlIGZvcm3DpWwgc29tIGdyw7huIG9tc3RpbGxpbmcgb2cgdWR2aWtsaW5nIGFmIHN1bmRoZWRzc2VrdG9yZW4uIEV0IGVsZW1lbnQgaSBkZXR0ZSBwcmluY2lwIGVyLCBhdCBkYXRhIGZyYSBwcml2YXRlIHZpcmtzb21oZWRlciBvZyBvcmdhbmlzYXRpb25lciBza2FsIGt1bm5lIHN0aWxsZXMgdGlsIHLDpWRpZ2hlZCBmb3Igb2ZmZW50bGlnZSBteW5kaWdoZWRlciB1bmRlciBzw6ZybGlnZSBvbXN0w6ZuZGlnaGVkZXIgc29tIGYuZWtzLiB2ZWQgZW4gcGFuZGVtaSAoZGV0dGUgbG92Z2l2ZXMgZGVyIG9tIGkgRGF0YSBBY3QsIHNlIGFmc25pdCAzLjIuMSkuXFxuXFxuT3ZlbmZvciBoYXIgdmkgYmVza3JldmV0IGRlIGZpcmUgb3Zlcm9yZG5lZGUgZ3J1bmRwcmluY2lwcGVyIHNvbSBkYXRhIHNwYWNlcyBza2FsIGRlc2lnbmVzIHVkIGZyYS4gTmVkZW5mb3IgdmlsIHZpIHNlIG7DpnJtZXJlIHDDpSwgaHZhZCBkZXR0ZSBiZXR5ZGVyIGZvciBkZSBmb3Jza2VsbGlnZSBha3TDuHJyb2xsZXIsIG1hbiBmb3Jlc3RpbGxlciBzaWcgc2thbCB0YWdlIGRlbCBpIGRhdGEgc3BhY2VzLCBodm9yZGFuIGRpc3NlIHNrYWwgb3JnYW5pc2VyZXMgaSBmb3Job2xkIHRpbCBoaW5hbmRlbiwgb2cgaHZpbGtlIHRla25vbG9naXNrZSBvZyBvcmdhbmlzYXRvcmlza2Uga29tcG9uZW50ZXIsIG1hbiBmb3Jlc3RpbGxlciBzaWcsIGF0IGRhdGEgc3BhY2VzIHNrYWwgYmVzdMOlIGFmLlxcblwiO1xuY29uc3QgZmlsZXBhdGggPSBcIi9odmFkLWVyLWRhdGEtc3BhY2VzL2RhdGEtc3BhY2UtZGVzaWducHJpbmNpcHBlci5tZFwiO1xuY29uc3QgYXN0ID0gTWFya2RvYy5wYXJzZShzb3VyY2UpO1xuXG4vKipcbiAqIExpa2UgdGhlIEFTVCwgZnJvbnRtYXR0ZXIgd29uJ3QgY2hhbmdlIGF0IHJ1bnRpbWUsIHNvIGl0IGlzIGxvYWRlZCBhdCBmaWxlIHJvb3QuXG4gKiBUaGlzIHVuYmxvY2tzIGZ1dHVyZSBmZWF0dXJlcywgc3VjaCBhIHBlci1wYWdlIGRhdGFGZXRjaGluZ0Z1bmN0aW9uLlxuICovXG5jb25zdCBmcm9udG1hdHRlciA9IGFzdC5hdHRyaWJ1dGVzLmZyb250bWF0dGVyXG4gID8geWFtbC5sb2FkKGFzdC5hdHRyaWJ1dGVzLmZyb250bWF0dGVyKVxuICA6IHt9O1xuXG5jb25zdCB7Y29tcG9uZW50cywgLi4ucmVzdH0gPSBnZXRTY2hlbWEoc2NoZW1hKVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3RhdGljUHJvcHMoY29udGV4dCkge1xuICBjb25zdCBwYXJ0aWFscyA9IHt9O1xuXG4gIC8vIEVuc3VyZSBOb2RlLnRyYW5zZm9ybUNoaWxkcmVuIGlzIGF2YWlsYWJsZVxuICBPYmplY3Qua2V5cyhwYXJ0aWFscykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgcGFydGlhbHNba2V5XSA9IE1hcmtkb2MucGFyc2UocGFydGlhbHNba2V5XSk7XG4gIH0pO1xuXG4gIGNvbnN0IGNmZyA9IHtcbiAgICAuLi5yZXN0LFxuICAgIHZhcmlhYmxlczoge1xuICAgICAgLi4uKHJlc3QgPyByZXN0LnZhcmlhYmxlcyA6IHt9KSxcbiAgICAgIC8vIHVzZXIgY2FuJ3Qgb3ZlcnJpZGUgdGhpcyBuYW1lc3BhY2VcbiAgICAgIG1hcmtkb2M6IHtmcm9udG1hdHRlcn0sXG4gICAgICAvLyBBbGxvd3MgdXNlcnMgdG8gZWplY3QgZnJvbSBNYXJrZG9jIHJlbmRlcmluZyBhbmQgcGFzcyBpbiBkeW5hbWljIHZhcmlhYmxlcyB2aWEgZ2V0U2VydmVyU2lkZVByb3BzXG4gICAgICAuLi4oY29udGV4dC52YXJpYWJsZXMgfHwge30pXG4gICAgfSxcbiAgICBwYXJ0aWFscyxcbiAgICBzb3VyY2UsXG4gIH07XG5cbiAgLyoqXG4gICAqIHRyYW5zZm9ybSBtdXN0IGJlIGNhbGxlZCBpbiBkYXRhRmV0Y2hpbmdGdW5jdGlvbiB0byBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZyB3aGlsZVxuICAgKiBhY2Nlc3NpbmcgdmFyaWFibGVzIG9uIHRoZSBzZXJ2ZXJcbiAgICovXG4gIGNvbnN0IGNvbnRlbnQgPSBNYXJrZG9jLnRyYW5zZm9ybShhc3QsIGNmZyk7XG5cbiAgcmV0dXJuIHtcbiAgICAvLyBSZW1vdmVzIHVuZGVmaW5lZFxuICAgIHByb3BzOiBKU09OLnBhcnNlKFxuICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtYXJrZG9jOiB7XG4gICAgICAgICAgY29udGVudCxcbiAgICAgICAgICBmcm9udG1hdHRlcixcbiAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICBwYXRoOiBmaWxlcGF0aFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKSxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWFya2RvY0NvbXBvbmVudChwcm9wcykge1xuICAvLyBPbmx5IGV4ZWN1dGUgSE1SIGNvZGUgaW4gZGV2ZWxvcG1lbnRcbiAgcmV0dXJuIHJlbmRlcmVycy5yZWFjdChwcm9wcy5tYXJrZG9jLmNvbnRlbnQsIFJlYWN0LCB7XG4gICAgY29tcG9uZW50czoge1xuICAgICAgLi4uY29tcG9uZW50cyxcbiAgICAgIC8vIEFsbG93cyB1c2VycyB0byBvdmVycmlkZSBkZWZhdWx0IGNvbXBvbmVudHMgYXQgcnVudGltZSwgdmlhIHRoZWlyIF9hcHBcbiAgICAgIC4uLnByb3BzLmNvbXBvbmVudHMsXG4gICAgfSxcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJyZW5kZXJlcnMiLCJnZXRTY2hlbWEiLCJjb25maWciLCJ0YWdzIiwibm9kZXMiLCJmdW5jdGlvbnMiLCJzY2hlbWEiLCJkZWZhdWx0IiwiY29tcG9uZW50cyIsIk1hcmtkb2NDb21wb25lbnQiLCJwcm9wcyIsInJlYWN0IiwibWFya2RvYyIsImNvbnRlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/pages/hvad-er-data-spaces/data-space-designprincipper.md\n"));

/***/ })

});